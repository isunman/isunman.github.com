<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳侠</title>
  <subtitle>我是一颗恒星</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://isunman.com/"/>
  <updated>2021-08-15T03:54:02.571Z</updated>
  <id>http://isunman.com/</id>
  
  <author>
    <name>isunman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux查找并移动文件</title>
    <link href="http://isunman.com/2021/08/15/linux-finds-and-move-files/"/>
    <id>http://isunman.com/2021/08/15/linux-finds-and-move-files/</id>
    <published>2021-08-15T03:48:00.000Z</published>
    <updated>2021-08-15T03:54:02.571Z</updated>
    
    <content type="html">&lt;p&gt;linux查找并移动文件&lt;/p&gt;
&lt;h3 id=&quot;原文参考&quot;&gt;&lt;a href=&quot;#原文参考&quot; class=&quot;headerlink&quot; title=&quot;原文参考&quot;&gt;&lt;/a&gt;原文参考&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;find . -name &amp;apos;10-*.dat&amp;apos; -exec mv {} ../ \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里：&lt;/p&gt;
&lt;p&gt;=&amp;gt; -exec mv {} /mnt/mp3 \; - 运行mv命令。&lt;/p&gt;
&lt;p&gt;=&amp;gt; {} - 字符 ‘{}’ 代表find到的所有内容。&lt;/p&gt;
&lt;p&gt;=&amp;gt;../表示当前用户目录的上一级目录&lt;/p&gt;
&lt;p&gt;=&amp;gt; \; - 结束 /bin/mv 命令。&lt;/p&gt;
&lt;h3 id=&quot;亲测可用&quot;&gt;&lt;a href=&quot;#亲测可用&quot; class=&quot;headerlink&quot; title=&quot;亲测可用&quot;&gt;&lt;/a&gt;亲测可用&lt;/h3&gt;&lt;p&gt;移动搜索匹配条件的文件到指定目录&lt;/p&gt;
&lt;p&gt;查找并移动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find . -name &amp;apos;faverifyimage_*.png&amp;apos; -exec mv {} ../ \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只查找&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find . -name &amp;apos;faverifyimage_*.png&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下命令是：&lt;/p&gt;
&lt;p&gt;移动【当前目录下（不含子目录）】【以faverifyimage_开头的图片文件】到【faverifyimgbk】目录。&lt;/p&gt;
&lt;p&gt;说明：扩展了“不含子目录”这个条件，只操作“当前目录”；同时，继续执行了其他格式的图片文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find . -maxdepth 1 -name &amp;apos;faverifyimage_*.png&amp;apos; -exec mv {} ./faverifyimgbk \;
find . -maxdepth 1 -name &amp;apos;faverifyimage_*.jpg&amp;apos; -exec mv {} ./faverifyimgbk \;
find . -maxdepth 1 -name &amp;apos;faverifyimage_*.jpeg&amp;apos; -exec mv {} ./faverifyimgbk \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;linux查找并移动文件&lt;/p&gt;
&lt;h3 id=&quot;原文参考&quot;&gt;&lt;a href=&quot;#原文参考&quot; class=&quot;headerlink&quot; title=&quot;原文参考&quot;&gt;&lt;/a&gt;原文参考&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;find . -name &amp;apos;10-*.dat&amp;apos; 
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP浮点数计算必须使用PHP提供的高精度计算函数</title>
    <link href="http://isunman.com/2021/06/07/PHP-floating-point-calculations-must-use-the-high-precision-calculation-functions-provided-by-PHP/"/>
    <id>http://isunman.com/2021/06/07/PHP-floating-point-calculations-must-use-the-high-precision-calculation-functions-provided-by-PHP/</id>
    <published>2021-06-07T02:38:00.000Z</published>
    <updated>2021-06-07T02:40:06.975Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、前方有坑&quot;&gt;&lt;a href=&quot;#一、前方有坑&quot; class=&quot;headerlink&quot; title=&quot;一、前方有坑&quot;&gt;&lt;/a&gt;一、前方有坑&lt;/h3&gt;&lt;p&gt;php在使用加减乘除等运算符计算浮点数的时候，经常会出现意想不到的结果，特别是关于财务数据方面的计算，给不少工程师惹了很多的麻烦。比如今天工作终于到的一个案例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$a = 2586;

$b = 2585.98;

var_dump($a-$b);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;期望的结果是：float(0.02)&lt;/p&gt;
&lt;p&gt;实际结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float(0.019999999999982)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;人生有坑，处处提防&lt;/p&gt;
&lt;h3 id=&quot;二、防坑攻略：&quot;&gt;&lt;a href=&quot;#二、防坑攻略：&quot; class=&quot;headerlink&quot; title=&quot;二、防坑攻略：&quot;&gt;&lt;/a&gt;二、防坑攻略：&lt;/h3&gt;&lt;p&gt;1、通过乘100的方式转化为整数加减，然后在除以100转化回来……&lt;/p&gt;
&lt;p&gt;2、使用number_format转化成字符串，然后在使用（float）强转回来……&lt;/p&gt;
&lt;p&gt;3、php提供了高精度计算的函数库，实际上就是为了解决这个浮点数计算问题而生的。&lt;/p&gt;
&lt;p&gt;主要函数有：&lt;/p&gt;
&lt;p&gt;bcadd — 将两个高精度数字相加&lt;/p&gt;
&lt;p&gt;bccomp — 比较两个高精度数字，返回-1, 0, 1&lt;/p&gt;
&lt;p&gt;bcdiv — 将两个高精度数字相除&lt;/p&gt;
&lt;p&gt;bcmod — 求高精度数字余数&lt;/p&gt;
&lt;p&gt;bcmul — 将两个高精度数字相乘&lt;/p&gt;
&lt;p&gt;bcpow — 求高精度数字乘方&lt;/p&gt;
&lt;p&gt;bcpowmod — 求高精度数字乘方求模，数论里非常常用&lt;/p&gt;
&lt;p&gt;bcscale — 配置默认小数点位数，相当于就是Linux bc中的”scale=”&lt;/p&gt;
&lt;p&gt;bcsqrt — 求高精度数字平方根&lt;/p&gt;
&lt;p&gt;bcsub — 将两个高精度数字相减&lt;/p&gt;
&lt;p&gt;前两种流氓的办法就不测试了，使用bcsub测试第三种两数相减的例子，&lt;/p&gt;
&lt;p&gt;先看bcsub用法（来自官网）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string bcsub ( string $left_operand , string $right_operand [, int $scale = int ] )

参数

left_operand 字符串类型的左操作数.

right_operand 字符串类型的右操作数.

scale 此可选参数用于设置结果中小数点后的小数位数。也可通过使用 bcscale() 来设置全局默认的小数位数，用于所有函数。

返回值 返回减法之后结果为字符串类型.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var_dump(bcsub($a,$b,2));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.02
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他的函数请参考PHP官方网站&lt;/p&gt;
&lt;h3 id=&quot;三、为啥有坑：&quot;&gt;&lt;a href=&quot;#三、为啥有坑：&quot; class=&quot;headerlink&quot; title=&quot;三、为啥有坑：&quot;&gt;&lt;/a&gt;三、为啥有坑：&lt;/h3&gt;&lt;p&gt;php的bug?不是，这是所有语言基本上都会遇到的问题，所以基本上大部分语言都提供了精准计算的类库或函数库。&lt;/p&gt;
&lt;p&gt;要搞明白这个原因, 首先我们要知道浮点数的表示(IEEE 754):&lt;/p&gt;
&lt;p&gt;浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位).&lt;/p&gt;
&lt;p&gt;符号位：最高位表示数据的正负，0表示正数，1表示负数。&lt;/p&gt;
&lt;p&gt;指数位：表示数据以2为底的幂，指数采用偏移码表示&lt;/p&gt;
&lt;p&gt;尾数：表示数据小数点后的有效数字.&lt;/p&gt;
&lt;p&gt;这里的关键点就在于, 小数在二进制的表示, 小数如何转化为二进制呢？&lt;/p&gt;
&lt;p&gt;算法是乘以2直到没有了小数为止。这里举个例子，0.9表示成二进制数&lt;/p&gt;
&lt;p&gt;0.9*2=1.8 取整数部分 1&lt;/p&gt;
&lt;p&gt;0.8(1.8的小数部分)*2=1.6 取整数部分 1&lt;/p&gt;
&lt;p&gt;0.6*2=1.2 取整数部分 1&lt;/p&gt;
&lt;p&gt;0.2*2=0.4 取整数部分 0&lt;/p&gt;
&lt;p&gt;0.4*2=0.8 取整数部分 0&lt;/p&gt;
&lt;p&gt;0.8*2=1.6 取整数部分 1&lt;/p&gt;
&lt;p&gt;0.6*2=1.2 取整数部分 0&lt;/p&gt;
&lt;p&gt;………&lt;/p&gt;
&lt;p&gt;0.9二进制表示为(从上往下): 1100100100100……&lt;/p&gt;
&lt;p&gt;注意：上面的计算过程循环了，也就是说*2永远不可能消灭小数部分，这样算法将无限下去。很显然，小数的二进制表示有时是不可能精确的 。其实道理很简单，十进制系统中能不能准确表示出1/3呢？同样二进制系统也无法准确表示1/10。这也就解释了为什么浮点型减法出现了”减不尽”的精度丢失问题。&lt;/p&gt;
&lt;p&gt;换句话说：我们看到十进制小数，在计算机内存储的不是一个精确的数字，也不可能精确。所以在数字加减乘除后出现意想不到的结果。&lt;/p&gt;
&lt;h3 id=&quot;四、防坑提示&quot;&gt;&lt;a href=&quot;#四、防坑提示&quot; class=&quot;headerlink&quot; title=&quot;四、防坑提示&quot;&gt;&lt;/a&gt;四、防坑提示&lt;/h3&gt;&lt;p&gt;基于以上原因，所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用任意精度数学函数或者 gmp 函数。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/kenshinobiy/p/10797902.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/kenshinobiy/p/10797902.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前方有坑&quot;&gt;&lt;a href=&quot;#一、前方有坑&quot; class=&quot;headerlink&quot; title=&quot;一、前方有坑&quot;&gt;&lt;/a&gt;一、前方有坑&lt;/h3&gt;&lt;p&gt;php在使用加减乘除等运算符计算浮点数的时候，经常会出现意想不到的结果，特别是关于财务数据方面的计算，给不少
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="思考" scheme="http://isunman.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统安装Composer的两种方法</title>
    <link href="http://isunman.com/2021/04/26/two-ways-to-install-composer-on-a-linux-system/"/>
    <id>http://isunman.com/2021/04/26/two-ways-to-install-composer-on-a-linux-system/</id>
    <published>2021-04-25T16:12:00.000Z</published>
    <updated>2021-04-25T16:12:18.436Z</updated>
    
    <content type="html">&lt;p&gt;实际使用的系统：CentOS 6.5&lt;/p&gt;
&lt;h4 id=&quot;1、方法一-CURL&quot;&gt;&lt;a href=&quot;#1、方法一-CURL&quot; class=&quot;headerlink&quot; title=&quot;1、方法一 CURL&quot;&gt;&lt;/a&gt;1、方法一 CURL&lt;/h4&gt;&lt;p&gt;下载composer.phar文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -sS https://getcomposer.org/installer | php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将composer.phar移动到环境变量中并且更名为composer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv composer.phar  /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用国内镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;composer config -g repo.packagist composer https://packagist.phpcomposer.com
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2、方法二-直接下载composer&quot;&gt;&lt;a href=&quot;#2、方法二-直接下载composer&quot; class=&quot;headerlink&quot; title=&quot;2、方法二 直接下载composer&quot;&gt;&lt;/a&gt;2、方法二 直接下载composer&lt;/h4&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://getcomposer.org/composer.phar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp composer.phar /usr/local/bin/composer
chmod u+x /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;composer –help&lt;/p&gt;
&lt;h4 id=&quot;3、安装的时候用root用户，使用的时候用非root用户&quot;&gt;&lt;a href=&quot;#3、安装的时候用root用户，使用的时候用非root用户&quot; class=&quot;headerlink&quot; title=&quot;3、安装的时候用root用户，使用的时候用非root用户&quot;&gt;&lt;/a&gt;3、安装的时候用root用户，使用的时候用非root用户&lt;/h4&gt;&lt;p&gt;否则，如果使用root运行会有提示：&lt;/p&gt;
&lt;p&gt;运行composer出现&lt;code&gt;do not run Composer as root/super user!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;第1步 创建非root的新用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos ~]# useradd newname
[root@centos ~]# passwd  newname
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第2步 切换为新用户账户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@centos ~]# su newname
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;切换到新用户后 , 即可执行 原来的操作 , 顺利完成 composer 指令。&lt;/p&gt;
&lt;p&gt;【注意】同时，需要使用root用户将 &lt;code&gt;/usr/local/bin/composer&lt;/code&gt; 设置为755，否则其他用户无法执行该命令。&lt;/p&gt;
&lt;p&gt;【本人亲测，使用上述方法2和步骤3成功安装了Composer 2.1-dev版。方法1未测试。】&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;实际使用的系统：CentOS 6.5&lt;/p&gt;
&lt;h4 id=&quot;1、方法一-CURL&quot;&gt;&lt;a href=&quot;#1、方法一-CURL&quot; class=&quot;headerlink&quot; title=&quot;1、方法一 CURL&quot;&gt;&lt;/a&gt;1、方法一 CURL&lt;/h4&gt;&lt;p&gt;下载composer.p
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>服务器管理血的教训</title>
    <link href="http://isunman.com/2021/04/25/Server-management-blood-lessons/"/>
    <id>http://isunman.com/2021/04/25/Server-management-blood-lessons/</id>
    <published>2021-04-24T21:38:00.000Z</published>
    <updated>2021-04-24T21:58:54.272Z</updated>
    
    <content type="html">&lt;p&gt;服务器管理血的教训&lt;/p&gt;
&lt;p&gt;服务器管理，尤其是Linux服务器管理，必须注意以下几项原则，并做到。&lt;/p&gt;
&lt;h3 id=&quot;1、绝对不能随便使用rm-rf命令&quot;&gt;&lt;a href=&quot;#1、绝对不能随便使用rm-rf命令&quot; class=&quot;headerlink&quot; title=&quot;1、绝对不能随便使用rm -rf命令&quot;&gt;&lt;/a&gt;1、绝对不能随便使用&lt;code&gt;rm -rf&lt;/code&gt;命令&lt;/h3&gt;&lt;p&gt;因为会递归强制删除文件，几乎都不会可恢复。【影响响程度太深】&lt;/p&gt;
&lt;h5 id=&quot;挽救措施：&quot;&gt;&lt;a href=&quot;#挽救措施：&quot; class=&quot;headerlink&quot; title=&quot;挽救措施：&quot;&gt;&lt;/a&gt;挽救措施：&lt;/h5&gt;&lt;p&gt;1、马上停止数据继续写入，将系统挂起。使用一些恢复数据的方法进行磁盘数据数据恢复操作。一般不能全部恢复；而且还会影响线上的业务的停止。&lt;/p&gt;
&lt;p&gt;2、把快照的数据恢复到一个其他不是生产环境的阿里云服务器实例上，然后恢复到那个快照中的数据，再把误删除而需要的数据拷贝过来。原线上生产环境的业务不用停止。&lt;/p&gt;
&lt;h3 id=&quot;2、绝对不能使用-yum-update命令&quot;&gt;&lt;a href=&quot;#2、绝对不能使用-yum-update命令&quot; class=&quot;headerlink&quot; title=&quot;2、绝对不能使用 yum update命令&quot;&gt;&lt;/a&gt;2、绝对不能使用 &lt;code&gt;yum update&lt;/code&gt;命令&lt;/h3&gt;&lt;p&gt;因为会升级Linux 内核，而这个升级后的内核可能会引起各种问题。【影响范围太大】&lt;/p&gt;
&lt;h5 id=&quot;挽救措施：-1&quot;&gt;&lt;a href=&quot;#挽救措施：-1&quot; class=&quot;headerlink&quot; title=&quot;挽救措施：&quot;&gt;&lt;/a&gt;挽救措施：&lt;/h5&gt;&lt;p&gt;如果之前的系统内核还在，重启启动那个内核；&lt;br&gt;如果没问题的话，设置开机启动的内核为这个正常可用的内核。&lt;/p&gt;
&lt;h3 id=&quot;3、关键操作开始之前必须备份数据-快照&quot;&gt;&lt;a href=&quot;#3、关键操作开始之前必须备份数据-快照&quot; class=&quot;headerlink&quot; title=&quot;3、关键操作开始之前必须备份数据+快照&quot;&gt;&lt;/a&gt;3、关键操作开始之前必须备份数据+快照&lt;/h3&gt;&lt;p&gt;既不能因为精神不好产生错误的指令输入，或者粗心大意没有在意造成严重的后果；&lt;br&gt;又不能怕操作错误而什么都不敢做了。&lt;/p&gt;
&lt;p&gt;有一个宗旨【稳定第一】【宁愿冗余，也不得丢失数据】。&lt;/p&gt;
&lt;p&gt;不明确知道命令输入执行的后果的，就绝不执行。&lt;/p&gt;
&lt;p&gt;——————于2021年04月25日 凌晨5：35——必须记下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;服务器管理血的教训&lt;/p&gt;
&lt;p&gt;服务器管理，尤其是Linux服务器管理，必须注意以下几项原则，并做到。&lt;/p&gt;
&lt;h3 id=&quot;1、绝对不能随便使用rm-rf命令&quot;&gt;&lt;a href=&quot;#1、绝对不能随便使用rm-rf命令&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>DiscuzX3.1使用Composer安装第三方类库</title>
    <link href="http://isunman.com/2021/04/23/Discuz-X3.1-uses-Composer-to-install-third-party-libraries/"/>
    <id>http://isunman.com/2021/04/23/Discuz-X3.1-uses-Composer-to-install-third-party-libraries/</id>
    <published>2021-04-23T09:48:00.000Z</published>
    <updated>2021-04-23T10:01:10.112Z</updated>
    
    <content type="html">&lt;p&gt;Discuz X3.1 是一个成熟的基于PHP开发的社区系统（广义上来讲是一个建站系统），自从被企鹅收购后悄无声息的被遗弃了，伤感啊。如今要在Discuz上加什么功能，改bug什么的只能依靠自力更生了；好在有各种开源社区，开发好的功能、类库你可以无偿的直接拿来用。&lt;/p&gt;
&lt;p&gt;Composer 是一个PHP类库管理器（官网&lt;a href=&quot;http://docs.phpcomposer.com）。Composer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.phpcomposer.com）。Composer&lt;/a&gt; 优雅的解决了PHP项目中第三方类库的安装及依赖关系。很多成熟的项目（如 Laravel ）已经把Composer作为首选的安装方式；&lt;/p&gt;
&lt;p&gt;所以，在Discuz X3.1 上安装第三方类库使用Composer后，会很大提高生产力。&lt;/p&gt;
&lt;p&gt;下面我来说说如何在 Discuz X3.1中使用 Composer 安装并使用第三方类库 ；&lt;/p&gt;
&lt;h3 id=&quot;先说安装Composer到Discuz-X3-1框架下&quot;&gt;&lt;a href=&quot;#先说安装Composer到Discuz-X3-1框架下&quot; class=&quot;headerlink&quot; title=&quot;先说安装Composer到Discuz X3.1框架下&quot;&gt;&lt;/a&gt;先说安装Composer到Discuz X3.1框架下&lt;/h3&gt;&lt;h4 id=&quot;一-修改-class-core-php-source-class-class-core-php-如下&quot;&gt;&lt;a href=&quot;#一-修改-class-core-php-source-class-class-core-php-如下&quot; class=&quot;headerlink&quot; title=&quot;一. 修改 class_core.php (\source\class\class_core.php) 如下&quot;&gt;&lt;/a&gt;一. 修改 &lt;code&gt;class_core.php (\source\class\class_core.php)&lt;/code&gt; 如下&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$autoloadfile=DISCUZ_ROOT.&amp;apos;/vendor/autoload.php&amp;apos;;
if(!file_exists($autoloadfile)){  
    if(function_exists(&amp;apos;spl_autoload_register&amp;apos;)) {
        spl_autoload_register(array(&amp;apos;core&amp;apos;, &amp;apos;autoload&amp;apos;));
    } else {
           function __autoload($class) {
            return core::autoload($class);
        }
       }
}else{
    require_once  $autoloadfile;//如果存在Composer 加载器 ，则使用 ；
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;二-在-Discuz-目录下，新建一个-composer-json-内容如下：&quot;&gt;&lt;a href=&quot;#二-在-Discuz-目录下，新建一个-composer-json-内容如下：&quot; class=&quot;headerlink&quot; title=&quot;二. 在 Discuz 目录下，新建一个 composer.json 内容如下：&quot;&gt;&lt;/a&gt;二. 在 Discuz 目录下，新建一个 composer.json 内容如下：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;{

    &amp;quot;require&amp;quot;: {
         &amp;quot;guzzlehttp/guzzle&amp;quot;: &amp;quot;~6.0&amp;quot;
    },

    &amp;quot;autoload&amp;quot;:{
        &amp;quot;classmap&amp;quot;: [&amp;quot;source/class/&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;三-终端上执行命令-composer-install&quot;&gt;&lt;a href=&quot;#三-终端上执行命令-composer-install&quot; class=&quot;headerlink&quot; title=&quot;三. 终端上执行命令 composer install&quot;&gt;&lt;/a&gt;三. 终端上执行命令 &lt;code&gt;composer install&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;看到类似这样的执行结果，表示已经安装成功了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 10 installs, 0 updates, 0 removals
  - Installing ralouphie/getallheaders (3.0.3): Loading from cache
  - Installing psr/http-message (1.0.1): Loading from cache
  - Installing guzzlehttp/psr7 (1.8.1): Loading from cache
  - Installing guzzlehttp/promises (1.4.1): Loading from cache
  - Installing symfony/polyfill-php72 (v1.19.0): Loading from cache
  - Installing symfony/polyfill-intl-normalizer (v1.19.0): Loading from cache
  - Installing paragonie/random_compat (v2.0.20): Loading from cache
  - Installing symfony/polyfill-php70 (v1.19.0): Loading from cache
  - Installing symfony/polyfill-intl-idn (v1.19.0): Loading from cache
  - Installing guzzlehttp/guzzle (6.5.5): Loading from cache
guzzlehttp/psr7 suggests installing laminas/laminas-httphandlerrunner (Emit PSR-   7 responses)
symfony/polyfill-intl-normalizer suggests installing ext-intl (For best performa   nce)
paragonie/random_compat suggests installing ext-libsodium (Provides a modern cry   pto API that can be used to generate random bytes.)
symfony/polyfill-intl-idn suggests installing ext-intl (For best performance)
guzzlehttp/guzzle suggests installing psr/log (Required for using the Log middle   ware)
Writing lock file
Generating autoload files
4 packages you are using are looking for funding.
Use the `composer fund` command to find out more!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外，也可以查看项目根目录下的vendor下面的文件，核验新引入的类库是否下载更新成功。&lt;/p&gt;
&lt;p&gt;具体如何安装及使用 Composer 请参阅 &lt;a href=&quot;http://docs.phpcomposer.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.phpcomposer.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;再说在Discuz程序中如何使用-“composer安装”的第三方类库&quot;&gt;&lt;a href=&quot;#再说在Discuz程序中如何使用-“composer安装”的第三方类库&quot; class=&quot;headerlink&quot; title=&quot;再说在Discuz程序中如何使用 “composer安装”的第三方类库&quot;&gt;&lt;/a&gt;再说在Discuz程序中如何使用 “composer安装”的第三方类库&lt;/h3&gt;&lt;p&gt;通过Composer autoload 加载器会把这些第三方库自动加载进来，这些第三方类库程序中的类、方法(函数)等等 在Discuz 程序中你想怎么用都可以。&lt;/p&gt;
&lt;p&gt;例如，以使用guzzle为例。在任何一个Discuz X3.1框架下的PHP文件中，直接使用下面代码即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use GuzzleHttp\Client;

$client = new Client([
    // Base URI is used with relative requests
    &amp;apos;base_uri&amp;apos; =&amp;gt; &amp;apos;http://httpbin.org&amp;apos;,
    // You can set any number of default request options.
    &amp;apos;timeout&amp;apos;  =&amp;gt; 2.0,
]);

$response = $client-&amp;gt;get(&amp;apos;http://httpbin.org/get&amp;apos;);

$code = $response-&amp;gt;getStatusCode(); // 200
$reason = $response-&amp;gt;getReasonPhrase(); // OK

// Check if a header exists.
if ($response-&amp;gt;hasHeader(&amp;apos;Content-Length&amp;apos;)) {
    echo &amp;quot;It exists&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外，Discuz X3.2 也适用上述方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Discuz X3.1 是一个成熟的基于PHP开发的社区系统（广义上来讲是一个建站系统），自从被企鹅收购后悄无声息的被遗弃了，伤感啊。如今要在Discuz上加什么功能，改bug什么的只能依靠自力更生了；好在有各种开源社区，开发好的功能、类库你可以无偿的直接拿来用。&lt;/p&gt;

    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Discuz" scheme="http://isunman.com/tags/discuz/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>DiscuzX二次开发之目录结构和运行逻辑</title>
    <link href="http://isunman.com/2021/04/23/DiscuzX-secondary-development-directory-structure-and-operational-logic/"/>
    <id>http://isunman.com/2021/04/23/DiscuzX-secondary-development-directory-structure-and-operational-logic/</id>
    <published>2021-04-22T19:15:00.000Z</published>
    <updated>2021-04-22T19:17:22.602Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-目录结构&quot;&gt;&lt;a href=&quot;#1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1.目录结构&quot;&gt;&lt;/a&gt;1.目录结构&lt;/h2&gt;&lt;p&gt;DISCUZ使用自己的框架，与现在主流的web框架不同，DISCUZ没有路由表，他的路由是由入口文件来实现的。&lt;/p&gt;
&lt;h3 id=&quot;api&quot;&gt;&lt;a href=&quot;#api&quot; class=&quot;headerlink&quot; title=&quot;api&quot;&gt;&lt;/a&gt;api&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;uc.php UCenter 通信文件&lt;/li&gt;
&lt;li&gt;/api/addons 应用中心&lt;/li&gt;
&lt;li&gt;/api/connect 通讯互联&lt;/li&gt;
&lt;li&gt;/api/google Google引擎结构处理&lt;/li&gt;
&lt;li&gt;/api/javascript 数据和广告的js调用&lt;/li&gt;
&lt;li&gt;/api/manyou manyou应用及搜索等相关服务&lt;/li&gt;
&lt;li&gt;/api/remote 远程更新&lt;/li&gt;
&lt;li&gt;/api/trade 支付宝、财付通等交易接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;archiver-论坛Archiver静态化目录&quot;&gt;&lt;a href=&quot;#archiver-论坛Archiver静态化目录&quot; class=&quot;headerlink&quot; title=&quot;archiver (论坛Archiver静态化目录)&quot;&gt;&lt;/a&gt;archiver (论坛Archiver静态化目录)&lt;/h3&gt;&lt;h3 id=&quot;config&quot;&gt;&lt;a href=&quot;#config&quot; class=&quot;headerlink&quot; title=&quot;config&quot;&gt;&lt;/a&gt;config&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;config_global.php 论坛核心参数配置文件&lt;/li&gt;
&lt;li&gt;config_ucenter.php UCenter核心参数配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;data-论坛数据缓存目录&quot;&gt;&lt;a href=&quot;#data-论坛数据缓存目录&quot; class=&quot;headerlink&quot; title=&quot;data (论坛数据缓存目录)&quot;&gt;&lt;/a&gt;data (论坛数据缓存目录)&lt;/h3&gt;&lt;h3 id=&quot;install-论坛安装目录-初始化运行时直接请求到此处将重新安装论坛&quot;&gt;&lt;a href=&quot;#install-论坛安装目录-初始化运行时直接请求到此处将重新安装论坛&quot; class=&quot;headerlink&quot; title=&quot;install (论坛安装目录(初始化运行时直接请求到此处将重新安装论坛))&quot;&gt;&lt;/a&gt;install (论坛安装目录(初始化运行时直接请求到此处将重新安装论坛))&lt;/h3&gt;&lt;h3 id=&quot;source-程序后端功能处理目录&quot;&gt;&lt;a href=&quot;#source-程序后端功能处理目录&quot; class=&quot;headerlink&quot; title=&quot;source (程序后端功能处理目录)&quot;&gt;&lt;/a&gt;source (程序后端功能处理目录)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;discuz_version.php 程序版本号文件&lt;/li&gt;
&lt;li&gt;/source/admincp 后台管理&lt;/li&gt;
&lt;li&gt;/source/archiver 论坛archiver静态化程序目录&lt;/li&gt;
&lt;li&gt;/source/class 核心类库&lt;/li&gt;
&lt;li&gt;/source/function discuzX自定义函数库&lt;/li&gt;
&lt;li&gt;/source/include 程序功能组件目录&lt;/li&gt;
&lt;li&gt;/source/language 程序语言包(kv结构)&lt;/li&gt;
&lt;li&gt;/source/module 程序功能模块程序包&lt;/li&gt;
&lt;li&gt;/source/plugins 插件扩展目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;static-程序资源目录-头像、图片、下载文件、js文件等等&quot;&gt;&lt;a href=&quot;#static-程序资源目录-头像、图片、下载文件、js文件等等&quot; class=&quot;headerlink&quot; title=&quot;static (程序资源目录(头像、图片、下载文件、js文件等等))&quot;&gt;&lt;/a&gt;static (程序资源目录(头像、图片、下载文件、js文件等等))&lt;/h3&gt;&lt;h3 id=&quot;template-前端模板目录&quot;&gt;&lt;a href=&quot;#template-前端模板目录&quot; class=&quot;headerlink&quot; title=&quot;template (前端模板目录)&quot;&gt;&lt;/a&gt;template (前端模板目录)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;/default/common 基础css文件、header、footer等公共引入文件&lt;/li&gt;
&lt;li&gt;/default/collage 大学计划页面&lt;/li&gt;
&lt;li&gt;/default/dige dige专区页面&lt;/li&gt;
&lt;li&gt;/default/forum 首页、帖子页面&lt;/li&gt;
&lt;li&gt;/default/member 会员页面&lt;/li&gt;
&lt;li&gt;/default/home 家园页面&lt;/li&gt;
&lt;li&gt;/default/group 群组页面&lt;/li&gt;
&lt;li&gt;/default/mobile 移动端页面&lt;/li&gt;
&lt;li&gt;/default/portal 文章页面&lt;/li&gt;
&lt;li&gt;/default/search 搜索页面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;uc-client-UCenter客户端&quot;&gt;&lt;a href=&quot;#uc-client-UCenter客户端&quot; class=&quot;headerlink&quot; title=&quot;uc_client (UCenter客户端)&quot;&gt;&lt;/a&gt;uc_client (UCenter客户端)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;/uc_client/control UC业务处理操作类&lt;/li&gt;
&lt;li&gt;/uc_client/data 缓存文件目录&lt;/li&gt;
&lt;li&gt;/uc_client/lib 类库目录(包括数据库操作类,XML类,UCCODE类,邮件发送类)&lt;/li&gt;
&lt;li&gt;/uc_client/model UC业务模型类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;uc-server-UCenter服务端-后台ucenter功能实现目录&quot;&gt;&lt;a href=&quot;#uc-server-UCenter服务端-后台ucenter功能实现目录&quot; class=&quot;headerlink&quot; title=&quot;uc_server (UCenter服务端 后台ucenter功能实现目录)&quot;&gt;&lt;/a&gt;uc_server (UCenter服务端 后台ucenter功能实现目录)&lt;/h3&gt;&lt;h3 id=&quot;根目录文件&quot;&gt;&lt;a href=&quot;#根目录文件&quot; class=&quot;headerlink&quot; title=&quot;根目录文件&quot;&gt;&lt;/a&gt;根目录文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;admin.php 后台入口文件&lt;/li&gt;
&lt;li&gt;api.php API输出 入口文件&lt;/li&gt;
&lt;li&gt;collage.php 大学计划入口文件&lt;/li&gt;
&lt;li&gt;composer.json composer依赖版本记录文件&lt;/li&gt;
&lt;li&gt;composer.lock composer依赖版本控制文件&lt;/li&gt;
&lt;li&gt;connect.php 云平台接口文件&lt;/li&gt;
&lt;li&gt;dige.php dige专区入口文件&lt;/li&gt;
&lt;li&gt;forum.php 帖子信息入口文件&lt;/li&gt;
&lt;li&gt;group.php 群组入口文件&lt;/li&gt;
&lt;li&gt;home.php 家园入口文件&lt;/li&gt;
&lt;li&gt;index.php 首页&lt;/li&gt;
&lt;li&gt;member.php 用户入口文件（登录、注册、退出等）&lt;/li&gt;
&lt;li&gt;misc.php 程序杂项扩展入口&lt;/li&gt;
&lt;li&gt;plugin.php 插件入口文件&lt;/li&gt;
&lt;li&gt;portal.php 门户入口文件&lt;/li&gt;
&lt;li&gt;robots.txt 搜索引擎限制文件&lt;/li&gt;
&lt;li&gt;search.php 搜索频道入口文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-运行逻辑&quot;&gt;&lt;a href=&quot;#2-运行逻辑&quot; class=&quot;headerlink&quot; title=&quot;2. 运行逻辑&quot;&gt;&lt;/a&gt;2. 运行逻辑&lt;/h2&gt;&lt;p&gt;discuz的入口文件起到了路由的作用。一个标准的discuz请求如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/home.php?mod=space&amp;amp;uid=1&amp;amp;do=profile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当在浏览器输入以上url时，首先执行的是跟目录下的 home.php 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

define(&amp;apos;APPTYPEID&amp;apos;, 1);
define(&amp;apos;CURSCRIPT&amp;apos;, &amp;apos;home&amp;apos;);

if(!empty($_GET[&amp;apos;mod&amp;apos;]) &amp;amp;&amp;amp; ($_GET[&amp;apos;mod&amp;apos;] == &amp;apos;misc&amp;apos; || $_GET[&amp;apos;mod&amp;apos;] == &amp;apos;invite&amp;apos;)) {
    define(&amp;apos;ALLOWGUEST&amp;apos;, 1);
}

require_once &amp;apos;./source/class/class_core.php&amp;apos;;  //引入核心类文件，作用为：自动引入类规则，错误和异常处理，单例创建discuz_application类实例，引入默认函数库function.core.php
require_once &amp;apos;./source/function/function_home.php&amp;apos;;  //引入discuzX函数库

$discuz = C::app();  //实例化discuz_application类
$cachelist = array(&amp;apos;magic&amp;apos;,&amp;apos;usergroups&amp;apos;, &amp;apos;diytemplatenamehome&amp;apos;,&amp;apos;forumlinks&amp;apos;,&amp;apos;identity&amp;apos;); //加身份组缓存
$discuz-&amp;gt;cachelist = $cachelist; //设置缓存列表
$discuz-&amp;gt;init();  //初始化应用:数据库、系统设置、用户、session、任务、等(discuz_appication类里面)
$space = array();

$mod = getgpc(&amp;apos;mod&amp;apos;); //接收$_GET[&amp;apos;mod&amp;apos;]数据
if(!in_array($mod, array(&amp;apos;space&amp;apos;, &amp;apos;spacecp&amp;apos;, &amp;apos;misc&amp;apos;, &amp;apos;magic&amp;apos;, &amp;apos;editor&amp;apos;, &amp;apos;invite&amp;apos;, &amp;apos;task&amp;apos;, &amp;apos;medal&amp;apos;, &amp;apos;rss&amp;apos;, &amp;apos;follow&amp;apos;))) {
    $mod = &amp;apos;space&amp;apos;;
    $_GET[&amp;apos;do&amp;apos;] = &amp;apos;home&amp;apos;;
}

if($mod == &amp;apos;space&amp;apos; &amp;amp;&amp;amp; ((empty($_GET[&amp;apos;do&amp;apos;]) || $_GET[&amp;apos;do&amp;apos;] == &amp;apos;index&amp;apos;) &amp;amp;&amp;amp; ($_G[&amp;apos;inajax&amp;apos;]))) {
    $_GET[&amp;apos;do&amp;apos;] = &amp;apos;profile&amp;apos;;
}
$curmod = !empty($_G[&amp;apos;setting&amp;apos;][&amp;apos;followstatus&amp;apos;]) &amp;amp;&amp;amp; (empty($_GET[&amp;apos;diy&amp;apos;]) &amp;amp;&amp;amp; empty($_GET[&amp;apos;do&amp;apos;]) &amp;amp;&amp;amp; $mod == &amp;apos;space&amp;apos; || $_GET[&amp;apos;do&amp;apos;] == &amp;apos;follow&amp;apos;) ? &amp;apos;follow&amp;apos; : $mod;
define(&amp;apos;CURMODULE&amp;apos;, $curmod);
runhooks($_GET[&amp;apos;do&amp;apos;] == &amp;apos;profile&amp;apos; &amp;amp;&amp;amp; $_G[&amp;apos;inajax&amp;apos;] ? &amp;apos;card&amp;apos; : $_GET[&amp;apos;do&amp;apos;]);
require_once libfile(&amp;apos;home/&amp;apos;.$mod, &amp;apos;module&amp;apos;);  //根据请求时传的mod参数经由上方判断确定加载对应文件

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注: libfile()函数在会将对应的模块字符串替换为模块的实际url。&lt;br&gt;&lt;code&gt;libfile(&amp;#39;home/&amp;#39;.$mod, &amp;#39;module&amp;#39;)&lt;/code&gt;的实际访问地址是 &lt;code&gt;/source/module/home/$mod.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入到&lt;code&gt;/source/module/home/home_space.php&lt;/code&gt; 文件中 根据请求参数 uid和do的值判断具体的执行过程，有些时候会直接引入响应的程序组件完成逻辑处理(这里引入了 &lt;code&gt;/include/space/space_profile.php&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;space_profile.php&lt;/code&gt;中判断运行之后输出到模板文件&lt;code&gt;/template/default/home/space_profile.htm&lt;/code&gt;中。&lt;br&gt;注：&lt;code&gt;template()&lt;/code&gt;函数在 核心函数库 &lt;code&gt;function_core.php&lt;/code&gt; 中 用于加载当前使用模板的模板文件 。根据传参此时加载了 &lt;code&gt;/template/default/home/space_profile.htm&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;在模板文件&lt;code&gt;space_profile.htm&lt;/code&gt;中 可以直接使用php文件中的数据变量进行赋值渲染输出到浏览器。&lt;br&gt;注：template模板语法不赘述 详见 &lt;a href=&quot;https://open.dismall.com/?ac=document&amp;amp;page=dev_template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模板语法&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-目录结构&quot;&gt;&lt;a href=&quot;#1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1.目录结构&quot;&gt;&lt;/a&gt;1.目录结构&lt;/h2&gt;&lt;p&gt;DISCUZ使用自己的框架，与现在主流的web框架不同，DISCUZ没有路由表，他的路由是由入口文件来实现的
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Discuz" scheme="http://isunman.com/tags/discuz/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP实现中文字符串的长度计算和截取无乱码</title>
    <link href="http://isunman.com/2021/04/12/PHP-to-achieve-the-length-of-Chinese-string-calculation-and-interception-without-garbled-code/"/>
    <id>http://isunman.com/2021/04/12/PHP-to-achieve-the-length-of-Chinese-string-calculation-and-interception-without-garbled-code/</id>
    <published>2021-04-12T07:42:00.000Z</published>
    <updated>2021-04-12T07:43:44.928Z</updated>
    
    <content type="html">&lt;p&gt;在我们学习PHP知识的过程中，PHP截取字符串应该是一个非常常见的字符串基础操作了，想必大家都比较熟悉这方面知识点。&lt;/p&gt;
&lt;p&gt;但是有些新手朋友们可能遇到过，当待截取的字符串出现中英文混合时，计算字符串的长度，会出现不准确和截取出现乱码的情况，其实这个也是非常容易解决的。&lt;/p&gt;
&lt;h3 id=&quot;首先，要了解关于中英文占多少字节的问题。&quot;&gt;&lt;a href=&quot;#首先，要了解关于中英文占多少字节的问题。&quot; class=&quot;headerlink&quot; title=&quot;首先，要了解关于中英文占多少字节的问题。&quot;&gt;&lt;/a&gt;首先，要了解关于中英文占多少字节的问题。&lt;/h3&gt;&lt;p&gt;ASCII码：一个中文汉字占两个字节的空间。&lt;/p&gt;
&lt;p&gt;UTF-8编码：一个中文（含繁体）等于三个字节。&lt;/p&gt;
&lt;p&gt;Unicode编码：一个中文（含繁体）等于两个字节。&lt;/p&gt;
&lt;h3 id=&quot;其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&quot;&gt;&lt;a href=&quot;#其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&quot; class=&quot;headerlink&quot; title=&quot;其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&quot;&gt;&lt;/a&gt;其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&lt;/h3&gt;&lt;p&gt;例如，是不是中英文数字符号等1个都算1个，还是按实际占用的字节计算。&lt;br&gt;这个需要看具体的使用场景，需要存储导数据时，需要按字节计算实际的长度，和数据库字段的长度匹配。需要前端显示时，可能需要按字符计算。&lt;/p&gt;
&lt;h3 id=&quot;第三，实际处理用到的两个函数mb-substr-和mb-strlen&quot;&gt;&lt;a href=&quot;#第三，实际处理用到的两个函数mb-substr-和mb-strlen&quot; class=&quot;headerlink&quot; title=&quot;第三，实际处理用到的两个函数mb_substr()和mb_strlen()&quot;&gt;&lt;/a&gt;第三，实际处理用到的两个函数&lt;code&gt;mb_substr()&lt;/code&gt;和&lt;code&gt;mb_strlen()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;mb_substr($str,$start,$len,$encoding)&lt;/code&gt;，用于中文字符串的截取,在相应的编码页面输入相应的$encoding&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_strlen($str,$encodding)&lt;/code&gt;，用于获取中文字符串的长度，包含多字节的字符算成一个。&lt;/p&gt;
&lt;p&gt;GBK编码截取示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$str = &amp;apos;我是谁&amp;apos;;  //gbk编码的字符串
echo mb_substr($str, 0, 1, &amp;apos;gbk&amp;apos;); //输出 我
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;utf-8编码截取示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$str = &amp;apos;我abc是谁&amp;apos;;  //utf-8编码的字符串
echo mb_substr($str, 0, 2, &amp;apos;utf-8&amp;apos;); //输出 我a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中英混合也完全没有问题。&lt;/p&gt;
&lt;p&gt;【但是，一定要住编码需要明确指定，否则可能还是会出现乱码】&lt;/p&gt;
&lt;h3 id=&quot;第四，关于mb-strcut按字节来切分字符串，截取中文都不会产生半个字符的现象&quot;&gt;&lt;a href=&quot;#第四，关于mb-strcut按字节来切分字符串，截取中文都不会产生半个字符的现象&quot; class=&quot;headerlink&quot; title=&quot;第四，关于mb_strcut按字节来切分字符串，截取中文都不会产生半个字符的现象&quot;&gt;&lt;/a&gt;第四，关于&lt;code&gt;mb_strcut&lt;/code&gt;按字节来切分字符串，截取中文都不会产生半个字符的现象&lt;/h3&gt;&lt;p&gt;&lt;code&gt;substr&lt;/code&gt;、&lt;code&gt;mb_substr&lt;/code&gt;、&lt;code&gt;mb_strcut&lt;/code&gt;这三个函数都用来截取字符串，所不同的是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;substr&lt;/code&gt;是最简单的截取，无法适应中文；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_substr&lt;/code&gt;是按字来切分字符串，&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;mb_strcut&lt;/code&gt;是按字节来切分字符串，截取中文都不会产生半个字符的现象。&lt;/p&gt;
&lt;p&gt;这三个函数的前三个参数完全一致，即：&lt;/p&gt;
&lt;p&gt;第一个参数是操作对象&lt;/p&gt;
&lt;p&gt;第二个参数是截取的起始位置&lt;/p&gt;
&lt;p&gt;第三个参数是截取的数量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_substr&lt;/code&gt;和&lt;code&gt;mb_strcut&lt;/code&gt;还有第四个参数：第四个参数可以根据不同的字符集进行设置。&lt;/p&gt;
&lt;h4 id=&quot;友情提示&quot;&gt;&lt;a href=&quot;#友情提示&quot; class=&quot;headerlink&quot; title=&quot;友情提示&quot;&gt;&lt;/a&gt;友情提示&lt;/h4&gt;&lt;p&gt;使用的时候要注意php文件的编码，和网页显示时的编码。&lt;/p&gt;
&lt;p&gt;使用这两个&lt;code&gt;mb_substr&lt;/code&gt; 和 &lt;code&gt;mb_strcut&lt;/code&gt;方法要事先知道字符串的编码，如果不知道编码，就需要判，mbstring库还提供了&lt;code&gt;mb_check_encoding&lt;/code&gt;来检验字符串编码，但还不完善。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_check_encoding($str,$encoding)&lt;/code&gt;;成功是返回true,失败时返回false;&lt;/p&gt;
&lt;p&gt;php中文字符串的截取  其中ord($str)&amp;gt;127(因为中文字符的acsii码的范围是128(即0x80-0xfe)-254)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在我们学习PHP知识的过程中，PHP截取字符串应该是一个非常常见的字符串基础操作了，想必大家都比较熟悉这方面知识点。&lt;/p&gt;
&lt;p&gt;但是有些新手朋友们可能遇到过，当待截取的字符串出现中英文混合时，计算字符串的长度，会出现不准确和截取出现乱码的情况，其实这个也是非常容易解决的
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>苹果键盘的清洁</title>
    <link href="http://isunman.com/2021/02/18/apple-keyboard-cleaning/"/>
    <id>http://isunman.com/2021/02/18/apple-keyboard-cleaning/</id>
    <published>2021-02-18T14:28:00.000Z</published>
    <updated>2021-02-18T14:30:29.537Z</updated>
    
    <content type="html">&lt;p&gt;苹果键盘的清洁&lt;/p&gt;
&lt;p&gt;这里说的苹果键盘是：Mac 配件——妙控键盘 - 中文 (拼音)。带数字键和不带数字键的应该是类似的逻辑，本人实际使用的是不带数字键的。&lt;/p&gt;
&lt;p&gt;使用时间长了之后，键盘上面有一层脏东西，灰尘或者油污等。不带好清理，之前试过其他的方法，都不是太简单有效。今天突然试了一种新方法，简单直接有效。&lt;/p&gt;
&lt;p&gt;那就是，&lt;strong&gt;直接使用毛巾蘸清水，拧干水分之后，直接对键盘进行擦拭&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面这个图片是按这个方法擦拭之后的键盘效果。&lt;br&gt;&lt;img src=&quot;http://fusihan.com/isunmanfiles/MagicKeyboard.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;苹果键盘的清洁&lt;/p&gt;
&lt;p&gt;这里说的苹果键盘是：Mac 配件——妙控键盘 - 中文 (拼音)。带数字键和不带数字键的应该是类似的逻辑，本人实际使用的是不带数字键的。&lt;/p&gt;
&lt;p&gt;使用时间长了之后，键盘上面有一层脏东西，灰尘或者油污等。不带好清理，之前试过其他的方法，都不
    
    </summary>
    
      <category term="Mac使用" scheme="http://isunman.com/categories/mac%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="工作" scheme="http://isunman.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="效率" scheme="http://isunman.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>PHP fsockopen 异步调用接口在nginx上偶尔实效的情况</title>
    <link href="http://isunman.com/2020/12/26/php-function-psockopen-asynchronous-call-interface-is-occasionally-useful-on-nginx/"/>
    <id>http://isunman.com/2020/12/26/php-function-psockopen-asynchronous-call-interface-is-occasionally-useful-on-nginx/</id>
    <published>2020-12-26T04:55:00.000Z</published>
    <updated>2020-12-26T04:56:25.717Z</updated>
    
    <content type="html">&lt;p&gt;在下面这段代码里面，调用后忽略执行结果直接返回，可用于php异步执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private function fsock_asy_do($get){
    $fp = fsockopen(&amp;quot;ssl://www.xxx.com&amp;quot;, 443, $errno, $errstr, 30);
    if (!$fp) {
        echo &amp;quot;$errstr ($errno)&amp;lt;br /&amp;gt;\n&amp;quot;;
    } else {
        stream_set_blocking($fp,0);//开启非阻塞模式
        $out = &amp;quot;GET /&amp;quot;.$get.&amp;quot; HTTP/1.1\r\n&amp;quot;;
        $out .= &amp;quot;Host: www.xxxx.com\r\n&amp;quot;;
        $out .= &amp;quot;Connection: Close\r\n\r\n&amp;quot;;

        fwrite($fp, $out);
        /*忽略执行结果
        while (!feof($fp)) {
            echo fgets($fp, 128);
        }*/
        usleep(1000);
        fclose($fp);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在nginx服务器上有一个比较诡异的情况就是有时候无法调用异步的脚本。&lt;/p&gt;
&lt;p&gt;查阅相关资料后，是nginx 499 的问题。&lt;/p&gt;
&lt;p&gt;其中解决方案有以下，经过对每一个方案的验证最终得出结果：&lt;/p&gt;
&lt;h3 id=&quot;1、NGINX-499&quot;&gt;&lt;a href=&quot;#1、NGINX-499&quot; class=&quot;headerlink&quot; title=&quot;1、NGINX 499&quot;&gt;&lt;/a&gt;1、NGINX 499&lt;/h3&gt;&lt;p&gt;查看 NGINX access log，发现这样的请求会以 499（Client Closed Request）记录。确定问题是因为：客户端主动端口请求连接时，NGINX 不会将该请求代理给上游服务（FastCGI PHP 进程），这个时候 access log 中会以 499 记录这个请求。&lt;/p&gt;
&lt;p&gt;要解决这个问题需要将 NGINX FastCGI 忽略客户端中断配置打开：&lt;/p&gt;
&lt;p&gt;fastcgi_ignore_client_abort on;&lt;br&gt;这样无论客户端是否断开，都会将这个请求代理给上游，并且会记录上游服务处理后的返回状态。&lt;/p&gt;
&lt;h3 id=&quot;2、NGINX-线程原因&quot;&gt;&lt;a href=&quot;#2、NGINX-线程原因&quot; class=&quot;headerlink&quot; title=&quot;2、NGINX 线程原因&quot;&gt;&lt;/a&gt;2、NGINX 线程原因&lt;/h3&gt;&lt;p&gt;将nginx的worker_processes 由之前的auto修改为2（我的是单核服务器）&lt;/p&gt;
&lt;h3 id=&quot;3、NGINX-499&quot;&gt;&lt;a href=&quot;#3、NGINX-499&quot; class=&quot;headerlink&quot; title=&quot;3、NGINX 499&quot;&gt;&lt;/a&gt;3、NGINX 499&lt;/h3&gt;&lt;p&gt;nginx对499的定义是”client has closed connection”，并且在这些情况下会返回这个状态码：&lt;/p&gt;
&lt;p&gt;upstream 在收到读写事件处理之前时发现连接不可用。&lt;br&gt;server处理请求未结束，而client提前关闭了连接。&lt;br&gt;upstream出错，执行next_upstream时发现连接不可用。&lt;br&gt;一个不安全的做法是在fclose之前，让当前的进程先睡眠一段时间；我这里设置为10毫秒，这10毫秒的延迟对我完成整个请求的影响不大，同时我也认为nginx一定能在10毫米内把请求转到fastcgi去执行。这个时间间隔很难把握，不能保证php一定有执行到。&lt;/p&gt;
&lt;p&gt;这种方式并不是真正的异步，只是很取巧的强制关闭连接而不等待服务器端响应。所以在Laruence的那2篇文章中，有2个问题：&lt;/p&gt;
&lt;p&gt;①PHP使用fsock不能叫做异步，只是伪异步。&lt;/p&gt;
&lt;p&gt;②fwrite之后马上执行fclose，nginx会直接返回499&lt;/p&gt;
&lt;p&gt;由于我的代码上面usleep为1000，初步估计是时间不够导致没发出去就close了，所以调整为20000。并进行最后测试。&lt;br&gt;测试2天结果显示正常，的确是usleep数值过小的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在下面这段代码里面，调用后忽略执行结果直接返回，可用于php异步执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private function fsock_asy_do($get){
    $fp = fsockopen(&amp;quot;ssl://www.xxx.com&amp;quot;
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>win7下Apache突然启动失败</title>
    <link href="http://isunman.com/2020/12/18/win7-apache-suddenly-failed-to-start/"/>
    <id>http://isunman.com/2020/12/18/win7-apache-suddenly-failed-to-start/</id>
    <published>2020-12-18T04:45:00.000Z</published>
    <updated>2020-12-18T04:48:03.379Z</updated>
    
    <content type="html">&lt;p&gt;win7下Apache突然启动失败&lt;/p&gt;
&lt;p&gt;前段时间有一次重启了电脑（win7）之后，发现Apache服务并未随系统自动启动，结果在手动启动的时候也无法启动。&lt;/p&gt;
&lt;p&gt;报错为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 不能在本地计算机启动apache2.4。有关更多信息，查阅系统事件日志。如果这是非Microsoft服务，请与服务厂商联系，并参考特定服务错误代码1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分析后发现最大可能是80端口被占用，于是win+r 运行cmd&lt;/p&gt;
&lt;p&gt;输入&lt;code&gt;netstat -ano&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到80端口被PID4占用，于是打开任务管理器-进程-查看，选择列，勾选PID&lt;/p&gt;
&lt;p&gt;可以看到pid 4 的被NT kernel &amp;amp; System 占用&lt;/p&gt;
&lt;p&gt;该进程是Http.sys。它是http API的驱动组件，Http栈服务器。如果该端口被Http.sys占用，说明一些正在使用http.sys的应用程序在运行。这就是阻止Apache运行的原因，因为Http.sys占用着80端口。我们提供了一种应用程序的机制来帮助控制端口共享，但是我需要调查导致你遇到这种困难的是什么特殊应用程序。如果你能提供给我们“netsh http show servicestate”这条命令的输出结果，我就能找出是哪个应用程序在使用Http.sys。&lt;/p&gt;
&lt;p&gt;你可以按照下面步骤禁用http.sys：&lt;/p&gt;
&lt;p&gt;第一步： net stop http&lt;/p&gt;
&lt;p&gt;第二步：Sc config http start= disabled&lt;/p&gt;
&lt;p&gt;【正式操作步骤】&lt;/p&gt;
&lt;p&gt;于是运行&lt;code&gt;net stop http&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按“Y”确定&lt;/p&gt;
&lt;p&gt;再运行 &lt;code&gt;Sc config http start= disabled&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好了，现在启动Apache，发现可以正常启动了。&lt;/p&gt;
&lt;p&gt;再查看一下netstat -ano&lt;/p&gt;
&lt;p&gt;发现pid 4占用了445端口（不再是80端口）。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;win7下Apache突然启动失败&lt;/p&gt;
&lt;p&gt;前段时间有一次重启了电脑（win7）之后，发现Apache服务并未随系统自动启动，结果在手动启动的时候也无法启动。&lt;/p&gt;
&lt;p&gt;报错为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 不能在本地计算机启动apac
    
    </summary>
    
      <category term="Web构建" scheme="http://isunman.com/categories/web%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="wamp" scheme="http://isunman.com/tags/wamp/"/>
    
  </entry>
  
  <entry>
    <title>项目的服务器迁移的问题的总结</title>
    <link href="http://isunman.com/2020/11/22/summary-of-server-migration-issues-for-the-project/"/>
    <id>http://isunman.com/2020/11/22/summary-of-server-migration-issues-for-the-project/</id>
    <published>2020-11-22T13:27:00.000Z</published>
    <updated>2020-11-23T18:22:42.127Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;a href=&quot;#一、一个具体项目的服务器迁移和升级的问题总结&quot; class=&quot;headerlink&quot; title=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;/a&gt;一、一个具体项目的服务器迁移和升级的问题总结&lt;/h3&gt;&lt;p&gt;注意以下关键点：&lt;/p&gt;
&lt;p&gt;1、数据库备份，不能再使用Discuz自带的备份功能，会丢失数据（不足够安全）。可以使用mysqldump直接从数据库导出sql文件，然后再目标主机导入。&lt;/p&gt;
&lt;p&gt;2、数据库备份导出时，注意对emoji表情的兼容性，需要增加–default-character-set=utf8mb4参数。&lt;/p&gt;
&lt;p&gt;3、新安装的项目中的字符集需要设置为utf8mb4而不是utf8，否则某些字段表情不显示（或者显示问号）。&lt;/p&gt;
&lt;p&gt;4、新安装的项目不能使用MySQL总管理员账号，需要每个项目新建一个数据库，并配置一个项目数据库专用管理员，只授权管理这一个数据库。&lt;/p&gt;
&lt;p&gt;5、一定要保证UCenter的应用“通信成功”，且几个项目之间必须互相隔离开（尤其是整个项目复制的，注意配置文件里的设置区分）。&lt;/p&gt;
&lt;p&gt;6、迁移之前，在源主机和目标主机上都做好备份和快照。&lt;/p&gt;
&lt;p&gt;7、迁移之后，测试没问题之后，及时备份和快照。&lt;/p&gt;
&lt;p&gt;8、整个过程中，注意关闭站点，方式中途的数据写入。&lt;/p&gt;
&lt;p&gt;9、域名的解析，可以临时域名作为过渡，最好不要让线上正式环境的域名来回更换指向IP。&lt;/p&gt;
&lt;p&gt;10、域名相关的，如果使用了临时域名，尤其涉及第三方的：要么先不改；要么及时改回来。&lt;/p&gt;
&lt;p&gt;11、用户资源文件的迁移，可以稍微后置。注意UCenter的用户头像文件。&lt;/p&gt;
&lt;p&gt;12、迁移之后，必须要首先测试的功能：用户注册、消息推送（IP白名单）、crontab自动执行、短信发送。&lt;/p&gt;
&lt;p&gt;13、注意后来添加的目录或者第三方相关目录的读写权限的设置。&lt;/p&gt;
&lt;p&gt;14、本次对PHP7.2环境的支持，稍微后置。注意观察不兼容性，尤其是不常用到的接口。&lt;/p&gt;
&lt;p&gt;15、注意修改php.ini的配置，支持上传大文件（建议64M），需重启生效。&lt;/p&gt;
&lt;p&gt;16、注意修改nginx.conf的配置，支持上传大文件（建议64M），需重启生效。&lt;/p&gt;
&lt;p&gt;17、刚迁移完后的近一段时间，注意观察是否出现异常，保持高度警惕。&lt;/p&gt;
&lt;p&gt;18、【注意】Nginx服务必须设置为开机自启动，否则从阿里云控制台重启之后，Nginx服务是未启动状态。&lt;/p&gt;
&lt;h3 id=&quot;二、迁移服务器的通用操作流程&quot;&gt;&lt;a href=&quot;#二、迁移服务器的通用操作流程&quot; class=&quot;headerlink&quot; title=&quot;二、迁移服务器的通用操作流程&quot;&gt;&lt;/a&gt;二、迁移服务器的通用操作流程&lt;/h3&gt;&lt;p&gt;1、购买一套配置更高的阿里云ECS服务器（最好有热扩展性）。&lt;/p&gt;
&lt;p&gt;2、配置相同的LNMP环境。&lt;/p&gt;
&lt;p&gt;3、配置视频处理程序ffmpeg，并测试可用。&lt;/p&gt;
&lt;p&gt;4、添加消息推送的白名单IP地址。（涉及多个App）&lt;/p&gt;
&lt;p&gt;5、安装程序初步可用。&lt;/p&gt;
&lt;p&gt;6、备份数据恢复数据。（数据库MySQL数据）&lt;/p&gt;
&lt;p&gt;7、测试数据没有问题PC端（用户注册登录等）。&lt;/p&gt;
&lt;p&gt;8、测试接口可用性（App和微信小程序）。&lt;/p&gt;
&lt;p&gt;9、计划任务crontab的配置。（注意有脚本执行文件，可成功执行之后需删除掉原服务器的crontab的相关任务）&lt;/p&gt;
&lt;p&gt;10、迁移其他非数据库MySQL数据的data资源文件（需分批处理，影响图片和视频等的显示，不影响数据处理）。&lt;/p&gt;
&lt;p&gt;11、整体基本可用之后，再密切追踪至少一周，看是否有因为迁移造成的BUG或者需要修复的问题。&lt;/p&gt;
&lt;p&gt;12、注意一些目录的可读权限，尤其是后来API中自定义或者第三方专用的目录。&lt;/p&gt;
&lt;p&gt;13、注意服务器级别的安全组特定端口的设置。&lt;/p&gt;
&lt;p&gt;14、注意SSL证书的迁移&lt;/p&gt;
&lt;h3 id=&quot;三、几点要求&quot;&gt;&lt;a href=&quot;#三、几点要求&quot; class=&quot;headerlink&quot; title=&quot;三、几点要求&quot;&gt;&lt;/a&gt;三、几点要求&lt;/h3&gt;&lt;p&gt;0、完美，服务器迁移几乎不影响前端访问，不需App停用。&lt;/p&gt;
&lt;p&gt;1、最好，App可以平滑过渡，对服务器的迁移无感。除了迁移过程中无法使用，不影响用户的登录状态，账号和密码的可用性。&lt;/p&gt;
&lt;p&gt;2、其次，让用户重新登录一次，但是账号和密码继续保持可用性。&lt;/p&gt;
&lt;p&gt;3、再次，用户的账号不变，密码失效，需要重置密码才可以继续登录账号。&lt;/p&gt;
&lt;p&gt;以上4种情况。至少做到1，争取做到0，绝不能出现2和3的情况。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;a href=&quot;#一、一个具体项目的服务器迁移和升级的问题总结&quot; class=&quot;headerlink&quot; title=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;/a&gt;一、一个具体项目的服务器迁移和升级的问题
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>phpMyAdmin的安装</title>
    <link href="http://isunman.com/2020/11/21/the-installation-of-the-phpmyadmin/"/>
    <id>http://isunman.com/2020/11/21/the-installation-of-the-phpmyadmin/</id>
    <published>2020-11-21T09:36:00.000Z</published>
    <updated>2020-11-21T09:38:11.306Z</updated>
    
    <content type="html">&lt;p&gt;phpMyAdmin的安装&lt;/p&gt;
&lt;h4 id=&quot;一、本次的服务器运行环境&quot;&gt;&lt;a href=&quot;#一、本次的服务器运行环境&quot; class=&quot;headerlink&quot; title=&quot;一、本次的服务器运行环境&quot;&gt;&lt;/a&gt;一、本次的服务器运行环境&lt;/h4&gt;&lt;p&gt;Linux-CentOS版本：8.1.1911&lt;/p&gt;
&lt;p&gt;Nginx版本：1.14.1&lt;/p&gt;
&lt;p&gt;MySQL版本：5.7.32&lt;/p&gt;
&lt;p&gt;PHP版本： 7.2.24&lt;/p&gt;
&lt;h3 id=&quot;二、安装过程&quot;&gt;&lt;a href=&quot;#二、安装过程&quot; class=&quot;headerlink&quot; title=&quot;二、安装过程&quot;&gt;&lt;/a&gt;二、安装过程&lt;/h3&gt;&lt;p&gt;1、在LNMP环境已经安装好，且可以正常运行的情况下。从&lt;a href=&quot;https://www.phpmyadmin.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;phpMyAdmin的官网&lt;/a&gt;上下载最新的版本。现在2020年11月21日是5.0.4版本。&lt;/p&gt;
&lt;p&gt;2、下载完zip的文案压缩包，直接解压缩到目标目录（可通过http远程访问的目录）。&lt;/p&gt;
&lt;p&gt;3、把phpMyAdmin根目录下的config.sample.inc.php复制为config.inc.php，作为其正式的配置文件使用。&lt;/p&gt;
&lt;p&gt;4、然后在nginx的conf配置文件中给phpmyadmin配置一个虚拟主机文件。如果不想使用域名访问，可以使用localhost和指定的端口（例如8080，8000等），然后使用IP+端口来访问。&lt;/p&gt;
&lt;p&gt;5、重启Nginx服务，让虚拟主机配置文件生效。通过浏览器访问测试效果。&lt;/p&gt;
&lt;h3 id=&quot;三、可通过浏览器访问之后的两个问题&quot;&gt;&lt;a href=&quot;#三、可通过浏览器访问之后的两个问题&quot; class=&quot;headerlink&quot; title=&quot;三、可通过浏览器访问之后的两个问题&quot;&gt;&lt;/a&gt;三、可通过浏览器访问之后的两个问题&lt;/h3&gt;&lt;p&gt;1、提示把配置文件的配置生成到phpmyadmin数据中存储。&lt;/p&gt;
&lt;p&gt;2、提示“ 配置文件现在需要一个短语密码。 ”，则打开上述的config.inc.php文件，找到“blowfish_secret”，把它的值设置为一个至少32位长度的字符串。&lt;/p&gt;
&lt;p&gt;再之后，刷新浏览器页面，重新登录。OK。&lt;/p&gt;
&lt;p&gt;以上过程所有步骤，由本人亲测有效。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;phpMyAdmin的安装&lt;/p&gt;
&lt;h4 id=&quot;一、本次的服务器运行环境&quot;&gt;&lt;a href=&quot;#一、本次的服务器运行环境&quot; class=&quot;headerlink&quot; title=&quot;一、本次的服务器运行环境&quot;&gt;&lt;/a&gt;一、本次的服务器运行环境&lt;/h4&gt;&lt;p&gt;Linux-Cen
    
    </summary>
    
      <category term="Web构建" scheme="http://isunman.com/categories/web%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>阿里云内网打包传输较大文件的方法</title>
    <link href="http://isunman.com/2020/11/13/aliyun-internal-network-package-transfer-method-of-large-files/"/>
    <id>http://isunman.com/2020/11/13/aliyun-internal-network-package-transfer-method-of-large-files/</id>
    <published>2020-11-13T07:15:00.000Z</published>
    <updated>2020-11-22T13:35:09.089Z</updated>
    
    <content type="html">&lt;p&gt;今天老夫遇到一个将其一台阿里云ECS服务器某个目录下的所有文件迁移到另外一台服务器，原本以为是一个普通的操作，熟料到一看数据有10GB左右，打包压缩之后基本没有小多少，所以正常的常规wget下载肯定是不行的，效率太低，最快只有500KB/s左右。因此，在这里我准备采用阿里云自带的内网IP地址，然后直接内网SCP拖过去。&lt;/p&gt;
&lt;p&gt;第一、准备工作&lt;/p&gt;
&lt;p&gt;1、登录阿里云账户看到ECS服务器对应的内网IP地址。（打包文件的服务器内网IP）&lt;/p&gt;
&lt;p&gt;2、打包压缩需要备份的网站目录，因为这里我开始打包过了，其实我不应该打包的，直接SCP，因为数据较大，打包时间也很长，后面还要解压也需要时间。&lt;/p&gt;
&lt;p&gt;第二、SCP命令传输&lt;/p&gt;
&lt;p&gt;1、复制目录到本地&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp -r root@网站所在内网IP地址:/home/wwwroot/拷贝网站目录 /当前拷贝过来的网站目录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、复制打包文件到本地&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp root@网站所在的内网IP:/home/wwwroot/拷贝网站目录/laozuo.tar.gz /当前拷贝过来的网站目录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个执行是在我们转入进来的服务器SSH执行，然后会要求我们同意和输入转出服务器的密码后开始传输。看来速度比直接wget快很多了，达到46MB/s。&lt;/p&gt;
&lt;p&gt;最后，稍等几分钟（这里10G大概不到5分钟)，传输完毕之后我们再到服务器中解压和数据拷贝（移动）即可。&lt;/p&gt;
&lt;p&gt;【注意】&lt;/p&gt;
&lt;p&gt;如果当前用户登录在【目标主机】，从【源主机】拷贝到【目标主机】时，有问题的话（需要输入【源主机】用户SSH密码），&lt;/p&gt;
&lt;p&gt;也可以反过来操作，即：用户登录到【源主机】，然后再从【源主机】拷贝到【目标主机】，需要输入【目标主机】的用户SSH密码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp /root/yasm-1.3.0.tar.gz root@111.66.66.888:/root/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上为一条具体的示例。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天老夫遇到一个将其一台阿里云ECS服务器某个目录下的所有文件迁移到另外一台服务器，原本以为是一个普通的操作，熟料到一看数据有10GB左右，打包压缩之后基本没有小多少，所以正常的常规wget下载肯定是不行的，效率太低，最快只有500KB/s左右。因此，在这里我准备采用阿里云
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="远程控制" scheme="http://isunman.com/tags/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8解决SSHSecureShellClient连接Linux报错Algorithm negotiation failes</title>
    <link href="http://isunman.com/2020/11/01/centos8-ssh-reported-error-for-algorithm-negotiation-failes/"/>
    <id>http://isunman.com/2020/11/01/centos8-ssh-reported-error-for-algorithm-negotiation-failes/</id>
    <published>2020-11-01T08:05:00.000Z</published>
    <updated>2020-11-01T08:10:17.063Z</updated>
    
    <content type="html">&lt;p&gt;解决SSHSecureShellClient连接Linux报错Algorithm negotiation failes&lt;/p&gt;
&lt;p&gt;今天新服务器版本已经到了CentOS8，但是SSH Secure Shell还是多年前的3.2.9，所以在连服务器时遇到标题中的报错。这个问题很悲剧，浪费了我很多时间。&lt;/p&gt;
&lt;p&gt;网上解决这个问题的博文非常非常多，都是这样的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开/etc/ssh文件目录下的文件sshd_config  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo vim /etc/ssh/sshd_config&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在文件末尾添加以下信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Ciphers aes128-cbc,aes192-cbc,aes256-cbc,aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,arcfour128,arcfour256,arcfour,blowfish-cbc,cast128-cbc

MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-sha1-96,hmac-md5-96  

KexAlgorithms diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group1-sha1,curve25519-sha256@libssh.org
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;保存后重启ssh服务&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo /etc/init.d/ssh restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家都说好用，但是我试了之后悲剧了，增加了配置后重启ssh就启动不了了，会报错。&lt;/p&gt;
&lt;p&gt;但是我依然没能解决问题，最终决定弃用落后的SSH Secure Shell Client了，换成【FileZilla】解决问题：FileZilla也支持ssh协议传输文件，而且操作稍微比SSH Secure Shell Client人性化。&lt;/p&gt;
&lt;p&gt;还有一种方案是把CentOS8退回到CentOS6,这还有什么用呢？&lt;/p&gt;
&lt;p&gt;因此，应该是CentOS8和SSH Secure File Transfer Client之前的冲突解决不了的问题。
　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;解决SSHSecureShellClient连接Linux报错Algorithm negotiation failes&lt;/p&gt;
&lt;p&gt;今天新服务器版本已经到了CentOS8，但是SSH Secure Shell还是多年前的3.2.9，所以在连服务器时遇到标题中的报错。这个问
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>能写出来的河南话，你会写几个?</title>
    <link href="http://isunman.com/2020/07/29/can-you-write-the-Henan-dialect_P1/"/>
    <id>http://isunman.com/2020/07/29/can-you-write-the-Henan-dialect_P1/</id>
    <published>2020-07-29T08:32:00.000Z</published>
    <updated>2020-07-29T08:33:10.126Z</updated>
    
    <content type="html">&lt;h4 id=&quot;熰&quot;&gt;&lt;a href=&quot;#熰&quot; class=&quot;headerlink&quot; title=&quot;熰&quot;&gt;&lt;/a&gt;熰&lt;/h4&gt;&lt;p&gt;[读音]ǒu&lt;/p&gt;
&lt;p&gt;[释义]烤过度的东西出现碳化的迹象&lt;/p&gt;
&lt;p&gt;[引自]《管子?侈靡篇》古之祭有时而熰。《注》熰，热甚也。&lt;/p&gt;
&lt;p&gt;[举例]火上的东西快拿起来，都烤熰了。&lt;/p&gt;
&lt;h4 id=&quot;熥&quot;&gt;&lt;a href=&quot;#熥&quot; class=&quot;headerlink&quot; title=&quot;熥&quot;&gt;&lt;/a&gt;熥&lt;/h4&gt;&lt;p&gt;[读音]tēng&lt;/p&gt;
&lt;p&gt;[释义]把凉了的物体再加热或烤热&lt;/p&gt;
&lt;p&gt;[引自]《集韻》他東切，音通。以火煖物也。&lt;/p&gt;
&lt;p&gt;[举例]你的衣服湿了，脱下来在火上熥熥。&lt;/p&gt;
&lt;h4 id=&quot;缏&quot;&gt;&lt;a href=&quot;#缏&quot; class=&quot;headerlink&quot; title=&quot;缏&quot;&gt;&lt;/a&gt;缏&lt;/h4&gt;&lt;p&gt;[读音]biǎn&lt;/p&gt;
&lt;p&gt;[释义]卷起衣袖&lt;/p&gt;
&lt;p&gt;[引自]《说文通训定声》缏,缝缉其边曰缏。这里用引申义，因为袖子或裤子挽起的部分很像衣服被缝纫形成的缏。&lt;/p&gt;
&lt;p&gt;[举例]干活就把袖子缏起来，省的弄脏。&lt;/p&gt;
&lt;h4 id=&quot;癔症&quot;&gt;&lt;a href=&quot;#癔症&quot; class=&quot;headerlink&quot; title=&quot;癔症&quot;&gt;&lt;/a&gt;癔症&lt;/h4&gt;&lt;p&gt;[读音]yi zheng&lt;/p&gt;
&lt;p&gt;[释义]走神，发呆，说梦话&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]晚上开车看着点，别发癔症。&lt;/p&gt;
&lt;h4 id=&quot;撧&quot;&gt;&lt;a href=&quot;#撧&quot; class=&quot;headerlink&quot; title=&quot;撧&quot;&gt;&lt;/a&gt;撧&lt;/h4&gt;&lt;p&gt;[读音]字典里读音juē，方言里变音quē&lt;/p&gt;
&lt;p&gt;[释义]古同“绝”，折断；断绝。&lt;/p&gt;
&lt;p&gt;[引自]元?佚名《盆儿鬼》：我待撧枝在头上插。&lt;/p&gt;
&lt;p&gt;[举例]过来把这个树枝撧断了。&lt;/p&gt;
&lt;h4 id=&quot;爒&quot;&gt;&lt;a href=&quot;#爒&quot; class=&quot;headerlink&quot; title=&quot;爒&quot;&gt;&lt;/a&gt;爒&lt;/h4&gt;&lt;p&gt;[读音]liǎo&lt;/p&gt;
&lt;p&gt;[释义]古同「燎」。火烧&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]别靠火那么近，小心把衣服爒了。&lt;/p&gt;
&lt;h4 id=&quot;吃起来可艮gen（食物坚硬而不松脆）&quot;&gt;&lt;a href=&quot;#吃起来可艮gen（食物坚硬而不松脆）&quot; class=&quot;headerlink&quot; title=&quot;吃起来可艮gen（食物坚硬而不松脆）&quot;&gt;&lt;/a&gt;吃起来可艮gen（食物坚硬而不松脆）&lt;/h4&gt;&lt;p&gt;[读音]&lt;/p&gt;
&lt;p&gt;[释义]食物坚硬而不松脆。也指为人特别执拗，过于认真或者行动缓慢。&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]这个萝卜吃起来可艮。你这孩子怎么这么艮不听话。&lt;/p&gt;
&lt;h4 id=&quot;薅&quot;&gt;&lt;a href=&quot;#薅&quot; class=&quot;headerlink&quot; title=&quot;薅&quot;&gt;&lt;/a&gt;薅&lt;/h4&gt;&lt;p&gt;[读音]hāo&lt;/p&gt;
&lt;p&gt;[释义]揪&lt;/p&gt;
&lt;p&gt;[引自]《说文解字》拔去田艸也。&lt;/p&gt;
&lt;p&gt;[举例]你俩打架不要薅头发。&lt;/p&gt;
&lt;h4 id=&quot;冇&quot;&gt;&lt;a href=&quot;#冇&quot; class=&quot;headerlink&quot; title=&quot;冇&quot;&gt;&lt;/a&gt;冇&lt;/h4&gt;&lt;p&gt;[读音]māo（河南地区发音：māo mōu mō mù 均有）&lt;/p&gt;
&lt;p&gt;[释义]没有&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]（粤语中的冇也来自河南话）&lt;/p&gt;
&lt;h4 id=&quot;抪拉&quot;&gt;&lt;a href=&quot;#抪拉&quot; class=&quot;headerlink&quot; title=&quot;抪拉&quot;&gt;&lt;/a&gt;抪拉&lt;/h4&gt;&lt;p&gt;[读音]bu la&lt;/p&gt;
&lt;p&gt;[释义]用手来回拨弄；用手擦。&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]他在朋友进屋前赶紧抪拉了一下桌子上的灰。&lt;/p&gt;
&lt;h4 id=&quot;哕&quot;&gt;&lt;a href=&quot;#哕&quot; class=&quot;headerlink&quot; title=&quot;哕&quot;&gt;&lt;/a&gt;哕&lt;/h4&gt;&lt;p&gt;[读音]yuě&lt;/p&gt;
&lt;p&gt;[释义]呕吐，或要吐而吐不出东西来。&lt;/p&gt;
&lt;p&gt;[引自]明?张自烈《正字通》：方书有物无声曰吐，有声无物曰哕，有声有物曰呕。&lt;/p&gt;
&lt;p&gt;[举例]吃得不舒服，想干哕。&lt;/p&gt;
&lt;h4 id=&quot;搲&quot;&gt;&lt;a href=&quot;#搲&quot; class=&quot;headerlink&quot; title=&quot;搲&quot;&gt;&lt;/a&gt;搲&lt;/h4&gt;&lt;p&gt;[读音]wǎ&lt;/p&gt;
&lt;p&gt;[释义]以手或瓢状舀取。&lt;/p&gt;
&lt;p&gt;[引自]宋?司马光《类篇》：吴俗谓手爬物曰搲。元人杂剧《陈州粜米》第一折：他那边又搲了些米去了。&lt;/p&gt;
&lt;p&gt;[举例]没吃饱，再给我搲点儿米饭。&lt;/p&gt;
&lt;h4 id=&quot;扽&quot;&gt;&lt;a href=&quot;#扽&quot; class=&quot;headerlink&quot; title=&quot;扽&quot;&gt;&lt;/a&gt;扽&lt;/h4&gt;&lt;p&gt;[读音]dèn&lt;/p&gt;
&lt;p&gt;[释义]拉，猛拉，使伸直或平整。&lt;/p&gt;
&lt;p&gt;[引自]清?《康熙字典》：《唐韵》《集韵》都困切，音顿。撼也。又《博雅》引也。一曰摩也。&lt;/p&gt;
&lt;p&gt;[举例]刚洗好的床单太皱，来，跟我一起扽平整。&lt;/p&gt;
&lt;h4 id=&quot;鬻&quot;&gt;&lt;a href=&quot;#鬻&quot; class=&quot;headerlink&quot; title=&quot;鬻&quot;&gt;&lt;/a&gt;鬻&lt;/h4&gt;&lt;p&gt;[读音]yū&lt;/p&gt;
&lt;p&gt;[释义]液体沸腾溢出。&lt;/p&gt;
&lt;p&gt;[引自]宋?《广韵》：鬻，薄没切：说文吹釜溢也。清?《说文解字》段玉裁注：今江苏俗谓火盛水鬻溢出为铺出，鬻之转语也，正当作鬻字。&lt;/p&gt;
&lt;p&gt;[举例]米汤煮得快鬻出来了。&lt;/p&gt;
&lt;h4 id=&quot;醭&quot;&gt;&lt;a href=&quot;#醭&quot; class=&quot;headerlink&quot; title=&quot;醭&quot;&gt;&lt;/a&gt;醭&lt;/h4&gt;&lt;p&gt;[读音]bú&lt;/p&gt;
&lt;p&gt;[释义]酒﹑酱﹑醋等因败坏而生的白霉。亦泛指一切东西受潮而表面出现霉斑。&lt;/p&gt;
&lt;p&gt;[引自]杨万里《风雨》：梅天笔墨都生醭，棐几文书懒拂尘。&lt;/p&gt;
&lt;p&gt;[举例]这个菜赶快放冰箱里面，要不明天就出醭。&lt;/p&gt;
&lt;h4 id=&quot;敹&quot;&gt;&lt;a href=&quot;#敹&quot; class=&quot;headerlink&quot; title=&quot;敹&quot;&gt;&lt;/a&gt;敹&lt;/h4&gt;&lt;p&gt;[读音]liáo&lt;/p&gt;
&lt;p&gt;[释义]粗线缝缀。&lt;/p&gt;
&lt;p&gt;[引自]民国章炳麟《新方言》：凡非绽裂而粗率缝之曰敹。&lt;/p&gt;
&lt;p&gt;[举例]袖口炸线了，给它敹几针就好了。&lt;/p&gt;
&lt;h4 id=&quot;嬎&quot;&gt;&lt;a href=&quot;#嬎&quot; class=&quot;headerlink&quot; title=&quot;嬎&quot;&gt;&lt;/a&gt;嬎&lt;/h4&gt;&lt;p&gt;[读音]fàn&lt;/p&gt;
&lt;p&gt;[释义]禽类下蛋；生子多而整齐划一，也是繁殖的意思。&lt;/p&gt;
&lt;p&gt;[引自]清?《康熙字典》：同娩。息也。清?《说文解字》段玉裁注：谓生子多而如一也。&lt;/p&gt;
&lt;p&gt;[举例]昨晚，他家的老母鸡又嬎了三个鸡蛋。&lt;/p&gt;
&lt;h4 id=&quot;拌&quot;&gt;&lt;a href=&quot;#拌&quot; class=&quot;headerlink&quot; title=&quot;拌&quot;&gt;&lt;/a&gt;拌&lt;/h4&gt;&lt;p&gt;[读音]bǎn&lt;/p&gt;
&lt;p&gt;[释义]扔，丢弃。&lt;/p&gt;
&lt;p&gt;[引自]西汉?杨雄《方言》卷十：拌，弃也。楚凡挥弃物谓之拌。&lt;/p&gt;
&lt;p&gt;[举例]把这些垃圾拌出去。&lt;/p&gt;
&lt;h4 id=&quot;谝&quot;&gt;&lt;a href=&quot;#谝&quot; class=&quot;headerlink&quot; title=&quot;谝&quot;&gt;&lt;/a&gt;谝&lt;/h4&gt;&lt;p&gt;[读音]piǎn&lt;/p&gt;
&lt;p&gt;[释义]炫耀、夸耀或骄傲地显示。&lt;/p&gt;
&lt;p&gt;[引自]东汉?许慎《说文解字》：谝，便巧言也。清?蒲松龄《增补幸云曲》第十六回：这奴才不弹琵琶，光谝他的汗巾子，望我夸他。&lt;/p&gt;
&lt;p&gt;[举例]他买了个戒指，老在我面前谝。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;熰&quot;&gt;&lt;a href=&quot;#熰&quot; class=&quot;headerlink&quot; title=&quot;熰&quot;&gt;&lt;/a&gt;熰&lt;/h4&gt;&lt;p&gt;[读音]ǒu&lt;/p&gt;
&lt;p&gt;[释义]烤过度的东西出现碳化的迹象&lt;/p&gt;
&lt;p&gt;[引自]《管子?侈靡篇》古之祭有时而熰。《注》熰，热甚也。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="文学" scheme="http://isunman.com/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="家乡" scheme="http://isunman.com/tags/%E5%AE%B6%E4%B9%A1/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中文按首字母排序</title>
    <link href="http://isunman.com/2020/07/23/mysql-Chinese-is-sorted-alphabetically/"/>
    <id>http://isunman.com/2020/07/23/mysql-Chinese-is-sorted-alphabetically/</id>
    <published>2020-07-23T03:28:00.000Z</published>
    <updated>2020-07-23T03:33:42.801Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一种分析&quot;&gt;&lt;a href=&quot;#一种分析&quot; class=&quot;headerlink&quot; title=&quot;一种分析&quot;&gt;&lt;/a&gt;一种分析&lt;/h3&gt;&lt;p&gt;项目中有时候会遇到需要按照汉字拼音排序的需求。&lt;/p&gt;
&lt;p&gt;如果要排序的字段编码使用的是GBK字符集，那就可以直接按照拼音排序。因为GBK内码编码时本身就采用了拼音排序的方法（常用一级汉字3755个采用拼音排序，二级汉字就不是了），直接在查询语句后面添加ORDER BY name ASC，查询结果将按照姓氏的升序排序。&lt;/p&gt;
&lt;p&gt;如果存储姓名的字段采用的是utf-8字符集，需要在排序的时候对字段进行转码，对应的代码是ORDER BY convert(name using gbk) ASC，同样，查询的结果也是按照汉字拼音的升序排序。&lt;/p&gt;
&lt;p&gt;怎样才能将编码转化为GBK呢？在MySQL中提供了函数CONVERT() ，该函数可用来获取一个类型的值。该函数的使用方式为 CONVERT(字段 USING GBK)。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table ORDER BY CONVERT(field USING GBK) ASC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果字段的值中包含数字和字母也可以排序，因为数字和字母在gbk字符集中本身就是能排序的，数字&amp;lt;字母&amp;lt;汉字。&lt;/p&gt;
&lt;p&gt;以上亲测有效。&lt;/p&gt;
&lt;h3 id=&quot;另一种分析：&quot;&gt;&lt;a href=&quot;#另一种分析：&quot; class=&quot;headerlink&quot; title=&quot;另一种分析：&quot;&gt;&lt;/a&gt;另一种分析：&lt;/h3&gt;&lt;p&gt;使用MySQL过程中，我们经常会对一个字段进行排序查询，我们一般都是想要按照中文拼音首字母进行依次排序，但mysql中进行中文排序的时候，对汉字的排序结果往往都是错误的。 这种情况在MySQL的很多版本中都存在。&lt;/p&gt;
&lt;p&gt;如果这个问题不解决，那么MySQL将无法实际处理中文。 出现这个问题的原因是因为MySQL在查询字符串时是大小写不敏感的，在编绎MySQL时一般以ISO-8859字符集作为默认的字符集，因此在比较过程中中文编码字符大小写转换造成了这种现象。&lt;/p&gt;
&lt;p&gt;查了资料有两种解决方法：&lt;br&gt;1.对于包含中文的字段加上”binary”属性，使之作为二进制比较，例如将”name varchar(10)”改成”name varchar(10)binary”。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果不想对表结构进行修改或者重新编译MySQL，也可以在查询语句的 order by 部分使用 CONVERT 函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如 name字段为中文，需要按其排序，则可以写select * from mytable order by CONVERT(name USING gbk);
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一种分析&quot;&gt;&lt;a href=&quot;#一种分析&quot; class=&quot;headerlink&quot; title=&quot;一种分析&quot;&gt;&lt;/a&gt;一种分析&lt;/h3&gt;&lt;p&gt;项目中有时候会遇到需要按照汉字拼音排序的需求。&lt;/p&gt;
&lt;p&gt;如果要排序的字段编码使用的是GBK字符集，那就可以直接按照拼音
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CA根证书过期的问题</title>
    <link href="http://isunman.com/2020/06/11/issue-of-ca-root-certificate-expiration/"/>
    <id>http://isunman.com/2020/06/11/issue-of-ca-root-certificate-expiration/</id>
    <published>2020-06-11T07:38:00.000Z</published>
    <updated>2020-06-11T07:46:40.323Z</updated>
    
    <content type="html">&lt;p&gt;上一篇文章提到过PHP的curl函数的证书错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用已知的CA证书进行身份验证”。&lt;/p&gt;
&lt;p&gt;后来采用了在curl函数中不验证证书的临时解决方法。&lt;/p&gt;
&lt;p&gt;虽然问题暂时解决了，但是并没有找到出问题的根本原因，当然也就没有从根本上解决问题。&lt;/p&gt;
&lt;h4 id=&quot;紧接着，后续又出大问题了。&quot;&gt;&lt;a href=&quot;#紧接着，后续又出大问题了。&quot; class=&quot;headerlink&quot; title=&quot;紧接着，后续又出大问题了。&quot;&gt;&lt;/a&gt;紧接着，后续又出大问题了。&lt;/h4&gt;&lt;p&gt;在linux服务器上的crontab中设置的计划任务也不执行了。里面都是使用的wget加https的URL执行的。&lt;br&gt;经核查发现：&lt;/p&gt;
&lt;p&gt;1、crontab的计划任务是在定期执行的，只是没有执行wget+https的URL请求。&lt;/p&gt;
&lt;p&gt;2、上述计划任务中https的URL请求，如果在浏览器执行或postman中执行，都是可以正常执行出结果的。&lt;/p&gt;
&lt;p&gt;所以证明是wget在执行https的请求时出问题了。&lt;/p&gt;
&lt;p&gt;联系亚狐科技的客服，询问他们的SSL证书是不是出问题了。&lt;/p&gt;
&lt;p&gt;回复是，SSL证书本身没有过期，但是颁发SSL证书的CA机构的【根证书】过期了。&lt;/p&gt;
&lt;p&gt;回复原话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是CA证书过期了, 您更新下CA证书即可。证书没问题，有问题的是COMODO的上级证书链。浏览器访问都没问题。我可以发您最新的根证书，您替换旧可以。4月30日后签发的证书就没这个问题了。这个问题是历史问题，没办法避免。这样，我全部更新下，您重新下载可以吧。这个我们会注意这个问题，如果再有类似，我通知您。应该不会再发生了。一般如果只是使用浏览器，不会存在问题。是的，我们接收意见，以后避免再发生此类问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然中间有我的提问没有写出来，这是QQ聊天记录的对方回复的部分内容的合并。&lt;/p&gt;
&lt;p&gt;之后重新颁发了新的SSL证书，然后更新到所有使用该SSL证书的Nginx服务器之后（重启Nginx），crontab的计划任务可以正常执行了。&lt;/p&gt;
&lt;h4 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h4&gt;&lt;p&gt;1、CA的根证书快过期本应该提前处理好的，这个根证书时间应该不是每一年一次的。5年或10年吧，还不确定。&lt;/p&gt;
&lt;p&gt;2、这个CA根证书过期导致的是一些程序的执行命令和系统方法出问题，在浏览器中使用并不会表现出BUG和错误。（目前已发现明显会受影响的就是PHP的CURL函数和Linux的crontab中的wget命令）&lt;/p&gt;
&lt;p&gt;3、当一个问题出现时，必须及时准确地定位到问题的真正和根本原因，并迅速彻底解决；否则，可能会出现更严重的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章提到过PHP的curl函数的证书错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP的curl函数的证书错误 Peer certificate cannot be authenticated</title>
    <link href="http://isunman.com/2020/06/01/peer-certificate-of-php-curl-function-cannot-be-authenticated/"/>
    <id>http://isunman.com/2020/06/01/peer-certificate-of-php-curl-function-cannot-be-authenticated/</id>
    <published>2020-06-01T09:14:00.000Z</published>
    <updated>2020-06-01T09:18:34.390Z</updated>
    
    <content type="html">&lt;p&gt;系统的短信发送突然全部失败了。使用postman工具测试阿里云云通信的短信API可以正常发送。&lt;/p&gt;
&lt;p&gt;经过一番仔细核查，原因已找到，是PHP系统自带的CURL函数中的证书验证问题。&lt;/p&gt;
&lt;p&gt;错误提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用已知的CA证书进行身份验证”。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;curl的设置中加入这样一项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即在请求中“信任任何证书”，不再进行CA证书验证。&lt;/p&gt;
&lt;p&gt;但是至少耽误了一天半的短信发送，只是因为周末和月底，没被发现而已。从2020年05月30日 19:36之后到2020年06月01日10:30之前，都是失败的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;奇怪的就是&lt;/strong&gt;：为什么之前可以用，突然在2020年05月30日晚上失败了，而且是在没有更改任何服务器配置和项目相关代码的情况。后来检测，其他项目中使用相同方法的也失败了。不得不逐一修复。&lt;/p&gt;
&lt;p&gt;关于CURL函数可以参考官网说明&lt;br&gt;&lt;a href=&quot;https://www.php.net/manual/en/function.curl-setopt.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.php.net/manual/en/function.curl-setopt.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下为php curl https ssl 证书相关的设置汇总：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$curl = curl_init();
curl_setopt($curl,CURLOPT_URL,$url);
curl_setopt($curl, CURLOPT_PORT, 443);
curl_setopt($curl, CURLOPT_SSLVERSION, 3);
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); //信任任何证书
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0); // 检查证书中是否设置域名,0不验证
curl_setopt($curl, CURLOPT_VERBOSE, 1); //debug模式
curl_setopt($curl, CURLOPT_SSLCERT, &amp;quot;./keys/client.crt&amp;quot;); //client.crt文件路径
curl_setopt($curl, CURLOPT_SSLCERTPASSWD, &amp;quot;112358&amp;quot;); //client证书密码
curl_setopt($curl, CURLOPT_SSLKEY, &amp;quot;./keys/client.key&amp;quot;);
curl_setopt($curl, CURLOPT_POST, 1);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;所以，在最后总结三点：&lt;/p&gt;
&lt;p&gt;1、怎么能及时地发现问题；（有没有报警机制）&lt;/p&gt;
&lt;p&gt;2、怎么能快速地解决问题；（核查问题的能力）&lt;/p&gt;
&lt;p&gt;3、怎么能避免问题不再发生。（预防可能遇到的坑）
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;系统的短信发送突然全部失败了。使用postman工具测试阿里云云通信的短信API可以正常发送。&lt;/p&gt;
&lt;p&gt;经过一番仔细核查，原因已找到，是PHP系统自带的CURL函数中的证书验证问题。&lt;/p&gt;
&lt;p&gt;错误提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certifica
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="第三方API" scheme="http://isunman.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9api/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统inodes资源耗尽问题</title>
    <link href="http://isunman.com/2020/05/10/linux-system-inodes-resource-depletion-problem/"/>
    <id>http://isunman.com/2020/05/10/linux-system-inodes-resource-depletion-problem/</id>
    <published>2020-05-10T10:33:00.000Z</published>
    <updated>2020-05-10T11:39:51.290Z</updated>
    
    <content type="html">&lt;p&gt;Linux系统inodes资源耗尽问题&lt;/p&gt;
&lt;h3 id=&quot;1-inodes介绍&quot;&gt;&lt;a href=&quot;#1-inodes介绍&quot; class=&quot;headerlink&quot; title=&quot;1 inodes介绍&quot;&gt;&lt;/a&gt;1 inodes介绍&lt;/h3&gt;&lt;p&gt;Linux系统下文件数据储存在”块”中，文件的元信息，例如文件的创建者、文件的创建日期、文件的大小等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。&lt;/p&gt;
&lt;p&gt;inode也占用硬盘空间，硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。&lt;/p&gt;
&lt;p&gt;每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。&lt;/p&gt;
&lt;h3 id=&quot;2-inodes资源耗尽&quot;&gt;&lt;a href=&quot;#2-inodes资源耗尽&quot; class=&quot;headerlink&quot; title=&quot;2 inodes资源耗尽&quot;&gt;&lt;/a&gt;2 inodes资源耗尽&lt;/h3&gt;&lt;p&gt;inodes使用完与存储空间使用完相似，都是创建不了文件或无法正常执行一些命令。inodes使用完，存储空间可能还有，这种情况一般是生成了大量的小文件，把inode table占满。&lt;/p&gt;
&lt;p&gt;一般情况下存储空间使用完，inodes往往才使用百分之几，所以容易忽视对inodes使用情况的监控。&lt;/p&gt;
&lt;p&gt;借用网图来说明inodes用尽，而磁盘空间还未用完的情况：&lt;/p&gt;
&lt;p&gt;查看磁盘空间使用情况，使用df命令&lt;/p&gt;
&lt;p&gt;查看inodess使用情况，使用df -i命令&lt;/p&gt;
&lt;p&gt;上述两个命令可以使用-h参数，命令为df -h和df -hi。从图中看见磁盘空间使用71%，但是inodes使用100%。&lt;/p&gt;
&lt;h3 id=&quot;3-inodes耗尽解决&quot;&gt;&lt;a href=&quot;#3-inodes耗尽解决&quot; class=&quot;headerlink&quot; title=&quot;3 inodes耗尽解决&quot;&gt;&lt;/a&gt;3 inodes耗尽解决&lt;/h3&gt;&lt;p&gt;inodes的大小在磁盘格式化分区时确定，跟分区的大小相关，分区越大，inodes越大，反之亦然。&lt;/p&gt;
&lt;p&gt;linux操作系统根目录一般分区比较小，如果有定时性的小文件产生而又未及时清理，则很容易造成inodes占满。&lt;/p&gt;
&lt;p&gt;inodes占满解决步骤：&lt;/p&gt;
&lt;h4 id=&quot;（1）查看文件最多的目录&quot;&gt;&lt;a href=&quot;#（1）查看文件最多的目录&quot; class=&quot;headerlink&quot; title=&quot;（1）查看文件最多的目录&quot;&gt;&lt;/a&gt;（1）查看文件最多的目录&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;for i in /*; do echo $i; find $i | wc -l; done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果确定目录范围，把/*写的具体点&lt;/p&gt;
&lt;p&gt;最终发现是/var/spool/postfix/maildrop目录下小文件过多，原因如下：&lt;/p&gt;
&lt;p&gt;由于linux在执行cron时，会将cron执行脚本中的output和warning信息，都会以邮件的形式发送给cron所有者。由于客户环境中的sendmail和postfix没有正常运行，邮件发送不成功，导致全部小文件都堆积在maildrop目录下，另由于缺乏自动清理的机制，故此目录下堆积了大量的文件。&lt;/p&gt;
&lt;p&gt;经过排查root用户下发现有个每分钟进行一次时钟同步的定时任务，该定时任务每分钟产生一个小文件。&lt;/p&gt;
&lt;h4 id=&quot;（2）删除大量文件&quot;&gt;&lt;a href=&quot;#（2）删除大量文件&quot; class=&quot;headerlink&quot; title=&quot;（2）删除大量文件&quot;&gt;&lt;/a&gt;（2）删除大量文件&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ls | xargs -n 1000 rm -rf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;需要使用xargs命令，不然会删除失败。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-总结&quot;&gt;&lt;a href=&quot;#4-总结&quot; class=&quot;headerlink&quot; title=&quot;4 总结&quot;&gt;&lt;/a&gt;4 总结&lt;/h3&gt;&lt;h4 id=&quot;（1）设置方面&quot;&gt;&lt;a href=&quot;#（1）设置方面&quot; class=&quot;headerlink&quot; title=&quot;（1）设置方面&quot;&gt;&lt;/a&gt;（1）设置方面&lt;/h4&gt;&lt;p&gt;在crontab -e 第一行增加MAILTO=”” ，就没有文件产生啦&lt;/p&gt;
&lt;h4 id=&quot;（2）重定向&quot;&gt;&lt;a href=&quot;#（2）重定向&quot; class=&quot;headerlink&quot; title=&quot;（2）重定向&quot;&gt;&lt;/a&gt;（2）重定向&lt;/h4&gt;&lt;p&gt;对定时任务设置定向输出文件，不需要日志输出的定时任务可以将日志重定向到/dev/null，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*/10 * * * * /tmp/test.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（3）定时清理文件&quot;&gt;&lt;a href=&quot;#（3）定时清理文件&quot; class=&quot;headerlink&quot; title=&quot;（3）定时清理文件&quot;&gt;&lt;/a&gt;（3）定时清理文件&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;find 目录 -type f -mtime +30 | xargs -n 1000 rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（4）监控inodes的使用&quot;&gt;&lt;a href=&quot;#（4）监控inodes的使用&quot; class=&quot;headerlink&quot; title=&quot;（4）监控inodes的使用&quot;&gt;&lt;/a&gt;（4）监控inodes的使用&lt;/h4&gt;&lt;p&gt;备注：应注意crontab的写法和产生的文件的定时清理&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下来自另一篇文章《查找和删除占用较多Inodes的目录》&lt;/p&gt;
&lt;p&gt;1.df -h 显示磁盘使用未到52%，但 df -i 显示 100%，站点程序提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning: session_start(): open(/tmp/sess_24q39g3sh8viclu4ok8nkl7nt7, O_RDWR) failed: No space left on device
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.先尝试删除/tmp目录的一个或多个临时文件&lt;/p&gt;
&lt;p&gt;3.从少到多，显示目录占用的inodes数量【实测此条实用】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find / -xdev -printf &amp;apos;%h\n&amp;apos; | sort | uniq -c | sort -k 1 -n
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.本例是 /var/spool/clientmqueue/ 目录占用的inodes数量最多&lt;/p&gt;
&lt;p&gt;5.转到相应的目录，且删除该目录下的文件，请谨慎操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/spool/clientmqueue &amp;amp;&amp;amp; ls | xargs rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.再次查看inodes占用情况，降到10%了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统inodes资源耗尽问题&lt;/p&gt;
&lt;h3 id=&quot;1-inodes介绍&quot;&gt;&lt;a href=&quot;#1-inodes介绍&quot; class=&quot;headerlink&quot; title=&quot;1 inodes介绍&quot;&gt;&lt;/a&gt;1 inodes介绍&lt;/h3&gt;&lt;p&gt;Linux系统下文件数
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>Nginx access.log文件太大，自动释放清理</title>
    <link href="http://isunman.com/2020/05/10/the-nginx-accesslog-file-is-too-large-to-clean-up/"/>
    <id>http://isunman.com/2020/05/10/the-nginx-accesslog-file-is-too-large-to-clean-up/</id>
    <published>2020-05-10T10:30:00.000Z</published>
    <updated>2020-05-10T11:39:40.753Z</updated>
    
    <content type="html">&lt;p&gt;Nginx access.log文件太大，自动释放清理&lt;/p&gt;
&lt;p&gt;Nginx在涉及大流量时，会发生非常庞大的日志文件，包含access.log和error.log，日志会随着连接不断增加，到无限大。如果日志文件太大，会导致Nginx运行缓慢，卡顿，也是存储资源的浪费。&lt;/p&gt;
&lt;p&gt;该文件为nginx的访问日志文件可以删除,删除后nginx启动还会产生&lt;br&gt;如果要关闭日志功能,在nginx配置文件中找到access_log一行,改为access_log off;&lt;/p&gt;
&lt;h3 id=&quot;手动释放清理Nginx日志文件access-log&quot;&gt;&lt;a href=&quot;#手动释放清理Nginx日志文件access-log&quot; class=&quot;headerlink&quot; title=&quot;手动释放清理Nginx日志文件access.log&quot;&gt;&lt;/a&gt;手动释放清理Nginx日志文件access.log&lt;/h3&gt;&lt;p&gt;查看并查找相关信息及路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看空间占用
$ df -h

# 定位Nginx
$ which nginx
/usr/local/nginx/logs

# 列出日志文件
$ cd /usr/local/nginx/logs
ls

# 查看日志文件大小
$ du -sh ./*

# 暂停Nginx并删除日志文件
# nginx -s stop
rm -rf *.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意的是，看到网上有人说重启Nginx可以清除日志文件，这是错误的。重启并不会清空日志文件，你需要手动清理。&lt;/p&gt;
&lt;p&gt;另外，你也可以使用覆盖日志的方法清理Nginx日志文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;&amp;quot; &amp;gt; /usr/local/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不需要日志文件就直接关闭（不建议），nginx.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;access_log off; 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;对Nginx-access-log进行分割&quot;&gt;&lt;a href=&quot;#对Nginx-access-log进行分割&quot; class=&quot;headerlink&quot; title=&quot;对Nginx access.log进行分割&quot;&gt;&lt;/a&gt;对Nginx access.log进行分割&lt;/h3&gt;&lt;p&gt;通过shell脚本+linux的定时任务进行的一个平滑切分。不需要重启nginx进程。代码cut_logs.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
log_path=/usr/local/nginx/logs/access.log
save_path=/usr/local/nginx/logs/bak/access_$(date +%Y%m%d -d &amp;apos;yesterday&amp;apos;).log
cp $log_path $save_path &amp;amp;&amp;amp; echo &amp;gt; $log_path
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置定时任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ crontab -e
#输入
0 0  * * * /usr/bin/sh cut_logs.sh #每天的00:00执行日志切分

$ crontab -l #查看定时任务是否添加成功
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx access.log文件太大，自动释放清理&lt;/p&gt;
&lt;p&gt;Nginx在涉及大流量时，会发生非常庞大的日志文件，包含access.log和error.log，日志会随着连接不断增加，到无限大。如果日志文件太大，会导致Nginx运行缓慢，卡顿，也是存储资源的浪费。&lt;
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
</feed>
