<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳侠</title>
  <subtitle>我是一颗恒星</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://isunman.com/"/>
  <updated>2018-09-07T19:33:50.223Z</updated>
  <id>http://isunman.com/</id>
  
  <author>
    <name>isunman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义iPhone的铃声</title>
    <link href="http://isunman.com/2018/09/08/customize-your-iPhones-ringtone/"/>
    <id>http://isunman.com/2018/09/08/customize-your-iPhones-ringtone/</id>
    <published>2018-09-07T19:33:50.282Z</published>
    <updated>2018-09-07T19:33:50.223Z</updated>
    
    <content type="html">&lt;h3 id=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;a href=&quot;#需使用Mac电脑上的itunes进行设置。&quot; class=&quot;headerlink&quot; title=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;/a&gt;需使用Mac电脑上的itunes进行设置。&lt;/h3&gt;&lt;p&gt;具体方法如下：&lt;/p&gt;
&lt;p&gt;1、将手机和苹果电脑连接，打开iTunes切换到资料库看“xxx”的iphone这一栏有没有铃声菜单，没有的话点击编辑菜单勾选铃声。&lt;/p&gt;
&lt;p&gt;2、下载你喜欢的歌曲点击歌曲-&amp;gt;文件-&amp;gt;添加到资料库，选取要自定义铃声的歌曲之后选择打开。&lt;/p&gt;
&lt;p&gt;3、选定歌曲右击-&amp;gt;显示简介-&amp;gt;选项，选择开始停止时间，记得打钩 ( 这里注意的是苹果的铃声只能在40s内 ),然后点击好。&lt;/p&gt;
&lt;p&gt;4、选定歌曲文件-&amp;gt;转换-&amp;gt;创建ACC版本，出现两个同名文件。&lt;/p&gt;
&lt;p&gt;5、右击刚刚新生成同名文件选择在Finder打开，修改该文件的扩展名为m4r。为了后续操作方便把该文件拖到桌面。&lt;/p&gt;
&lt;p&gt;6、返回资料库删除刚刚生成的同名文件。点击音乐-&amp;gt;铃声把刚刚拖到桌面的m4r文件,拖放到列表&lt;/p&gt;
&lt;p&gt;7、点击手机按钮进入手机管理。打开手机 设置-&amp;gt;声音与触感-&amp;gt;电话铃声 就可以自定义铃声了。&lt;/p&gt;
&lt;p&gt;其中，第2-4步的扩展可以参考如下：&lt;/p&gt;
&lt;h3 id=&quot;mp3文件到acc文件的剪切与格式转换&quot;&gt;&lt;a href=&quot;#mp3文件到acc文件的剪切与格式转换&quot; class=&quot;headerlink&quot; title=&quot;mp3文件到acc文件的剪切与格式转换&quot;&gt;&lt;/a&gt;mp3文件到acc文件的剪切与格式转换&lt;/h3&gt;&lt;p&gt;当先打开访达，在访达点击左侧的音乐。&lt;/p&gt;
&lt;p&gt;在音乐里面选择一个需要剪切的音频文件，然后右键打开方式为图二的软件即可。&lt;/p&gt;
&lt;p&gt;打开软件后点击这个音乐文件，然后看到出现在下方点击名字上的右侧三个小点。并在菜单上选择歌曲信息。&lt;/p&gt;
&lt;p&gt;然后在这个信息框点击选项，把开始结束这里勾上。&lt;/p&gt;
&lt;p&gt;输入一个需要的时间，即音乐的时长。而后看到这个音乐已经被修改了时长了。例如这里设置为10秒钟，则输入10即可。&lt;/p&gt;
&lt;p&gt;然后点击菜单栏上的文件转换，选择创建ACC版本。&lt;/p&gt;
&lt;p&gt;这个时候看到在原来的名字下面多个版本，就是创建后的文件，把文件拖到桌面。接着桌面多个剪切后的音频文件了。一个音频文件至此就剪切剪辑完毕了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;a href=&quot;#需使用Mac电脑上的itunes进行设置。&quot; class=&quot;headerlink&quot; title=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;/a&gt;需使用Mac电脑上的itunes进行设置。&lt;/
    
    </summary>
    
      <category term="Mac使用" scheme="http://isunman.com/categories/mac%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>如何下载知乎视频</title>
    <link href="http://isunman.com/2018/08/29/how-to-download-zhihu-video/"/>
    <id>http://isunman.com/2018/08/29/how-to-download-zhihu-video/</id>
    <published>2018-08-29T12:18:53.660Z</published>
    <updated>2018-08-29T12:18:53.628Z</updated>
    
    <content type="html">&lt;p&gt;知乎视频缓存是分段每一段几秒，不可能有完整文件可以一次下载完成的。大部分浏览器视频探测下载插件也不管用。&lt;/p&gt;
&lt;p&gt;下面说一种亲测实用的方法。&lt;/p&gt;
&lt;h3 id=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;a href=&quot;#1、先找到视频的真正地址，一般都是m3u8格式。&quot; class=&quot;headerlink&quot; title=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;/a&gt;1、先找到视频的真正地址，一般都是m3u8格式。&lt;/h3&gt;&lt;p&gt;方法有许多种。暂时介绍2种。&lt;/p&gt;
&lt;p&gt;第1种：&lt;br&gt;如果已经获取到形如&lt;a href=&quot;https://v.vzuu.com/video/1018150775008034816格式的知乎视频地址，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://v.vzuu.com/video/1018150775008034816格式的知乎视频地址，&lt;/a&gt;&lt;br&gt;则使用&lt;a href=&quot;https://lens.zhihu.com/api/videos/1018150775008034816来获取视频的真实地址；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lens.zhihu.com/api/videos/1018150775008034816来获取视频的真实地址；&lt;/a&gt;&lt;br&gt;最后的数字是视频网页的地址中的参数，返回的json 里有 m3u8 地址。&lt;/p&gt;
&lt;p&gt;第2种：&lt;br&gt;实用浏览器工具“代码检查”或者“查看源码”或者“firebug”，查找到视频的真实地址。&lt;/p&gt;
&lt;h3 id=&quot;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot;&gt;&lt;a href=&quot;#2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot; class=&quot;headerlink&quot; title=&quot;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot;&gt;&lt;/a&gt;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&lt;/h3&gt;&lt;p&gt;需要注意的是，需要提前本地安装好ffmpeg；使用命令时，如不识别ffmpeg则需要使用ffmpeg的绝对路径。&lt;/p&gt;
&lt;p&gt;ffmpeg -i “视频真实地址URL” -c copy m.mp4&lt;/p&gt;
&lt;p&gt;执行完成之后，在执行命令行切换的当前目录下就是生成m.mp4的文件。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;知乎视频缓存是分段每一段几秒，不可能有完整文件可以一次下载完成的。大部分浏览器视频探测下载插件也不管用。&lt;/p&gt;
&lt;p&gt;下面说一种亲测实用的方法。&lt;/p&gt;
&lt;h3 id=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;a href=&quot;#1、先找到视频的真正地址，一般
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工作" scheme="http://isunman.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>Web端的即时通讯解决方案</title>
    <link href="http://isunman.com/2018/08/21/web-based-instant-messaging-solution/"/>
    <id>http://isunman.com/2018/08/21/web-based-instant-messaging-solution/</id>
    <published>2018-08-21T11:02:17.901Z</published>
    <updated>2018-08-21T11:02:17.839Z</updated>
    
    <content type="html">&lt;p&gt;Web端的即时通讯解决方案&lt;/p&gt;
&lt;h3 id=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;a href=&quot;#首先，确定使用WebSocket技术。&quot; class=&quot;headerlink&quot; title=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;/a&gt;首先，确定使用WebSocket技术。&lt;/h3&gt;&lt;p&gt;逻辑分析：&lt;/p&gt;
&lt;p&gt;1、如果需要支持多个项目，提交登录信息时，需提供当前的项目的ID。&lt;br&gt;或者不同的项目使用不同的端口，在服务器端启用多个WebSocket的服务。&lt;/p&gt;
&lt;p&gt;2、与Redis的结合。&lt;/p&gt;
&lt;p&gt;3、作为独立第三方，只负责即时通讯的连接和转发消息，不涉及具体业务逻辑。&lt;/p&gt;
&lt;h3 id=&quot;在Linux服务器上安装配置该技术的步骤：&quot;&gt;&lt;a href=&quot;#在Linux服务器上安装配置该技术的步骤：&quot; class=&quot;headerlink&quot; title=&quot;在Linux服务器上安装配置该技术的步骤：&quot;&gt;&lt;/a&gt;在Linux服务器上安装配置该技术的步骤：&lt;/h3&gt;&lt;p&gt;1、先安装Redis&lt;/p&gt;
&lt;p&gt;2、再安装PHP的redis扩展&lt;/p&gt;
&lt;p&gt;3、调试功能。&lt;/p&gt;
&lt;p&gt;4、Redis的后台运行。&lt;/p&gt;
&lt;p&gt;5、PHP文件的命令行执行的后台运行。&lt;/p&gt;
&lt;h3 id=&quot;详细说明每个步骤中遇到的坑&quot;&gt;&lt;a href=&quot;#详细说明每个步骤中遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;详细说明每个步骤中遇到的坑&quot;&gt;&lt;/a&gt;详细说明每个步骤中遇到的坑&lt;/h3&gt;&lt;p&gt;1、安装Redis中没遇到什么问题。Linux时CentOS 7版本，直接使用yum安装即可。&lt;/p&gt;
&lt;p&gt;2、注意PHP的redis扩展中的PHP的安装路径。&lt;/p&gt;
&lt;p&gt;3、无问题。&lt;/p&gt;
&lt;p&gt;4、Redis的后台运行，需要确认进程和端口未被占用。&lt;/p&gt;
&lt;p&gt;5、这一步有大坑。PHP文件后台命令行模式一直启动不了。说是命令的路径不对，修改了也不行。后来使用PHP命令的绝对地址才可以启动，暂时先使用。因为此文件不会经常启动。&lt;/p&gt;
&lt;h3 id=&quot;其他注意事项&quot;&gt;&lt;a href=&quot;#其他注意事项&quot; class=&quot;headerlink&quot; title=&quot;其他注意事项&quot;&gt;&lt;/a&gt;其他注意事项&lt;/h3&gt;&lt;p&gt;1、把Redis和server.php文件加入到服务器开机自启动中，Redis可以，server.php不可以。只有暂时手动启动此文件的运行。&lt;/p&gt;
&lt;p&gt;2、每次重启服务器一定要注意重启server.php。&lt;/p&gt;
&lt;p&gt;3、每次重启服务器，一定要住已清理Redis中与WebSocket相关的缓存数据。&lt;/p&gt;
&lt;p&gt;——小永&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Web端的即时通讯解决方案&lt;/p&gt;
&lt;h3 id=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;a href=&quot;#首先，确定使用WebSocket技术。&quot; class=&quot;headerlink&quot; title=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;/a&gt;首先，确定使用W
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="http://isunman.com/tags/redis/"/>
    
      <category term="linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="即时通讯" scheme="http://isunman.com/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>告诉你Redis是一个牛逼货</title>
    <link href="http://isunman.com/2018/08/07/Tell-you-that-redis-is-a-real-powerful/"/>
    <id>http://isunman.com/2018/08/07/Tell-you-that-redis-is-a-real-powerful/</id>
    <published>2018-08-07T03:43:11.685Z</published>
    <updated>2018-08-07T03:43:11.650Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h2&gt;&lt;p&gt;Redis是一个 Key-Value 存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string(字符串)、 list(链表)、 set(集合)和 zset(有序集合)。这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis 支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave(主从)同步。&lt;/p&gt;
&lt;h2 id=&quot;Key-Value存储系统&quot;&gt;&lt;a href=&quot;#Key-Value存储系统&quot; class=&quot;headerlink&quot; title=&quot;Key-Value存储系统&quot;&gt;&lt;/a&gt;Key-Value存储系统&lt;/h2&gt;&lt;p&gt;Key-Value Store 是当下比较流行的话题，尤其在构建诸如搜索引擎、IM、P2P、游戏服务器、SNS 等大型互联网应用以及提供云计算服务的时候，怎样保证系统在海量数据环境下的高性能、高可靠性、高扩展性、高可用性、低成本成为所有系统架构们挖苦心思考虑的重点，而怎样解决数据库服务器的性能瓶颈是最大的挑战。&lt;/p&gt;
&lt;p&gt;Key-Value Store 更加注重对海量数据存取的性能、分布式、扩展性支持上，并不需要传统关系数据库的一些特征，例如：Schema、事务、完整 SQL 查询支持等等，因此在分布式环境下的性能相对于传统的关系数据库有较大的提升。&lt;/p&gt;
&lt;h2 id=&quot;为什么要选择Key-Value-Store&quot;&gt;&lt;a href=&quot;#为什么要选择Key-Value-Store&quot; class=&quot;headerlink&quot; title=&quot;为什么要选择Key-Value Store&quot;&gt;&lt;/a&gt;为什么要选择Key-Value Store&lt;/h2&gt;&lt;h3 id=&quot;1、大规模互联网应用&quot;&gt;&lt;a href=&quot;#1、大规模互联网应用&quot; class=&quot;headerlink&quot; title=&quot;1、大规模互联网应用&quot;&gt;&lt;/a&gt;1、大规模互联网应用&lt;/h3&gt;&lt;p&gt;一类是仍然采用RDBMS，然后通过对数据库的垂直和水平切分将整个数据库部署到一个集群上，缺点在于它是针对特定应用，通用型不足&lt;br&gt;另一类就是google采用的方法，抛弃RDBMS，采用Key-Value形式存储，这样可以极大增强系统的可扩展性。&lt;/p&gt;
&lt;h3 id=&quot;2、云存储&quot;&gt;&lt;a href=&quot;#2、云存储&quot; class=&quot;headerlink&quot; title=&quot;2、云存储&quot;&gt;&lt;/a&gt;2、云存储&lt;/h3&gt;&lt;p&gt;如果说上一个问题还有可以替代的解决方案（切割数据库）的话，那么对于云存储来说，也许 key-value 的 store 就是唯一的解决方案了。云存储简单点说就是构建一个大型的存储平台给别人用，这也就意味着在这上面运行的应用其实是不可控的。如果其中某个客户的应用随着用户的增长而不断增长时，云存储供应商是没有办法通过数据库的切割来达到 scale 的，因为这个数据是客户的，供应商不了解这个数据自然就没法作出切割。在这种情况下，key-value 的 store 就是唯一的选择了，因为这种条件下的 scalability 必须是自动完成的，不能有人工干预。这也是为什么几乎所有的现有的云存储都是 key-value 形式的，例如 Amazon的 smipleDB，底层实现就是 key-value，还有 google 的  GoogleAppEngine，采用的是 BigTable的存储形式。&lt;/p&gt;
&lt;p&gt;Key-Value Store 最大的特点就是它的可扩展性，这也就是它最大的优势。所谓的可扩展性，在我看来这里包括了两方面内容。一方面，是指 Key-Value Store 可以支持极大的数据的存储，它的分布式的架构决定了只要有更多的机器，就能够保证存储更多的数据。另一方面，是指它可以支持数量很多的并发的查询。对于 RDBMS，一般几百个并发的查询就可以让它很吃力了，而一个 Key-Value Store，可以很轻松的支持上千的并发查询。下面而简单的罗列了一些特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key-value store：一个  key-value  数据存储系统，只支持一些基本操作，如： SET(key, value) 和  GET(key)  等；&lt;/li&gt;
&lt;li&gt;分布式：多台机器（nodes）同时存储数据和状态，彼此交换消息来保持数据一致，可视为一个完整的存储系统。&lt;/li&gt;
&lt;li&gt;数据一致：所有机器上的数据都是同步更新的、不用担心得到不一致的结果；&lt;br&gt;冗余：所有机器（nodes）保存相同的数据，整个系统的存储能力取决于单台机器（node）的能力；&lt;/li&gt;
&lt;li&gt;容错：如果有少数  nodes  出错，比如重启、当机、断网、网络丢包等各种  fault/fail  都不影响整个系统的运行；&lt;/li&gt;
&lt;li&gt;高可靠性：容错、冗余等保证了数据库系统的可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;初识Redis&quot;&gt;&lt;a href=&quot;#初识Redis&quot; class=&quot;headerlink&quot; title=&quot;初识Redis&quot;&gt;&lt;/a&gt;初识Redis&lt;/h2&gt;&lt;p&gt;Redis是一个开源的使用ANSI C语言编写，支持网络、可基于内存且可持久化的日志型、Key-Value数据库，并且提供多个语言的API，访问十分便捷。&lt;/p&gt;
&lt;h3 id=&quot;Redis数据类型：&quot;&gt;&lt;a href=&quot;#Redis数据类型：&quot; class=&quot;headerlink&quot; title=&quot;Redis数据类型：&quot;&gt;&lt;/a&gt;Redis数据类型：&lt;/h3&gt;&lt;p&gt;作为 Key-value 型数据库，Redis 也提供了键（Key）和键值（Value）的映射关系。但是，除了常规的数值或字符串，Redis 的键值还可以是以下形式之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists  （列表）&lt;/li&gt;
&lt;li&gt;Sets  （集合）&lt;/li&gt;
&lt;li&gt;Sorted sets  （有序集合）&lt;/li&gt;
&lt;li&gt;Hashes  （哈希表）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;键值的数据类型决定了该键值支持的操作。Redis 支持诸如列表、集合或有序集合的交集、并集、查集等高级原子操作；同时，如果键值的类型是普通数字，Redis 则提供自增等原子操作。&lt;/p&gt;
&lt;h2 id=&quot;Redis持久化：&quot;&gt;&lt;a href=&quot;#Redis持久化：&quot; class=&quot;headerlink&quot; title=&quot;Redis持久化：&quot;&gt;&lt;/a&gt;Redis持久化：&lt;/h2&gt;&lt;p&gt;通常，Redis 将数据存储于内存中，或被配置为使用虚拟内存。通过两种方式可以实现数据持久化：使用截图的方式，将内存中的数据不断写入磁盘；或使用类似 MySQL 的日志方式，记录每次更新的日志。前者性能较高，但是可能会引起一定程度的数据丢失；后者相反。&lt;/p&gt;
&lt;p&gt;Redis主从同步：&lt;/p&gt;
&lt;p&gt;Redis支持将数据同步到多台从库，这种特性对提高读取性能非常有益。&lt;/p&gt;
&lt;h2 id=&quot;Redis性能：&quot;&gt;&lt;a href=&quot;#Redis性能：&quot; class=&quot;headerlink&quot; title=&quot;Redis性能：&quot;&gt;&lt;/a&gt;Redis性能：&lt;/h2&gt;&lt;p&gt;相比需要依赖磁盘记录每个更新的数据库，基于内存的特性无疑给Redis带来了非常优秀的性能，读写操作之间有显著的性能差异。&lt;/p&gt;
&lt;h3 id=&quot;性能测试结果：&quot;&gt;&lt;a href=&quot;#性能测试结果：&quot; class=&quot;headerlink&quot; title=&quot;性能测试结果：&quot;&gt;&lt;/a&gt;性能测试结果：&lt;/h3&gt;&lt;p&gt;SET操作每秒钟 110000 次，GET操作每秒钟 81000 次，服务器配置如下：&lt;br&gt;Linux 2.6, Xeon X3320 2.5Ghz.&lt;br&gt;stackoverflow 网站使用 Redis 做为缓存服务器。&lt;/p&gt;
&lt;h2 id=&quot;适用场合：&quot;&gt;&lt;a href=&quot;#适用场合：&quot; class=&quot;headerlink&quot; title=&quot;适用场合：&quot;&gt;&lt;/a&gt;适用场合：&lt;/h2&gt;&lt;p&gt;Redis其实开创了一种新的数据存储思路，使用Redis，我们不用再面对功能单调的数据库时，把精力放在如何把大象放进冰箱的问题，而是利用Redis提供的灵活多变的数据结构和数据操作，为不同的大象构建不同的冰箱。&lt;/p&gt;
&lt;h3 id=&quot;下面是一些Redis常用的场景：&quot;&gt;&lt;a href=&quot;#下面是一些Redis常用的场景：&quot; class=&quot;headerlink&quot; title=&quot;下面是一些Redis常用的场景：&quot;&gt;&lt;/a&gt;下面是一些Redis常用的场景：&lt;/h3&gt;&lt;h4 id=&quot;1、取最新N个数据的操作&quot;&gt;&lt;a href=&quot;#1、取最新N个数据的操作&quot; class=&quot;headerlink&quot; title=&quot;1、取最新N个数据的操作&quot;&gt;&lt;/a&gt;1、取最新N个数据的操作&lt;/h4&gt;&lt;p&gt;比如典型的取你网站的最新文章，通过下面方式，我们可以将最新的 5000 条评论的 ID 放在Redis 的 List 集合中，并将超出集合部分从数据库获取。使用 LPUSH latest.comments&lt;id&gt;命令，向 list 集合中插入数据插入完成后再用 LTRIM latest.comments 0 5000 命令使其永远只保存最近 5000 个 ID如果你还有不同的筛选维度，比如某个分类的最新 N 条，那么你可以再建一个按此分类的List，只存 ID 的话，Redis 是非常高效的。&lt;/id&gt;&lt;/p&gt;
&lt;h4 id=&quot;2、排行榜应用，取TOP-N操作&quot;&gt;&lt;a href=&quot;#2、排行榜应用，取TOP-N操作&quot; class=&quot;headerlink&quot; title=&quot;2、排行榜应用，取TOP N操作&quot;&gt;&lt;/a&gt;2、排行榜应用，取TOP N操作&lt;/h4&gt;&lt;p&gt;这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某一个条件为权重，比如按购买的次数或者顶的次数，这时候就需要 sorted set 出马，将你要排序的值设置为sorted set的score，将具体的数据设置为相应的value，每次只需要执行一条ZADD命令即可。&lt;/p&gt;
&lt;h4 id=&quot;3、需要精确设定过期时间的应用&quot;&gt;&lt;a href=&quot;#3、需要精确设定过期时间的应用&quot; class=&quot;headerlink&quot; title=&quot;3、需要精确设定过期时间的应用&quot;&gt;&lt;/a&gt;3、需要精确设定过期时间的应用&lt;/h4&gt;&lt;p&gt;比如你可以把上面说到的 sorted  set 的 score 值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除 Redis 中的过期数据，你完全可以把 Redis 里这个过期时间当成是对数据库中数据的索引，用 Redis 来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。&lt;/p&gt;
&lt;h4 id=&quot;4、计数器应用&quot;&gt;&lt;a href=&quot;#4、计数器应用&quot; class=&quot;headerlink&quot; title=&quot;4、计数器应用&quot;&gt;&lt;/a&gt;4、计数器应用&lt;/h4&gt;&lt;p&gt;Redis的命令是原子性的，你可以轻松利用INCR、DECR命令来构建计数器系统（底层的写入是单线程模型，并发写会按到位顺序执行）&lt;/p&gt;
&lt;h4 id=&quot;5、Uniq操作，获取某段时间所有数据去重值&quot;&gt;&lt;a href=&quot;#5、Uniq操作，获取某段时间所有数据去重值&quot; class=&quot;headerlink&quot; title=&quot;5、Uniq操作，获取某段时间所有数据去重值&quot;&gt;&lt;/a&gt;5、Uniq操作，获取某段时间所有数据去重值&lt;/h4&gt;&lt;p&gt;这个使用Redis的Set数据结构最合适，只需要不断将数据往Set中扔就行，set就是集合，会自动去重&lt;/p&gt;
&lt;h4 id=&quot;6、实时系统、发垃圾系统&quot;&gt;&lt;a href=&quot;#6、实时系统、发垃圾系统&quot; class=&quot;headerlink&quot; title=&quot;6、实时系统、发垃圾系统&quot;&gt;&lt;/a&gt;6、实时系统、发垃圾系统&lt;/h4&gt;&lt;p&gt;通过上面说到的 set 功能，你可以知道一个终端用户是否进行了某个操作，可以找到其操作的集合并进行分析统计对比等。没有做不到，只有想不到。&lt;/p&gt;
&lt;h4 id=&quot;7、Pub、Sub构建实时消息系统&quot;&gt;&lt;a href=&quot;#7、Pub、Sub构建实时消息系统&quot; class=&quot;headerlink&quot; title=&quot;7、Pub、Sub构建实时消息系统&quot;&gt;&lt;/a&gt;7、Pub、Sub构建实时消息系统&lt;/h4&gt;&lt;p&gt;Redis 的 Pub/Sub 系统可以构建实时的消息系统，比如很多用 Pub/Sub 构建的实时聊天系统的例子。&lt;/p&gt;
&lt;h4 id=&quot;8、构建队列系统&quot;&gt;&lt;a href=&quot;#8、构建队列系统&quot; class=&quot;headerlink&quot; title=&quot;8、构建队列系统&quot;&gt;&lt;/a&gt;8、构建队列系统&lt;/h4&gt;&lt;p&gt;使用list可以构建队列系统，使用sorted set 甚至可以构建有优先级的队列系统。&lt;/p&gt;
&lt;h4 id=&quot;9、缓存&quot;&gt;&lt;a href=&quot;#9、缓存&quot; class=&quot;headerlink&quot; title=&quot;9、缓存&quot;&gt;&lt;/a&gt;9、缓存&lt;/h4&gt;&lt;p&gt;性能优于Memcached，并且更优秀的在于数据结构更加多样化&lt;/p&gt;
&lt;h2 id=&quot;Redis作者的宣言&quot;&gt;&lt;a href=&quot;#Redis作者的宣言&quot; class=&quot;headerlink&quot; title=&quot;Redis作者的宣言&quot;&gt;&lt;/a&gt;Redis作者的宣言&lt;/h2&gt;&lt;p&gt;宣言中，作者列举了Redis的7大原则，可以向大家阐明Redis的思想，看了之后我觉得Redis的作者的确牛叉，Redis这款产品这的是程序猿的福利：&lt;/p&gt;
&lt;p&gt;1、Redis 是一个操作数据结构的语言工具，它提供基于 TCP 的协议以操作丰富的数据结构。&lt;/p&gt;
&lt;p&gt;在 Redis 中，数据结构这个词的意义不仅表示在某种数据结构上的操作，更包括了结构本身及这些操作的时间空间复杂度。&lt;/p&gt;
&lt;p&gt;2、Redis 定位于一个内存数据库，正是由于内存的快速访问特性，才使得 Redis 能够有如此高的性能，才使得 Redis 能够轻松处理大量复杂的数据结构，Redis 会尝试其它的存储方面的选择，但是永远不会改变它是一个内存数据库的角色。&lt;/p&gt;
&lt;p&gt;3、Redis 使用基础的 API 操作基础的数据结构， Redis 的 API 与数据结构一样，都是一些最基础的元素，你几乎可以将任何信息交互使用此 API 格式表示。作者调侃说，如果有其它非人类的智能生物存在，他们也能理解 Redis 的 API。因为它是如此的基础。（作者大大很有趣）&lt;/p&gt;
&lt;p&gt;4、Redis 有着诗一般优美的代码，经常有一些不太了解 Redis  有的人会建议 Redis 采用一些其它人的代码，以实现一些 Redis  未实现的功能，但这对我们来说就像是非要给《红楼梦》接上后四十回一样。&lt;/p&gt;
&lt;p&gt;5、Redis 始终避免复杂化，我们认为设计一个系统的本质，就是与复杂化作战。我们不会为了一个小功能而往源码里添加上千行代码，解决复杂问题的方法就是让复杂问题永远不要提复杂的问题。&lt;/p&gt;
&lt;p&gt;6、Redis 支持两个层成的 API，第一个层面包含部分操作 API，但它支持用于分布式环境下的 Redis。第二个层面的 API 支持更复杂的 multi-key 操作。它们各有所长，但是我们不会推出两者都支持的 API，但我们希望能够提供实例间数据迁移的命令，并执行 multi-key 操作。&lt;/p&gt;
&lt;p&gt;7、我们以优化代码为乐，我们相信编码是一件辛苦的工作，唯一对得起这辛苦的就是去享受它。如果我们在编码中失去了乐趣，那最好的解决办法就是停下来。我们决不会选择让Redis不好玩的开发模式。&lt;/p&gt;
&lt;p&gt;我只能感叹道：Redis乃神物，出污泥而不染，濯清涟而不妖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;： Redis作者antirez曾笑称Redis为一个数据结构服务器，我认为这个还是挺准确的，Redis的所有功能就是将数据以其固有的几种结构来保存，并提供给用户操作这几种结构的接口。&lt;/p&gt;
&lt;p&gt;本文非原创&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/01b37cdb3f33&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h2&gt;&lt;p&gt;Redis是一个 Key-Value 存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多，包括 stri
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="http://isunman.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Xcode中的Version和Build的区别</title>
    <link href="http://isunman.com/2018/08/01/the-difference-between-version-and-build-in-xcode/"/>
    <id>http://isunman.com/2018/08/01/the-difference-between-version-and-build-in-xcode/</id>
    <published>2018-08-01T15:22:50.517Z</published>
    <updated>2018-08-01T15:22:50.472Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Version对应的是CFBundleShortVersionString。&quot;&gt;&lt;a href=&quot;#Version对应的是CFBundleShortVersionString。&quot; class=&quot;headerlink&quot; title=&quot;Version对应的是CFBundleShortVersionString。&quot;&gt;&lt;/a&gt;Version对应的是CFBundleShortVersionString。&lt;/h3&gt;&lt;p&gt;Version 一般由产品部门确定，版本号是由分隔的整数组成的字符串，一般有2段或者3段式, 如:1.2,  1.2.3&lt;/p&gt;
&lt;h3 id=&quot;二段式：&quot;&gt;&lt;a href=&quot;#二段式：&quot; class=&quot;headerlink&quot; title=&quot;二段式：&quot;&gt;&lt;/a&gt;二段式：&lt;/h3&gt;&lt;p&gt;第一个段：（主版本号）大功能的新增或者有迥异的变化&lt;br&gt;第二个段：（副版本号）既包含小功能更新也会包含 bug 修复&lt;/p&gt;
&lt;h3 id=&quot;三段式：&quot;&gt;&lt;a href=&quot;#三段式：&quot; class=&quot;headerlink&quot; title=&quot;三段式：&quot;&gt;&lt;/a&gt;三段式：&lt;/h3&gt;&lt;p&gt;第一个段：重大修改的版本，如实现新的大功能或重大变化的修订。&lt;br&gt;第二个段：实现较突出的特点，如新功能添加和大问题修复。&lt;br&gt;第三个段：代表维护版本，修复bug。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;版本号的管理是一个谨慎的事情，希望各位开发者了解其中的意义。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Build（-应用程序内部标示-）&quot;&gt;&lt;a href=&quot;#Build（-应用程序内部标示-）&quot; class=&quot;headerlink&quot; title=&quot;Build（ 应用程序内部标示 ）&quot;&gt;&lt;/a&gt;Build（ 应用程序内部标示 ）&lt;/h3&gt;&lt;p&gt;Bulid 是给内部使用,与 Version 不会有太大联系.&lt;/p&gt;
&lt;p&gt;Bulid对应的是CFBundleVersion。标识（发布或未发布）的内部版本号。用以记录开发版本的，每次更新的时候都需要比上一次高。&lt;br&gt;作用：发布build版本供测试团队进行测试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Version对应的是CFBundleShortVersionString。&quot;&gt;&lt;a href=&quot;#Version对应的是CFBundleShortVersionString。&quot; class=&quot;headerlink&quot; title=&quot;Version对应的是CFBun
    
    </summary>
    
      <category term="iOS" scheme="http://isunman.com/categories/ios/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序客服消息</title>
    <link href="http://isunman.com/2018/07/13/wechat-miniprogramcustomer-service-message/"/>
    <id>http://isunman.com/2018/07/13/wechat-miniprogramcustomer-service-message/</id>
    <published>2018-07-13T03:59:18.612Z</published>
    <updated>2018-07-13T03:59:18.575Z</updated>
    
    <content type="html">&lt;h3 id=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;a href=&quot;#微信小程序消息服务接入步骤&quot; class=&quot;headerlink&quot; title=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;/a&gt;微信小程序消息服务接入步骤&lt;/h3&gt;&lt;p&gt;1、填写服务器配置；&lt;br&gt;&lt;br&gt;2、验证服务器地址的有效性；&lt;br&gt;&lt;br&gt;3、依据接口文档实现业务逻辑。&lt;/p&gt;
&lt;h3 id=&quot;客服消息之接收消息和事件&quot;&gt;&lt;a href=&quot;#客服消息之接收消息和事件&quot; class=&quot;headerlink&quot; title=&quot;客服消息之接收消息和事件&quot;&gt;&lt;/a&gt;客服消息之接收消息和事件&lt;/h3&gt;&lt;p&gt;1、消息加密方式 与 数据格式（默认使用 明文模式与XML）。&lt;br&gt;&lt;br&gt;2、有加密的方式必须使用数据加密与解密算法，且与服务器配置统一。&lt;/p&gt;
&lt;h3 id=&quot;客服消息之发送客服消息&quot;&gt;&lt;a href=&quot;#客服消息之发送客服消息&quot; class=&quot;headerlink&quot; title=&quot;客服消息之发送客服消息&quot;&gt;&lt;/a&gt;客服消息之发送客服消息&lt;/h3&gt;&lt;p&gt;1、发送消息格式固定为JSON格式。&lt;br&gt;&lt;br&gt;2、支持4种消息类型：&lt;strong&gt;文本&lt;/strong&gt;，&lt;strong&gt;图片&lt;/strong&gt;，&lt;strong&gt;图文链接&lt;/strong&gt;，&lt;strong&gt;小程序卡片&lt;/strong&gt;。&lt;br&gt;&lt;br&gt;3、touser等于发送消息的FromUsername，即微信用户的openid。&lt;br&gt;&lt;br&gt;4、发送消息时需要accesstoken，则针对小程序APPID和APPSECRET成对使用，且缓存accesstoken 在服务器，随用随取。此处需要注意，同一个小程序APPID多处需要accesstoken时，最好可以统一调用同一个缓存数据。&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;p&gt;1、注意客服消息的收发是异步的，调用不同接口，并无直接关系。&lt;/p&gt;
&lt;p&gt;2、若使用加密方式，开发者在接收消息和事件时，都需要进行消息加解密（某些事件可能需要回复，回复时也需要先进行加密）。但是，通过API主动调用接口（包括调用客服消息接口发消息）时，不需要进行加密。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;1、&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;接入微信小程序消息服务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;接收消息和事件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发送客服消息&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;a href=&quot;#微信小程序消息服务接入步骤&quot; class=&quot;headerlink&quot; title=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;/a&gt;微信小程序消息服务接入步骤&lt;/h3&gt;&lt;p&gt;1、填写服务器配置；&lt;br&gt;&lt;br&gt;2、验证服务器地
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="微信" scheme="http://isunman.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="第三方API" scheme="http://isunman.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9api/"/>
    
  </entry>
  
  <entry>
    <title>如何用好 github 中的 watch、star、fork</title>
    <link href="http://isunman.com/2018/07/02/How-to-use-the-watch-star-and-fork-in-github/"/>
    <id>http://isunman.com/2018/07/02/How-to-use-the-watch-star-and-fork-in-github/</id>
    <published>2018-07-02T01:26:01.260Z</published>
    <updated>2018-07-02T01:26:01.201Z</updated>
    
    <content type="html">&lt;p&gt;在每个 github 项目的右上角，都有三个按钮,分别是 watch、star、fork，但是有些刚开始使用 github 的同学，可能对这三个按钮的使用却不怎么了解，包括一开始使用 github 的我也是如此。这篇博客，结合自的理解和使用，说说这三个按钮的用法以及一些个人见解。&lt;/p&gt;
&lt;p&gt;从左至右，依次是 watch star fork，下面分别说下他们的具体作用。&lt;/p&gt;
&lt;h2 id=&quot;watch&quot;&gt;&lt;a href=&quot;#watch&quot; class=&quot;headerlink&quot; title=&quot;watch&quot;&gt;&lt;/a&gt;watch&lt;/h2&gt;&lt;p&gt;watch 翻译过来可以称之为观察，点击 watch 可以看到如下的列表。&lt;/p&gt;
&lt;p&gt;对于别人的项目，默认自己都处于 Not watching 的状态，当你选择 Watching，表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 pull request、被别人发起了issue等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。&lt;/p&gt;
&lt;p&gt;如下，我 watching 了开源项目android-cn/android-discuss，那么以后任何人只要在这个项目下提交了 issue 或者在 issue 下面有任何留言，我的通知中心就会通知我。如果你配置了邮箱，你还可能会因此不断的收到通知邮件。&lt;/p&gt;
&lt;p&gt;如果你不想接受这个项目的所有通知，那么点击 Not Watching 即可。&lt;/p&gt;
&lt;p&gt;另外这里有一篇文章讲 如何正确接收 GitHub 的消息邮件，很不错的一篇文章，推荐大家看看。&lt;/p&gt;
&lt;h2 id=&quot;star&quot;&gt;&lt;a href=&quot;#star&quot; class=&quot;headerlink&quot; title=&quot;star&quot;&gt;&lt;/a&gt;star&lt;/h2&gt;&lt;p&gt;star 翻译过来是星，但这个翻译没任何具体意义，这里解释为关注或者点赞更合适，当你点击 star，表示你喜欢这个项目或者通俗点，可以把他理解成朋友圈的点赞吧，表示对这个项目的支持。&lt;/p&gt;
&lt;p&gt;不过相比朋友圈的点赞，github 里面会有一个列表，专门收集了你所有 star 过的项目，点击 github 个人头像，可以看到 your stars 的条目，点击就可以查看你 star 过的所有项目了，如下图所示&lt;/p&gt;
&lt;p&gt;不过，star 列表很容易出现这样的问题：如果你平时比较爱逛 Github， star 的项目过多后怎么快速查找自己想要的项目怎么办？&lt;/p&gt;
&lt;p&gt;这时，如果 github 可以提供一个分类功能该多好，就像微信公众号文章的收藏，你在点击微信菜单中的收藏后，微信会提示你对收藏的文章设置 tag。这样设置的好处是，以后在微信收藏列表中查找项目时，可以根设置的 tag 归类查找，这样查找效率会提高不少。&lt;/p&gt;
&lt;p&gt;但是不知道 github 的产品经理是怎么想的，github 本身没有这个功能。但是 github 这个全球最大的程序员社区从来也不缺有思想有执行力的程序员。&lt;/p&gt;
&lt;p&gt;也许是 github 自己也发现了检索的问题，现在 github 增加了一个类似的功能，可以给自己给自己的项目设置 topic.&lt;br&gt;给自己的项目设置 topic 后，相当于自己给自己的项目设置了一个 tag ，这样可以方便别人搜索。比如要搜索所有 topic 为 android 的项目，你只需要在 GitHub 搜索时输入 topic android  然后搜索即可。&lt;/p&gt;
&lt;h2 id=&quot;fork&quot;&gt;&lt;a href=&quot;#fork&quot; class=&quot;headerlink&quot; title=&quot;fork&quot;&gt;&lt;/a&gt;fork&lt;/h2&gt;&lt;p&gt;当选择 fork，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。&lt;/p&gt;
&lt;p&gt;一般来说，我们不需要使用 fork 这个功能，除非有一些项目，可能存在 bug 或者可以继续优化的地方，你想帮助原项目作者去完善这个项目或者单纯的想在原来项目基础上己维护一个属于自己项目（比如我 fork 的 AndroidWeekly 客户端，那么你可以 fork 一份项目下来，然后自己对这个项目进行修改完善，当你觉得项目没问题了，你就可以尝试发起 pull request 给原项目作者了。&lt;/p&gt;
&lt;p&gt;然后就静静等待他的 merge 邮件通知了。&lt;/p&gt;
&lt;p&gt;我看到很多人错误的在使用 fork。很多人把 fork 当成了收藏一样的功能，包括一开始使用 github 的我，每次看到一个好的项目就先 fork，&lt;/p&gt;
&lt;p&gt;因为这样，就可以我的 repository(仓库)列表下查看 fork 的项目了。其实你完全可以使用 star 来达到这个目的。&lt;/p&gt;
&lt;h2 id=&quot;使用建议&quot;&gt;&lt;a href=&quot;#使用建议&quot; class=&quot;headerlink&quot; title=&quot;使用建议&quot;&gt;&lt;/a&gt;使用建议&lt;/h2&gt;&lt;p&gt;1、对于一些可能会经常发生变化的会不定期更新的好项目 多使用 watch.&lt;/p&gt;
&lt;p&gt;比如 android-cn 团队的 android-discuss 项目，&lt;/p&gt;
&lt;p&gt;你就可以 watching 它，这里面都是一些关于 Android 技术的交流，如果有任何新问题，你都可以收到通知，你可以查看别人的回答，&lt;/p&gt;
&lt;p&gt;你可以回答别人提出的问题，这是一个很好的学习成长方式。&lt;/p&gt;
&lt;p&gt;其他值得watch的项目还有很多，比如 github 上很多的 Awesome 系列的项目,如 Awesome-MaterialDesign 等，你 watch 这些项目了，&lt;/p&gt;
&lt;p&gt;只要项目新增一些好玩好用的东西，你就会收到通知。&lt;/p&gt;
&lt;p&gt;我在知乎上看到有人问这样的问题，说 github 上有哪些值得 watch 的项目，其实有很多，我自己也整理了一些，但是没放到 github.&lt;/p&gt;
&lt;p&gt;值得注意的是，如果 watch多了，你可能会被无休止的邮件通知烦死（邮件通知可设置），因为被 watch 项目有任何留言、PR等更新都会触发通知，所以做好权衡。&lt;/p&gt;
&lt;p&gt;2、喜欢一个项目就 star 它吧~&lt;/p&gt;
&lt;p&gt;3、修改开源项目就使用 fork，这样你就可以在原项目的基础上，对项目进行修改提交，现在你是这个项目的主人啦~&lt;/p&gt;
&lt;h2 id=&quot;小细节&quot;&gt;&lt;a href=&quot;#小细节&quot; class=&quot;headerlink&quot; title=&quot;小细节&quot;&gt;&lt;/a&gt;小细节&lt;/h2&gt;&lt;p&gt;有些时候，你看到一个项目的 star 数有很多，你就想知道到底都有那些人 star 了这个项目，或者 fork 了这个项目，&lt;/p&gt;
&lt;p&gt;但是环顾一圈，你却找不到一个入口，后来自己不经意的发现，只要点击 star 傍边的数字，就可以查看有哪些人 star 了这个项目。&lt;/p&gt;
&lt;p&gt;是不是有点意思，现在你就可以去试试，watch、fork上面的数字都是可以点击的，道理一样。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/6c366b53ea41&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文参考&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在每个 github 项目的右上角，都有三个按钮,分别是 watch、star、fork，但是有些刚开始使用 github 的同学，可能对这三个按钮的使用却不怎么了解，包括一开始使用 github 的我也是如此。这篇博客，结合自的理解和使用，说说这三个按钮的用法以及一些个人
    
    </summary>
    
      <category term="工作学习" scheme="http://isunman.com/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Github" scheme="http://isunman.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>理解同步和异步</title>
    <link href="http://isunman.com/2018/07/01/understand-synchronization-and-asynchrony/"/>
    <id>http://isunman.com/2018/07/01/understand-synchronization-and-asynchrony/</id>
    <published>2018-06-30T17:04:43.866Z</published>
    <updated>2018-06-30T17:04:43.809Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一种说法&quot;&gt;&lt;a href=&quot;#一种说法&quot; class=&quot;headerlink&quot; title=&quot;一种说法&quot;&gt;&lt;/a&gt;一种说法&lt;/h3&gt;&lt;p&gt;老实说，玩电脑也玩了好几年了；印象中看到”同步和异步”关键字的次数已经记不清了，总感觉自己知道点什么，但却又说不出来什么东西，这是为啥？——  因为没有深入理解，没有总结；也应了那句古话：纸上学来终觉浅，绝知此事要躬行。 不卖关子了，开始进入正题。&lt;/p&gt;
&lt;p&gt;“同步”就好比：你去外地上学(人生地不熟)，突然生活费不够了；此时你决定打电话回家，通知家里转生活费过来，可是当你拨出电话时，对方一直处于待接听状态(即：打不通，联系不上)，为了拿到生活费，你就不停的oncall、等待，最终可能不能及时要到生活费，导致你今天要做的事都没有完成，而白白花掉了时间。&lt;/p&gt;
&lt;p&gt;“异步”就是：在你打完电话发现没人接听时，猜想：对方可能在忙，暂时无法接听电话，所以你发了一条短信(或者语音留言，亦或是其他的方式)通知对方后便忙其他要紧的事了；这时你就不需要持续不断的拨打电话，还可以做其他事情；待一定时间后，对方看到你的留言便回复响应你，当然对方可能转钱也可能不转钱。但是整个一天下来，你还做了很多事情。 或者说你找室友临时借了一笔钱，又开始happy的上学时光了。&lt;/p&gt;
&lt;p&gt;简而言之，言而总之：同步就是我强依赖你(对方)，我必须等到你的回复，才能做出下一步响应。即我的操作(行程)是顺序执行的，中间少了哪一步都不可以，或者说中间哪一步出错都不可以，类似于编程中程序被解释器顺序执行一样；同时如果我没有收到你的回复，我就一直处于等待、也就是阻塞的状态。 异步则相反，我并不强依赖你，我对你响应的时间也不敏感，无论你返回还是不返回，我都能继续运行；你响应并返回了，我就继续做之前的事情，你没有响应，我就做其他的事情。也就是说我不存在等待对方的概念，我就是非阻塞的。&lt;/p&gt;
&lt;p&gt;从上面的例子来看：同步似乎等价于阻塞，异步则等价于非阻塞。其实有些狭义，但不可否认的是，在一定情况下，确实可以这么认为；因为同步一定存在着阻塞状态，而异步一定不存在非阻塞的状态。 但是不是就是说 同步调用 == 阻塞调用呢？然并不是；阻塞和非阻塞强调的是程序在等待调用结果（消息，返回值）时的状态.  阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。 对于同步调用来说，很多时候当前线程还是激活的状态，只是从逻辑上当前函数没有返回而已，即同步等待时什么都不干，白白占用着资源。&lt;/p&gt;
&lt;h3 id=&quot;另一个有趣的例子&quot;&gt;&lt;a href=&quot;#另一个有趣的例子&quot; class=&quot;headerlink&quot; title=&quot;另一个有趣的例子&quot;&gt;&lt;/a&gt;另一个有趣的例子&lt;/h3&gt;&lt;p&gt;老张爱喝茶，废话不说，煮开水。&lt;/p&gt;
&lt;p&gt;出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。&lt;/p&gt;
&lt;p&gt;1 老张把水壶放到火上，立等水开。（同步阻塞）老张觉得自己有点傻&lt;/p&gt;
&lt;p&gt;2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。&lt;/p&gt;
&lt;p&gt;3 老张把响水壶放到火上，立等水开。（异步阻塞）老张觉得这样傻等意义不大&lt;/p&gt;
&lt;p&gt;4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）老张觉得自己聪明了。&lt;/p&gt;
&lt;p&gt;所谓同步异步，只是对于水壶而言。&lt;/p&gt;
&lt;p&gt;普通水壶，同步；响水壶，异步。&lt;/p&gt;
&lt;p&gt;虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。&lt;/p&gt;
&lt;p&gt;所谓阻塞非阻塞，仅仅对于老张而言。&lt;/p&gt;
&lt;p&gt;立等的老张，阻塞；看电视的老张，非阻塞。&lt;/p&gt;
&lt;p&gt;情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.zhihu.com/question/19732473/answer/20851256&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎问答&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一种说法&quot;&gt;&lt;a href=&quot;#一种说法&quot; class=&quot;headerlink&quot; title=&quot;一种说法&quot;&gt;&lt;/a&gt;一种说法&lt;/h3&gt;&lt;p&gt;老实说，玩电脑也玩了好几年了；印象中看到”同步和异步”关键字的次数已经记不清了，总感觉自己知道点什么，但却又说不出来什么东西
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="技术概念" scheme="http://isunman.com/tags/%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>MVC详解</title>
    <link href="http://isunman.com/2018/06/06/mvc_mode/"/>
    <id>http://isunman.com/2018/06/06/mvc_mode/</id>
    <published>2018-06-06T09:27:07.532Z</published>
    <updated>2018-06-06T09:27:07.487Z</updated>
    
    <content type="html">&lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;MVC是一种设计模式（Design pattern），也就是一种解决问题的方法和思路， 是上世纪80年代提出的，到现在已经颇有历史了。 MVC的意义在于指导开发者将数据与表现解耦，提高代码，特别是模型部分代码的复用性。&lt;/p&gt;
&lt;p&gt;MVC不仅仅存在于Web设计中，在桌面程序开发中也是一种常见的方法。MVC的出现已经有一段历史了。 记得我最早了解到MVC的时候，是在Microsoft的Visual C++ 中的MFC中。 当时年少无知，以为是MFC中特有的东西。后来随之不断学习，才发现自己的天真。 所以说，学得越多，就越觉得自己无知。越觉得自己无知，就越懂得敬畏和谦逊。 从这个角度讲，同学们，最好不要看不起谦逊的人。&lt;/p&gt;
&lt;p&gt;有个这么一个段子，说一天A君在圈内聚会时，朋友介绍了另一个人B君互相认识。 聚会场合嘛，这很正常，也很普遍。于是AB君小聊了一下。按国人的习惯，A君就问了“先生在哪高就？”。 B君只说了句，“谈不上高就，炒炒股。” “哦，原来是炒股的。”A君心想，虽没觉得什么不对，但心理觉得B有点low，只是没说破，也没表现出来。 过后了一段时间，一次偶然机会，发现原来B君是国内某上市公司的二股东，身家过亿。 人家没说慌，确实是炒股的……&lt;/p&gt;
&lt;p&gt;话说远了，我们还说正题。MVC是三个单词的缩写：Model, View, Controller。 MVC是一种设计模式，目前几乎所有的Web开发框架都建立在MVC模式之上。 当然，最近几年也出现了一些诸如MVP, MVVM之类的新的设计模式。 但从技术的成熟程度和使用的广泛程度来讲，MVC仍是主流。&lt;/p&gt;
&lt;p&gt;Yii是一个Web框架，从Web开发的分工来讲，Yii的开发工作中，承担后端的内容多一些，毕竟主要就是PHP开发。 前端主要是在HTML、JavaScript、CSS上进行开发，然后通过Yii把前端的内容管起来，如通过Assets等。 这一章要讲的MVC，主要是针对后端的。 前端的MVC严格来讲不属于Yii的范畴，这里我们就不作过多介绍。 如果想了解前端的MVC，可以看看Backbone.js Angular.js等前端框架。&lt;/p&gt;
&lt;h2 id=&quot;MVC的三要素&quot;&gt;&lt;a href=&quot;#MVC的三要素&quot; class=&quot;headerlink&quot; title=&quot;MVC的三要素&quot;&gt;&lt;/a&gt;MVC的三要素&lt;/h2&gt;&lt;p&gt;MVC是模型(Model)、视图(View)、控制器(Controller)3个单词的缩写。 下面我们从这3个方面来讲解MVC中的三个要素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Model是指数据模型，是对客观事物的抽象。 如一篇博客文章，我们可能会以一个Post类来表示，那么，这个Post类就是数据对象。 同时，博客文章还有一些业务逻辑，如发布、回收、评论等，这一般表现为类的方法，这也是model的内容和范畴。 对于Model，主要是数据、业务逻辑和业务规则。相对而言，这是MVC中比较稳定的部分，一般成品后不会改变。 开发初期的最重要任务，主要也是实现Model的部分。这一部分写得好，后面就可以改得少，开发起来就快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View是指视图，也就是呈现给用户的一个界面，是model的具体表现形式，也是收集用户输入的地方。 如你在某个博客上看到的某一篇文章，就是某个Post类的表现形式。 View的目的在于提供与用户交互的界面。换句话说，对于用户而言，只有View是可见的、可操作的。 事实上也是如此，你不会让用户看到Model，更不会让他直接操作Model。 你只会让用户看到你想让他看的内容。 这就是View要做的事，他往往是MVC中变化频繁的部分，也是客户经常要求改来改去的地方。 今天你可能会以一种形式来展示你的博文，明天可能就变成别的表现形式了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contorller指的是控制器，主要负责与model和view打交道。 换句话说，model和view之间一般不直接打交道，他们老死不相往来。view中不会对model作任何操作， model不会输出任何用于表现的东西，如HTML代码等。这俩甩手不干了，那总得有人来干吧，只能Controller上了。 Contorller用于决定使用哪些Model，对Model执行什么操作，为视图准备哪些数据，是MVC中沟通的桥梁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于MVC中三者的划分并没有十分明晰的定义和界线。MVC设计模式只是一种指导思想， 让你按照model, view, controller三个方面来描述你的应用，并通过三者的交互，使应用功能得以正常运转。&lt;/p&gt;
&lt;p&gt;其中，View的部分比较明确，就是负责显示嘛。一切与显示界面无关的东西，都不应该出现在View里面。 因此，View中一般不会出现复杂的判断语句，不会出现复杂的运算过程。 对于PHP的Web应用而言，毫无疑问，HTML是View中的主要内容。这是关于View的几个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责显示界面，以HTML为主；&lt;/li&gt;
&lt;li&gt;一般没有复杂的判断语句或运算过程，可以有简单的循环语句、格式化语句。 比如，一般博客首页的文章列表，就是一种循环结构；&lt;/li&gt;
&lt;li&gt;从不调用Model的写方法。也就是说，View只从Model获取数据，而不直接改写Model，所以我们说他们老死不相往来。&lt;/li&gt;
&lt;li&gt;一般没有任何准备数据的代码，如查询数据库、组合成一定格式的字符串等。 这些一般放在Controller里面，并以变量的形式传给视图。 也就是说，视图里面要用到的数据，都是拿来就能直接用的变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于Model而言，最主要就是保存事物的信息，表征事物的行为和对他可以进行的操作。 比如，Post类必然有一个用于保存博客文章标题的title属性，必然有一个删除的操作，这都是Model的内容。 以下是关于Model的几个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据、行为、方法是Model的主要内容；&lt;/li&gt;
&lt;li&gt;实际工作中，Model是MVC中代码量最大，逻辑最复杂的地方，因为关于应用的大量的业务逻辑也要在这里面表示。&lt;/li&gt;
&lt;li&gt;Model所提供的数据都是原始数据。也就是说，不带有任何表现层的代码。 比如，一般不会在输出的数据中添加HTML标签，这是View的工作。 但是Model可以提供有结构的数据，数组结构、队列结构、乃至其他Model等。 这个结构并非是表现层的格式，而是数据在内存中的表现。&lt;/li&gt;
&lt;li&gt;与输出不同，Model的输入数据，可以是带有表现格式的数据。 如将一篇文章保存到Post里面，内容中必然包含各种HTML标签。 因此，Model一般要对输入数据作过滤、验证和规范化等预处理。 特别是对于需要保存进数据库的，一定要对所有的输入数据作预处理。 这些预处理，有的其实是业务逻辑。比如只有主编才可以删除文章，这一验证规则既也是业务逻辑，也是权限控制。 而有些预处理，则不属于业务逻辑，比如，文章标题前后的空格应去除。&lt;/li&gt;
&lt;li&gt;注意与Controller区分开。Model是处理业务方面的逻辑，Controller只是简单的协调Model和View之间的关系， 只要是与业务有关的，就该放在Model里面。好的设计，应当是胖Model，瘦Controller。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于Controller，主要是响应用户请求，决定使用什么视图，需要准备什么数据用来显示。 以下是有关Controller的设计原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于处理用户请求。 因此，对于reqeust的访问代码应该放在Controller里面，比如 &lt;code&gt;$_GET&lt;/code&gt; &lt;code&gt;$_POST&lt;/code&gt; 等。 但仅限于获取用户请求数据，不应该对数据有任何操作或预处理，这些工作应该交由Models来完成。&lt;/li&gt;
&lt;li&gt;调用Models的读方法，获取数据，直接传递给视图，供显示。 当涉及到多个Model时，有关的逻辑应当交给Model来完成。&lt;/li&gt;
&lt;li&gt;调用Models的类方法，对Models进行写操作。&lt;/li&gt;
&lt;li&gt;调用视图渲染函数等，形成对用户Reqeust的Response。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Model设计参考&quot;&gt;&lt;a href=&quot;#Model设计参考&quot; class=&quot;headerlink&quot; title=&quot;Model设计参考&quot;&gt;&lt;/a&gt;Model设计参考&lt;/h2&gt;&lt;p&gt;在MVC中，Model排第一，是有一定暗示的。一是Model是整个架构中，代码量最大，复用程度最高， 也是最体现程序员设计功力的地方。 二是View和Controller相对于Model而言，在实际开发中，复用程度不高，逻辑复杂程度较低。 可以说，Model设计得好，整个MVC就好，应用开发起就顺。&lt;/p&gt;
&lt;p&gt;因此，这一节将以Model为核心，来讲MVC的设计。 实话说，MVC尽管提出了Model View Controller的划分思想，但到了具体实操中，并不是很好把握的。 下面介绍的设计参考，也仅仅是个人在实际项目中的一些体会和想法，仅作参考。 在具体设计中，可以后把握这么几点：&lt;/p&gt;
&lt;h2 id=&quot;Model应当集中整个应用的数据和业务逻辑&quot;&gt;&lt;a href=&quot;#Model应当集中整个应用的数据和业务逻辑&quot; class=&quot;headerlink&quot; title=&quot;Model应当集中整个应用的数据和业务逻辑&quot;&gt;&lt;/a&gt;Model应当集中整个应用的数据和业务逻辑&lt;/h2&gt;&lt;p&gt;应用当中涉及到的所有业务对象都应尽可能抽像成Model。 如，博客系统当中，文章要抽象成Post，评论要抽象成Comment。 而相关的业务逻辑，如发布新文章可以用&lt;br&gt;&lt;code&gt;Post::create()&lt;/code&gt; ，删除评论可以用 &lt;code&gt;Comment::delete()&lt;/code&gt; 。 这样子整个应用就显得很清晰明了。&lt;/p&gt;
&lt;h2 id=&quot;基础Model应当尽可能细化&quot;&gt;&lt;a href=&quot;#基础Model应当尽可能细化&quot; class=&quot;headerlink&quot; title=&quot;基础Model应当尽可能细化&quot;&gt;&lt;/a&gt;基础Model应当尽可能细化&lt;/h2&gt;&lt;p&gt;在一个应用中，特别是对于大型复杂应用，Model间关系可能比较复杂。在构造应用时，特别是基础Model时， 要从足够小的粒度来设计。 此时，就要考虑采取继承、封装等措施了。 比如，一个博客文章Post，一般包含了若干标签，在页上一般写在作者、日期等Post字段的旁边。 从逻辑上来看，把标签作为Post的一个属性，是说得通的。 但是如果把标签作为一个属性像标题、正文等字段一样依附于Post。那么在有的功能上，实现起来是有难度的。 比如，客户要求，当一个Post含有标签 “yii, model” 时，可以点击 “yii” ， 然后系统列出所有具标签中含有 “yii” 的文章。&lt;/p&gt;
&lt;p&gt;为了实现这个功能，正确的设计是单独将标签抽象成Tag。这样，Post和Tag是多对多的关系， 即一个Post有多个Tag，一个Tag也对应多个Post。这个多对多关系可以通过一张数据表 &lt;code&gt;tbl_post_tag&lt;/code&gt; 来表示。 接下来，为Post增加 &lt;code&gt;Post::getTags()&lt;/code&gt; 方法，并通过 &lt;code&gt;tbl_post_tag&lt;/code&gt; 表来查询当前Post的所有标签。 同时，为Tag增加 &lt;code&gt;Tag::getPosts()&lt;/code&gt; 方法，也通过 &lt;code&gt;tbl_post_tag&lt;/code&gt; 表来查询当前Tag对应的文章。 这样，就具备了实现客户要求的新功能的基础。&lt;/p&gt;
&lt;p&gt;因此，在Model设计上，要以尽量小的粒度进行设计。一般而言，粒度越小，复用的可能性就越高。&lt;/p&gt;
&lt;p&gt;有的读者可能会问了，既然要求粒度尽可能地小，那么，Post是不是也应当再细化，把段落抽象为Model？ 是否有这个必要，看客户需求。一般情况确实没有这必要，如果这么做，那是不是再以句子为单位进行抽象？ 但如果客户要求这个博客系统的评论是针对段落进行的评论的， 要将评论显示在对应的段落旁边，甚至显示每个段落评论人次等功能。那么就需要把段落抽象成Model了。&lt;/p&gt;
&lt;h2 id=&quot;分层次设计Model&quot;&gt;&lt;a href=&quot;#分层次设计Model&quot; class=&quot;headerlink&quot; title=&quot;分层次设计Model&quot;&gt;&lt;/a&gt;分层次设计Model&lt;/h2&gt;&lt;p&gt;从设计流程上，数据库结构设计与Model的设计是紧密相关的。先有数据库结构设计，后有Model设计。 在设计数据库结构的时候，也是在设计Model。 一般而言，最单元、粒度最小的Model就是根据每个数据库表所生成的Model，这往往是个Active Record。&lt;/p&gt;
&lt;p&gt;比如标签的问题，在数据库存储过程中，Post和Tag是分开存的，而且这两个表的字段，没有冗余。 &lt;code&gt;tbl_post_tag&lt;/code&gt; 表也只记录他们的ID，没有实质内容。&lt;/p&gt;
&lt;p&gt;在获取数据渲染视图，向用户展现时，这两个Model及他们的字段，是完全够用，且没有冗余的。&lt;/p&gt;
&lt;p&gt;那么，能不能说 Post 和 Tag 这两个Model是够用的呢？显然还不够。&lt;/p&gt;
&lt;p&gt;当用户在创建文章、修改文章、审核文章时，需要采用一个表单来显示来收集用户输入。 其中，对于标签的采集，一般是一个长条的文本框，让用户一次性输入多个标签，并以&lt;code&gt;,&lt;/code&gt; 等进行分隔的。&lt;/p&gt;
&lt;p&gt;但是，这个文本框没有一个字段与之进行对应。我们也没办法对这个字段的用户输入进行任何的验证、预处理。&lt;/p&gt;
&lt;p&gt;因此，Post的功能是不够用的。不够用怎么办？那就加吧。但直接在 Post 里面加个 &lt;code&gt;public $tagString&lt;/code&gt; 并不好。 毕竟只是在使用表单时，才会有这个问题，其他场合，这个字段是没用的。&lt;/p&gt;
&lt;p&gt;这种情况下，一般使用继承:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class PostForm extends Post
{
    public $tagString;

    ... ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，当控制器发现用户在创建、修改、审核文章时，可以使用 PostForm Model来渲染视图了， 而其他场合则仍使用Post。这样就在需要时，增加了一个 &lt;code&gt;tagString&lt;/code&gt; 的字段用于收集用户输入的标签。&lt;/p&gt;
&lt;p&gt;在具体设计过程中，由于Model本身就会包含很多代码，因此，要多使用这继承等手段，把代码组织好。&lt;/p&gt;
&lt;h2 id=&quot;仔细为Model方法命名&quot;&gt;&lt;a href=&quot;#仔细为Model方法命名&quot; class=&quot;headerlink&quot; title=&quot;仔细为Model方法命名&quot;&gt;&lt;/a&gt;仔细为Model方法命名&lt;/h2&gt;&lt;p&gt;由于Model的代码量比较大，又集中了大量的逻辑，因此，会在一个Model中有大量的方法。仍然以Post为例， 会涉及到创建、审核、发布、回收等流程，相关的方法比较多，在命名上要用心。 可能会涉及到的、名字又比较接近的方法就有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getPrevPost()，前一篇文章，用于导航&lt;/li&gt;
&lt;li&gt;getNextPost()，下一篇文章，用于导航&lt;/li&gt;
&lt;li&gt;getRelatedPosts($n = 10)，获取相关的N篇文章，用于相关文章推荐列表&lt;/li&gt;
&lt;li&gt;getPostsOfAuthor($n = 10)，获取同一作者的N篇相关文章，用于作者文章列表&lt;/li&gt;
&lt;li&gt;getLatestPosts($n = 10)，最新的N篇文章，静态方法，用于文章列表或RSS输出&lt;/li&gt;
&lt;li&gt;getHotestPosts($n = 10)，最热门的N篇文章，静态方法，用于热门文章列表&lt;/li&gt;
&lt;li&gt;getPublishPosts($n = -1)，获取已经发布的N篇文章，静态方法，用于文章列表&lt;/li&gt;
&lt;li&gt;getDraftPosts($n = -1)，获取未发布的N篇文章，静态方法，用于作者页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里只是一些获取其他Post的方法，命名比较合理，一看就知道意思。 而且全部写成getter的形式，可以使用读取属性的方式进行访问。&lt;/p&gt;
&lt;p&gt;不单单是在Model方法的命名上要用心， 在变量名、类名、方法名等的命名上，也要养成习惯，形成规律。 不要图一时之快，胡乱起名。否则，出来混，迟早要还的。&lt;/p&gt;
&lt;h2 id=&quot;MVC与前后端的配合&quot;&gt;&lt;a href=&quot;#MVC与前后端的配合&quot; class=&quot;headerlink&quot; title=&quot;MVC与前后端的配合&quot;&gt;&lt;/a&gt;MVC与前后端的配合&lt;/h2&gt;&lt;p&gt;从MVC的起源来讲，是从桌面应用的开发中发展起来的。从本质来讲，这是一种解决问题的思路和办法。 从实践来讲，这是一种久经考验的有效方式。但是如开头我们讲的，Yii更多的是侧重于后端。 对于Web应用而言，包含Yii在内的许多Web开发框架，都是没有办法知道用户的操作，如鼠标、键盘等操作的。 Web应用想要了解用户的操作，只能依靠用户发送Request。 而对于鼠标、键盘等的响应，只能依靠前端技术，如JavaScript等来实现。&lt;/p&gt;
&lt;p&gt;再加上这几年来Web浏览器的功能日臻强大。因此，Web应用开发出现了一个新的发展苗头，就是功能从后端往前端转移。&lt;/p&gt;
&lt;p&gt;在前端，通过JavaScript捕获用户操作，进行相应处理。 或是发送回后端获取响应后处理，如通过ajax请求后端数据，实现无刷新的局部页面更新，向用户进行反馈； 或直接在前端由浏览器进行处理，如使用backbone.js、Angular.js等前端框架的数据绑定功能等。 这些都使得Web应用表现得越来越像桌面应用。&lt;/p&gt;
&lt;p&gt;后端MVC也在为前后端的发展而改变。 Controller的功能更多的变成了识别是ajax请求还是普通请求， 并根据请求的不同采取相应的视图渲染方式。对于普通请求，正常渲染视图，输出HTML。 对于ajax请求，则返回局部渲染视图，输出HTML片段。有的甚至输出XML或者JSON。 唯一在大潮流中，巍然不动的，还是我们的大Model。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.digpage.com/mvc.html&quot; title=&quot; 参考链接&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;MVC是一种设计模式（Design pattern），也就是一种解决问题的方法和思路， 是上世纪80年代提出的，到现在已经颇有历史了
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="MVC" scheme="http://isunman.com/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>Discuz因图片分辨率过高造成提示“没有合法的文件被上传”的解决方案</title>
    <link href="http://isunman.com/2018/05/25/Discuz-has-a-solution-that-prompts-no-legal-files-are-uploaded-due-to-high-image-resolution/"/>
    <id>http://isunman.com/2018/05/25/Discuz-has-a-solution-that-prompts-no-legal-files-are-uploaded-due-to-high-image-resolution/</id>
    <published>2018-05-25T05:01:52.563Z</published>
    <updated>2018-05-25T05:01:52.500Z</updated>
    
    <content type="html">&lt;p&gt;用相机拍的照片的分辨率是特别高的，分辨率达到3000*5000px以上级别，这么高的图片的品质肯定是杠杠的，但在网页上面来讲确实太大了，因为我们普通的网页也用不着展示这么高清这么大的图片。我觉得原因有二：一是因为我们普通的网页确实不需要这么大的；二是这么大的图片通常有好几兆甚至十几兆大小，这样页面的加载速度回很慢的。&lt;/p&gt;
&lt;p&gt;我们在Discuz中遇到一个问题，那就是上传某些图片的时候提示“没有合法的文件被上传”，而不是说您上传的文件太大了。想到不合法通常会想到的是图片的格式不对，不是普通的jpg或者png之类的，而是其他的非主流的图片格式。但不管把这样的图片转变成png还是jpg都不能上传，但吧图片一缩小却是可以上传的。这样不就是因为文件大小的问题么？（越大一般来讲文件体积也越大）。但检查后发现文件体积并没有超过网站限制以及对应服务器的php配置。用相机拍的照片的分辨率是特别高的，分辨率达到3000*5000px以上级别，这么高的图片的品质肯定是杠杠的，但在网页上面来讲确实太大了，因为我们普通的网页也用不着展示这么高清这么大的图片。我觉得原因有二：一是因为我们普通的网页确实不需要这么大的；二是这么大的图片通常有好几兆甚至十几兆大小，这样页面的加载速度回很慢的。&lt;/p&gt;
&lt;p&gt;我们在Discuz中遇到一个问题，那就是上传某些图片的时候提示“没有合法的文件被上传”，而不是说您上传的文件太大了。想到不合法通常会想到的是图片的格式不对，不是普通的jpg或者png之类的，而是其他的非主流的图片格式。但不管把这样的图片转变成png还是jpg都不能上传，但吧图片一缩小却是可以上传的。这样不就是因为文件大小的问题么？（越大一般来讲文件体积也越大）。但检查后发现文件体积并没有超过网站限制以及对应服务器的&lt;/p&gt;
&lt;h3 id=&quot;php配置&quot;&gt;&lt;a href=&quot;#php配置&quot; class=&quot;headerlink&quot; title=&quot;php配置&quot;&gt;&lt;/a&gt;php配置&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function get_image_info($target, $allowswf = false) {
    $ext = discuz_upload::fileext($target);
    $isimage = discuz_upload::is_image_ext($ext);
    if(!$isimage &amp;amp;&amp;amp; ($ext != &amp;apos;swf&amp;apos; || !$allowswf)) {
        return false;
    } elseif(!is_readable($target)) {
        return false;
    } elseif($imageinfo = @getimagesize($target)) {
        list($width, $height, $type) = !empty($imageinfo) ? $imageinfo : array(&amp;apos;&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;&amp;apos;);
        $size = $width * $height;
        if($size &amp;gt; 16777216 || $size &amp;lt; 16 ) {
            return false;
        } elseif($ext == &amp;apos;swf&amp;apos; &amp;amp;&amp;amp; $type != 4 &amp;amp;&amp;amp; $type != 13) {
            return false;
        } elseif($isimage &amp;amp;&amp;amp; !in_array($type, array(1,2,3,6,13))) {
            return false;
        } elseif(!$allowswf &amp;amp;&amp;amp; ($ext == &amp;apos;swf&amp;apos; || $type == 4 || $type == 13)) {
            return false;
        }
        return $imageinfo;
    } else {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个方法就是获取图片的信息，而返回的值就是真或者假，而为假的时候就提示非法，为真的时候验证通过，上传流程正常执行。而其中就有一个$size变量，它的值是通过获取图片的长宽，然后长宽乘积得到，默认是16777216，开根之后是4096，也就是超过4096×4096px的图片就会之前的报错。而开始的时候我们上传的是5000*4000=2000000，这个值是大于设定的临界的，于是就返回flase。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.muquan.net/article/390.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;用相机拍的照片的分辨率是特别高的，分辨率达到3000*5000px以上级别，这么高的图片的品质肯定是杠杠的，但在网页上面来讲确实太大了，因为我们普通的网页也用不着展示这么高清这么大的图片。我觉得原因有二：一是因为我们普通的网页确实不需要这么大的；二是这么大的图片通常有好几兆
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Discuz" scheme="http://isunman.com/tags/discuz/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>linux定时任务精确到秒</title>
    <link href="http://isunman.com/2018/05/25/Linux-timing-tasks-are-accurate-to-seconds/"/>
    <id>http://isunman.com/2018/05/25/Linux-timing-tasks-are-accurate-to-seconds/</id>
    <published>2018-05-25T04:55:50.226Z</published>
    <updated>2018-05-25T04:55:50.174Z</updated>
    
    <content type="html">&lt;p&gt;linux的crond定时任务只能精确到分，如何才能做到控制到秒呢?答案肯定是明显的，实现的方法也有多种，但本文只介绍一个相对来说比较精确，又方便的写法。&lt;/p&gt;
&lt;h3 id=&quot;使用说明&quot;&gt;&lt;a href=&quot;#使用说明&quot; class=&quot;headerlink&quot; title=&quot;使用说明&quot;&gt;&lt;/a&gt;使用说明&lt;/h3&gt;&lt;p&gt;增加一个普通的定时器脚本de &amp;gt;dateTime.shde&amp;gt;，放于/目录&lt;/p&gt;
&lt;p&gt;此脚本用于打印当前系统时间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
date
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;增加可执行权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod +x /dateTime.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编写定时任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;脚本内容为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*/1 * * * * /dateTime.sh &amp;gt;&amp;gt; /dateTime.log
*/1 * * * * sleep 5 &amp;amp;&amp;amp; /dateTime.sh &amp;gt;&amp;gt; /dateTime.log
*/1 * * * * sleep 10 &amp;amp;&amp;amp; /dateTime.sh &amp;gt;&amp;gt; /dateTime.log
*/1 * * * * sleep 15 &amp;amp;&amp;amp; /dateTime.sh &amp;gt;&amp;gt; /dateTime.log
*/1 * * * * sleep 20 &amp;amp;&amp;amp; /dateTime.sh &amp;gt;&amp;gt; /dateTime.log
...
*/1 * * * * sleep 55 &amp;amp;&amp;amp; /dateTime.sh &amp;gt;&amp;gt; /dateTime.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重新启动crond&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service crond restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序就会每5秒执行一次脚本，并将时间写入/dateTime.log文件中&lt;/p&gt;
&lt;h3 id=&quot;核心&quot;&gt;&lt;a href=&quot;#核心&quot; class=&quot;headerlink&quot; title=&quot;核心&quot;&gt;&lt;/a&gt;核心&lt;/h3&gt;&lt;p&gt;主要是使用linux的sleep控制脚本执行时间&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/dounine/article/details/53357113&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;linux的crond定时任务只能精确到分，如何才能做到控制到秒呢?答案肯定是明显的，实现的方法也有多种，但本文只介绍一个相对来说比较精确，又方便的写法。&lt;/p&gt;
&lt;h3 id=&quot;使用说明&quot;&gt;&lt;a href=&quot;#使用说明&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>php发送get、post请求的6种方法简明总结</title>
    <link href="http://isunman.com/2018/05/25/PHP's-six-ways-to-send-get-and-post-requests-are-a-succinct-summary/"/>
    <id>http://isunman.com/2018/05/25/PHP's-six-ways-to-send-get-and-post-requests-are-a-succinct-summary/</id>
    <published>2018-05-25T04:37:16.668Z</published>
    <updated>2018-05-25T04:37:16.629Z</updated>
    
    <content type="html">&lt;h3 id=&quot;方法1-用file-get-contents-以get方式获取内容：&quot;&gt;&lt;a href=&quot;#方法1-用file-get-contents-以get方式获取内容：&quot; class=&quot;headerlink&quot; title=&quot;方法1: 用file_get_contents 以get方式获取内容：&quot;&gt;&lt;/a&gt;方法1: 用file_get_contents 以get方式获取内容：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$url=&amp;apos;http://www.yongdev.com/&amp;apos;;  
$html = file_get_contents($url);
echo $html;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法2-用fopen打开url-以get方式获取内容：&quot;&gt;&lt;a href=&quot;#方法2-用fopen打开url-以get方式获取内容：&quot; class=&quot;headerlink&quot; title=&quot;方法2: 用fopen打开url, 以get方式获取内容：&quot;&gt;&lt;/a&gt;方法2: 用fopen打开url, 以get方式获取内容：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$fp = fopen($url, &amp;apos;r&amp;apos;);
stream_get_meta_data($fp);
while(!feof($fp)) {
$result .= fgets($fp, 1024);
}
echo &amp;quot;url body: $result&amp;quot;;
fclose($fp);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法3：用file-get-contents函数-以post方式获取url&quot;&gt;&lt;a href=&quot;#方法3：用file-get-contents函数-以post方式获取url&quot; class=&quot;headerlink&quot; title=&quot;方法3：用file_get_contents函数,以post方式获取url&quot;&gt;&lt;/a&gt;方法3：用file_get_contents函数,以post方式获取url&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$data = array (&amp;apos;foo&amp;apos; =&amp;gt; &amp;apos;bar&amp;apos;);
$data = http_build_query($data);

$opts = array (
‘http&amp;apos; =&amp;gt; array (
&amp;apos;method&amp;apos; =&amp;gt; &amp;apos;POST&amp;apos;,
&amp;apos;header&amp;apos;=&amp;gt; &amp;quot;Content-type: application/x-www-form-urlencodedrn&amp;quot;,
&amp;quot;Content-Length: &amp;quot; . strlen($data) . &amp;quot;rn&amp;quot;,
&amp;apos;content&amp;apos; =&amp;gt; $data
)
);

$context = stream_context_create($opts);
$html = file_get_contents(&amp;apos;http://www.yongdev.com/test.html&amp;apos;, false, $context);

echo $html;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法4：用fsockopen函数打开url，以get方式获取完整的数据，包括header和body-fsockopen需要-PHP-ini-中-allow-url-fopen-选项开启&quot;&gt;&lt;a href=&quot;#方法4：用fsockopen函数打开url，以get方式获取完整的数据，包括header和body-fsockopen需要-PHP-ini-中-allow-url-fopen-选项开启&quot; class=&quot;headerlink&quot; title=&quot;方法4：用fsockopen函数打开url，以get方式获取完整的数据，包括header和body,fsockopen需要 PHP.ini 中 allow_url_fopen 选项开启&quot;&gt;&lt;/a&gt;方法4：用fsockopen函数打开url，以get方式获取完整的数据，包括header和body,fsockopen需要 PHP.ini 中 allow_url_fopen 选项开启&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function get_url ($url,$cookie=false)
{
$url = parse_url($url);
$query = $url[path].&amp;quot;?&amp;quot;.$url[query];
echo &amp;quot;Query:&amp;quot;.$query;
$fp = fsockopen( $url[host], $url[port]?$url[port]:80 , $errno, $errstr, 30);
if (!$fp) {
return false;
} else {
$request = &amp;quot;GET $query HTTP/1.1rn&amp;quot;;
$request .= &amp;quot;Host: $url[host]rn&amp;quot;;
$request .= &amp;quot;Connection: Closern&amp;quot;;
if($cookie) $request.=&amp;quot;Cookie:  $cookien&amp;quot;;
$request.=&amp;quot;rn&amp;quot;;
fwrite($fp,$request);
while(!@feof($fp)) {
$result .= @fgets($fp, 1024);
}
fclose($fp);
return $result;
}
}
//获取url的html部分，去掉header
function GetUrlHTML($url,$cookie=false)
{
$rowdata = get_url($url,$cookie);
if($rowdata)
{
$body= stristr($rowdata,&amp;quot;rnrn&amp;quot;);
$body=substr($body,4,strlen($body));
return $body;
}

return false;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法5：用fsockopen函数打开url，以POST方式获取完整的数据，包括header和body&quot;&gt;&lt;a href=&quot;#方法5：用fsockopen函数打开url，以POST方式获取完整的数据，包括header和body&quot; class=&quot;headerlink&quot; title=&quot;方法5：用fsockopen函数打开url，以POST方式获取完整的数据，包括header和body&quot;&gt;&lt;/a&gt;方法5：用fsockopen函数打开url，以POST方式获取完整的数据，包括header和body&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function HTTP_Post($URL,$data,$cookie, $referrer=”&amp;quot;)
{

// parsing the given URL
$URL_Info=parse_url($URL);

// Building referrer
if($referrer==&amp;quot;&amp;quot;) // if not given use this script as referrer
$referrer=&amp;quot;111&amp;quot;;

// making string from $data
foreach($data as $key=&amp;gt;$value)
$values[]=&amp;quot;$key=&amp;quot;.urlencode($value);
$data_string=implode(&amp;quot;&amp;amp;&amp;quot;,$values);

// Find out which port is needed – if not given use standard (=80)
if(!isset($URL_Info[&amp;quot;port&amp;quot;]))
$URL_Info[&amp;quot;port&amp;quot;]=80;

// building POST-request:
$request.=&amp;quot;POST &amp;quot;.$URL_Info[&amp;quot;path&amp;quot;].&amp;quot; HTTP/1.1n&amp;quot;;
$request.=&amp;quot;Host: &amp;quot;.$URL_Info[&amp;quot;host&amp;quot;].&amp;quot;n&amp;quot;;
$request.=&amp;quot;Referer: $referern&amp;quot;;
$request.=&amp;quot;Content-type: application/x-www-form-urlencodedn&amp;quot;;
$request.=&amp;quot;Content-length: &amp;quot;.strlen($data_string).&amp;quot;n&amp;quot;;
$request.=&amp;quot;Connection: closen&amp;quot;;

$request.=&amp;quot;Cookie:  $cookien&amp;quot;;

$request.=&amp;quot;n&amp;quot;;
$request.=$data_string.&amp;quot;n&amp;quot;;

$fp = fsockopen($URL_Info[&amp;quot;host&amp;quot;],$URL_Info[&amp;quot;port&amp;quot;]);
fputs($fp, $request);
while(!feof($fp)) {
$result .= fgets($fp, 1024);
}
fclose($fp);

return $result;
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法6-使用curl库，使用curl库之前，可能需要查看一下php-ini是否已经打开了curl扩展&quot;&gt;&lt;a href=&quot;#方法6-使用curl库，使用curl库之前，可能需要查看一下php-ini是否已经打开了curl扩展&quot; class=&quot;headerlink&quot; title=&quot;方法6:使用curl库，使用curl库之前，可能需要查看一下php.ini是否已经打开了curl扩展&quot;&gt;&lt;/a&gt;方法6:使用curl库，使用curl库之前，可能需要查看一下php.ini是否已经打开了curl扩展&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$ch = curl_init();
$timeout = 5;
curl_setopt ($ch, CURLOPT_URL, &amp;apos;http://www.yongdev.com/&amp;apos;);
curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
$file_contents = curl_exec($ch);
curl_close($ch);

echo $file_contents;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说一下实践中遇到的问题：&lt;/p&gt;
&lt;p&gt;使用“方法6的curl方法”过程中时执行特别慢。改为“方法3：用file_get_contents函数,以post方式”后速度快很多。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法1-用file-get-contents-以get方式获取内容：&quot;&gt;&lt;a href=&quot;#方法1-用file-get-contents-以get方式获取内容：&quot; class=&quot;headerlink&quot; title=&quot;方法1: 用file_get_contents 
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解WebService SOAP WSDL</title>
    <link href="http://isunman.com/2017/08/25/thoroughly-understand-the-web-service-soap-wsdl/"/>
    <id>http://isunman.com/2017/08/25/thoroughly-understand-the-web-service-soap-wsdl/</id>
    <published>2017-08-25T12:01:07.565Z</published>
    <updated>2017-08-25T12:01:07.497Z</updated>
    
    <content type="html">&lt;h2 id=&quot;WebServices简介&quot;&gt;&lt;a href=&quot;#WebServices简介&quot; class=&quot;headerlink&quot; title=&quot;WebServices简介&quot;&gt;&lt;/a&gt;WebServices简介&lt;/h2&gt;&lt;p&gt;先给出一个概念 SOA ，即Service Oriented Architecture ，中文一般理解为面向服务的架构，既然说是一种架构的话，所以一般认为 SOA 是包含了运行环境，编程模型，架构风格和相关方法论等在内的一整套新的分布式软件系统构造方法和环境，涵盖服务的整个生命周期。而在 SOA 的架构风格中，服务是最核心的抽象手段。&lt;/p&gt;
&lt;p&gt;SOA 中的服务是构建在一些列基于开放标准的基础之上的，Web 服务定义了如何在异构系统之间实现通信的标准化方法，从而就使得 Web 服务可以跨越运行平台和实现语言，同时也使得 Web 服务成为了实现 SOA 中服务的主要技术。&lt;/p&gt;
&lt;p&gt;至于SOA 的话，太高深的技术，这里不予讨论（嘿嘿），本篇博文只介绍 WebServices 这项技术。&lt;/p&gt;
&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;有没有一种办法可以实现跨应用程序进行通信和跨平台进行通信呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，就是有什么办法可以实现我的应用程序 A 可以和应用程序 B 进行通信呢？&lt;br&gt;或者说是，我用 Java 写的应用程序和用 . Net 开发的应用程序之间进行通信呢？&lt;br&gt;很多时候，上面提到的这些，我们是必须要使用的，比如，一个跨应用程序吧，&lt;br&gt;拿腾讯 QQ 来说吧，我估计每一个人都用过腾讯 QQ 上面的天气预报工具吧 ！ ！ ！&lt;/p&gt;
&lt;p&gt;上面的这个天气预报功能是如何实现的呢？&lt;/p&gt;
&lt;p&gt;有一种办法，那就是腾讯公司放个卫星上天，并且在公司中成立一个气象部门，天天关注于天气，然后每时每刻更新腾讯 QQ 上的这个天气预报信息，确实，这种办法确实行得通，不过，要真这样做的话，估计马化腾也该被踢出去了（哪有这么蠢啊？），那么上面这个是如何实现的呢？&lt;/p&gt;
&lt;p&gt;别急，且听我慢慢道来~~~&lt;/p&gt;
&lt;p&gt;然后，我们再来看看跨平台这个东东又是什么呢？这里主要是拿 . Net 平台和Java 平台来说明例子，假若，有两个公司，每个公司呢都有自己的一个项目，一个公司呢使用 . Net 开发，一个呢，使用 Java 开发，恩，本来呢，这两个是相互独立的，进水不犯河水，但是有一天，突然，这两个公司给合并了，合并后的老总发现，如果把两个项目结合起来将会大大的赚一笔，为此，如何做？因为要把两个项目结合在一起，那么这两个项目之间总应该通通信吧 ！！！可这两个项目又是基于不同的平台，怎么通信呢？麻烦了吧 ！！！而后再看一种情况，就是比如一个公司使用的服务器是 Windows Server 2008，那么它如何和 IT 供应商的UNIX 或者是 Linux 服务器进行连接呢？也很复杂吧 ！！！&lt;/p&gt;
&lt;h2 id=&quot;WebServices特点介绍&quot;&gt;&lt;a href=&quot;#WebServices特点介绍&quot; class=&quot;headerlink&quot; title=&quot;WebServices特点介绍&quot;&gt;&lt;/a&gt;WebServices特点介绍&lt;/h2&gt;&lt;p&gt;WebServices 提供一个建立分布式应用的平台，使得运行在不同操作系统和不同设备上的软件，或者是用不同的程序语言和不同厂商的软件开发工具开发的软件，所有可能的已开发和部署的软件，能够利用这一平台实现分布式计算的目的。WebServices的思想是：使得应用程序也具有 Web 分布式编程模型的松散耦合性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebServices的特点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1），WebServices 是自包含的。即在客户端不需要附加任何软件，只要客户机支持 HTTP 和XML 就 OK 了。&lt;/p&gt;
&lt;p&gt;（2），WebServices 是自我描述的。在客户端和服务端都不需要知道除了请求和响应消息的格式和内容外的任何事。&lt;/p&gt;
&lt;p&gt;（3），WebServices 是跨平台和跨语言的。客户端和服务端均可以在不同的平台和语言环境中实现，同时，不必为了支持 WebServices 而更改现有的代码。&lt;/p&gt;
&lt;p&gt;（4），WebServices 是基于开放和标准的。XML 和 HTTP 是WebServices 的主要技术基础，而 XML 和HTTP 早就成了业内标准了。&lt;/p&gt;
&lt;p&gt;（5），WebServices 是动态的。&lt;/p&gt;
&lt;p&gt;（6），WebServices 是可以组合的。也就是通过一个 WebService 访问另外一个 WebService 来达到组合的目的。通过组合 WebServices 便可以将简单的 WebServices 聚合成为实现更多复杂功能的复杂的服务。&lt;/p&gt;
&lt;p&gt;（7），WebServices 是松散耦合的。它完全解耦了客户端和服务端。&lt;/p&gt;
&lt;p&gt;（8），WebServices 提供编程访问的能力。换句话说，就是可以通过编写程序来访问Web 服务。&lt;/p&gt;
&lt;p&gt;（9），WebServices 是基于经过考验的成熟技术上构建的。比如 XML 和 HTTP。&lt;/p&gt;
&lt;p&gt;（10），WebServices 提供打包现有应用程序的能力。&lt;/p&gt;
&lt;p&gt;（11），WebServices 通过网络进行发布，查找和使用。&lt;/p&gt;
&lt;p&gt;上面这些特点呢，现在不清楚的话，也不用紧，等下还会有详细的说明的 ！！！&lt;/p&gt;
&lt;h2 id=&quot;WebServices到底是什么？&quot;&gt;&lt;a href=&quot;#WebServices到底是什么？&quot; class=&quot;headerlink&quot; title=&quot;WebServices到底是什么？&quot;&gt;&lt;/a&gt;WebServices到底是什么？&lt;/h2&gt;&lt;p&gt;如果简单的说的话，WebServices就是一组函数库，不过这和我们平时概念中的函数库却又有不同，我们平时所使用的函数库要么是自己写的（在自己的应用程序当中写一组函数库），要么是调用底层的 API（操作系统 API 如Win32 API），上面的这两种情况有一个共同点，那就是函数库是位于客户端本地的，比如，您调用 Win32 API的话，就是调用本地操作系统上的函库，而这里提到 Web 服务也是一组函数库这个概念和上面提到的函数库这个概念的区别就在此处，因为 Web服务看做一组函数库的话，那么这组函数库不是位于本地的，而是位于远程机器上（当然也可以是本地机器中）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;何为 Web 服务？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是网络服务，那就是把网络上不知道那个地方的一些函数看做是一组服务，然后我再通过网络就可以使用这些服务。&lt;/p&gt;
&lt;p&gt;关于什么是 Web 服务，上面的说法那是山寨版的，稍微正经一点的说法是：Web 服务是一种部署在 Web 上的对象或者是应用程序组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why WebServices？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么需要使用 WebServices呢？这必须根据 WebServices 的特点以及其优势进行分析了。&lt;/p&gt;
&lt;p&gt;首先，上面呢，也说了，Web服务的话，就是一组网络上的应用程序组件，这样的话，您便可以通过在您的应用程序中使用 Web 服务来将您的应用程序提升到服务层面上来。&lt;br&gt;既然可以看做是一组服务了的话，那么当然就是可以提供给别个（别的应用程序）使用咯。&lt;br&gt;比如，我可以通过 Web 服务来公开一些接口给别个使用，至于这些要不要收费呢？那就看我心情了，前面举了腾讯 QQ 上查询天气的例子，这个例子呢，就可以在这里来做一个解释了，&lt;br&gt;在中国，应该只有一个卫星来进行天气预报的吧？腾讯也不可能为了天气预报而专门放个卫星上天吧？&lt;/p&gt;
&lt;p&gt;可是腾讯 QQ 又确实是可以查询天气的，这里，便可以通过 Web 服务来解决。&lt;br&gt;首先，中国气象局应该是有一个卫星的，气象局根据卫星所返回的结果实时发布全国各地的天气状况，并且将这些天气信息以 Web 服务的形式公开，然后呢，腾讯 QQ 便可以通过这个 Web 服务来访问到天气状况了，再将这些天气状况反馈到 QQ 上就 OK 了。&lt;/p&gt;
&lt;p&gt;然后，上面提到了 Web服务是应用程序组件，既然是组件，那么就可以对这个组件重复的进行使用了，同时可以通过 Web 服务来实现将这个应用程序组件作为一个服务来进行使用，&lt;br&gt;更为强大的是，可以将多个 WebServices组合成为更为强大的 WebServices ，&lt;br&gt;并且是通过互联网哦！！！&lt;br&gt;这也是一大优点啊，&lt;/p&gt;
&lt;p&gt;然后呢，最基本的 WebServices是基于 XML 和 HTTP 的&lt;br&gt;（当然这是最基本的 WebServices ，比如 WebServices 还可以通过 HTTPS 或者是 SMTP 来实现通信），&lt;br&gt;这又有什么好处呢？很明显，XML 和HTTP 这些都已经是标准了，&lt;br&gt;不论你是 Java 平台呢，还是 . Net 平台开发出来的（或者是是使用 Web 服务），既然我是使用 XML 和 HTTP 的话，我才懒得鸟你什么 Java 还是 . Net 呢，我也不管你是 linux 还是 Windows ，这一切都和我 Web 服务无关，我关注的只是通过 HTTP 协议来传输 XML 就 OK 了，&lt;br&gt;至于这些 XML 是如何被服务提供者开发出来的或者这些 XML 是如何被服务请求者使用的，这些都和我无关，这里便可以看出 Web 服务的另一个优势了，那就是跨语言跨平台（实现协同工作），所以可以通过 Web 服务来实现不同应用程序和不同平台之间的通信。&lt;/p&gt;
&lt;p&gt;Web 服务允许独立于实现服务基于的硬件或者是软件平台和编写服务所用的编程语言使用服务，&lt;br&gt;根据上面这两点呢，便可以解决掉最开始提出的使用 Java 开发的应用程序如何和使用 . Net 开发的应用程序之间进行通信这一问题，同时，也可以解决 Linux 或者是UNIX 和 Windows Server 2008 之间进行连接这一问题了。最后就是通过使用不同的 Web 服务，也不管 Web 服务是那种编程语言实现的，&lt;br&gt;我们都可以从不同的平台和操作系统进行访问，从而大大提高了不同应用程序共享数据和应用的能力并且 Web服务提供了构建 SOA 所必须得技术基础。&lt;/p&gt;
&lt;p&gt;从上面可以看出通过 WebServices解决了我们曾经想都不敢想的问题，这么强大的东西为什么不加以好好利用呢？   &lt;/p&gt;
&lt;h2 id=&quot;WebServices体系结构&quot;&gt;&lt;a href=&quot;#WebServices体系结构&quot; class=&quot;headerlink&quot; title=&quot;WebServices体系结构&quot;&gt;&lt;/a&gt;WebServices体系结构&lt;/h2&gt;&lt;p&gt;在Web 服务的体系结构中，涉及到三个角色，一个是 Web 服务提供者，一个是 Web 服务中介者，还有一个就是 Web 服务请求者，同时还涉及到三类动作，即发布，查找，绑定，&lt;/p&gt;
&lt;h3 id=&quot;Web-服务提供者：&quot;&gt;&lt;a href=&quot;#Web-服务提供者：&quot; class=&quot;headerlink&quot; title=&quot;Web 服务提供者：&quot;&gt;&lt;/a&gt;Web 服务提供者：&lt;/h3&gt;&lt;p&gt;可以发布 Web 服务，并且对使用自身服务的请求进行响应，Web 服务的拥有者，它会等待其他的服务或者是应用程序访问自己。&lt;/p&gt;
&lt;h3 id=&quot;Web-服务请求者：&quot;&gt;&lt;a href=&quot;#Web-服务请求者：&quot; class=&quot;headerlink&quot; title=&quot;Web 服务请求者：&quot;&gt;&lt;/a&gt;Web 服务请求者：&lt;/h3&gt;&lt;p&gt;也就是 Web 服务功能的使用者，它通过服务注册中心也就是 Web 服务中介者查找到所需要的服务，再利用 SOAP 消息向 Web 服务提供者发送请求以获得服务。&lt;/p&gt;
&lt;h3 id=&quot;Web-服务中介者：&quot;&gt;&lt;a href=&quot;#Web-服务中介者：&quot; class=&quot;headerlink&quot; title=&quot;Web 服务中介者：&quot;&gt;&lt;/a&gt;Web 服务中介者：&lt;/h3&gt;&lt;p&gt;也称为服务代理，用来注册已经发布的 Web服务提供者，并对其进行分类，同时提供搜索服务，&lt;br&gt;简单来说的话，Web 服务中介者的作用就是把一个 Web 服务请求者和合适的 Web 服务提供者联系在一起，充当一个管理者的角色，一般是通过 UDDI来实现。&lt;/p&gt;
&lt;h3 id=&quot;发布：&quot;&gt;&lt;a href=&quot;#发布：&quot; class=&quot;headerlink&quot; title=&quot;发布：&quot;&gt;&lt;/a&gt;发布：&lt;/h3&gt;&lt;p&gt;通过发布操作，可以使 Web服务提供者向 Web 服务中介者注册自己的功能以及访问的接口。&lt;/p&gt;
&lt;h3 id=&quot;发现（查找）：&quot;&gt;&lt;a href=&quot;#发现（查找）：&quot; class=&quot;headerlink&quot; title=&quot;发现（查找）：&quot;&gt;&lt;/a&gt;发现（查找）：&lt;/h3&gt;&lt;p&gt;使得 Web 服务请求者可以通过 Web 服务中介者来查找到特点的种类的 Web 服务。&lt;/p&gt;
&lt;h3 id=&quot;绑定：&quot;&gt;&lt;a href=&quot;#绑定：&quot; class=&quot;headerlink&quot; title=&quot;绑定：&quot;&gt;&lt;/a&gt;绑定：&lt;/h3&gt;&lt;p&gt;这里就是实现让服务请求者能够使用服务提供者提供的服务了。&lt;/p&gt;
&lt;h2 id=&quot;WebServices三种基本元素之-SOAP&quot;&gt;&lt;a href=&quot;#WebServices三种基本元素之-SOAP&quot; class=&quot;headerlink&quot; title=&quot;WebServices三种基本元素之 SOAP&quot;&gt;&lt;/a&gt;WebServices三种基本元素之 SOAP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;SOAP 即 Simple Object AccessProtocol 也就是简单对象访问协议。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SOAP 呢，其指导理念是“唯一一个没有发明任何新技术的技术”，是一种用于访问 Web 服务的协议。因为 SOAP 基于XML 和 HTTP ，其通过XML 来实现消息描述，然后再通过 HTTP 实现消息传输。&lt;/p&gt;
&lt;p&gt;SOAP 是用于在应用程序之间进行通信的一种通信协议。&lt;/p&gt;
&lt;p&gt;因为是基于 XML 和HTTP 的，所以其独立于语言，独立于平台，并且因为 XML 的扩展性很好，所以基于 XML 的 SOAP 自然扩展性也不差。通过 SOAP 可以非常方便的解决互联网中消息互联互通的需求，其和其他的 Web 服务协议构建起 SOA 应用的技术基础。&lt;br&gt;SOAP 协议的一个重要特点是它独立于底层传输机制，Web 服务应用程序可以根据需要选择自己的数据传输协议，可以在发送消息时来确定相应传输机制。&lt;/p&gt;
&lt;p&gt;由于 HTTP 协议本身的一些特点和局限性，使得当 SOAP 使用HTTP 绑定的 Web 服务并不能满足某些企业应用的需求。比如，HTTP 不是一个可靠传输协议，所以有可能在传输过程中出现问题，然后 HTTP 协议基于Request/Response 模型，也就是说客户端需要在等待响应消息接收完成后才能继续执行，而此时如果响应时间过长呢？基于上面的这些需求，便需要选择合适的传输协议了。关于这方面的内容的话，有点深奥了，有兴趣的可以去看看 IBM 的一些关于这方面内容的介绍。还有一点需要提及一下，那就是 SOAP 是可以绕过防火墙的，将来将会作为 W3C 的标准进行发展。&lt;/p&gt;
&lt;h2 id=&quot;WebServices三种基本元素之-WSDL&quot;&gt;&lt;a href=&quot;#WebServices三种基本元素之-WSDL&quot; class=&quot;headerlink&quot; title=&quot;WebServices三种基本元素之 WSDL&quot;&gt;&lt;/a&gt;WebServices三种基本元素之 WSDL&lt;/h2&gt;&lt;p&gt;WSDL 即Web Services Description Language也就是 Web 服务描述语言。&lt;br&gt;是基于 XML的用于描述 Web 服务以及如何访问 Web 服务的语言。&lt;/p&gt;
&lt;p&gt;服务提供者通过服务描述将所有用于访问 Web服务的规范传送给服务请求者，要实现 Web服务体系结构的松散耦合，服务描述是一个关键，不管是请求者还是服务提供者，通过服务描述便可以不必了解对方的底层平台，编程语言等，&lt;br&gt;服务描述与底层的 SOAP 基础结构相结合，足以封装服务请求者的应用程序和服务提供者的 Web服务之间的这个细节。&lt;/p&gt;
&lt;p&gt;WSDL 描述了 Web服务的三个基本属性：&lt;/p&gt;
&lt;p&gt;（1）服务所提供的操作&lt;/p&gt;
&lt;p&gt;（2）如何访问服务&lt;/p&gt;
&lt;p&gt;（3）服务位于何处（通过 URL 来确定就 OK 了）&lt;/p&gt;
&lt;h2 id=&quot;WebServices三种基本元素之-UDDI&quot;&gt;&lt;a href=&quot;#WebServices三种基本元素之-UDDI&quot; class=&quot;headerlink&quot; title=&quot;WebServices三种基本元素之 UDDI&quot;&gt;&lt;/a&gt;WebServices三种基本元素之 UDDI&lt;/h2&gt;&lt;p&gt;UDDI 即 Universal Description，Discovery and Integration，也就是通用的描述，发现以及整合。WSDL 呢，用来描述了访问特定的 Web 服务的一些相关的信息，可以在互联网上，或者是在企业的不同部门之间，如何来发现我们所需要的 Web 服务呢？&lt;br&gt;而 Web 服务提供商又如何将自己开发的 Web 服务公布到因特网上，这就需要使用到 UDDI了，UDDI的话，是一个跨产业，跨平台的开放性架构，可以帮助 Web 服务提供商在互联网上发布 Web 服务的信息。&lt;/p&gt;
&lt;p&gt;UDDI 呢是一种目录服务，企业可以通过 UDDI 来注册和搜索 Web 服务。&lt;br&gt;简单来时候话，UDDI 就是一个目录，只不过在这个目录中存放的是一些关于 Web 服务的信息而已。并且 UDDI 通过SOAP 进行通讯，构建于 . Net 之上。&lt;/p&gt;
&lt;h2 id=&quot;开发-Web服务的方式&quot;&gt;&lt;a href=&quot;#开发-Web服务的方式&quot; class=&quot;headerlink&quot; title=&quot;开发 Web服务的方式&quot;&gt;&lt;/a&gt;开发 Web服务的方式&lt;/h2&gt;&lt;h3 id=&quot;（1）开发阶段：&quot;&gt;&lt;a href=&quot;#（1）开发阶段：&quot; class=&quot;headerlink&quot; title=&quot;（1）开发阶段：&quot;&gt;&lt;/a&gt;（1）开发阶段：&lt;/h3&gt;&lt;p&gt;实现一个 Web 服务，使这个 Web 服务能响应和接收 SOAP 消息，（这个呢，其实可以通过 Visual Studio 来帮助实现），定义好逻辑模块（这个 Web 服务总要干点事情吧）， 然后再撰写 WSDL 文件（这个呢，开发工具会自动生成的，不需要人工撰写了）&lt;/p&gt;
&lt;h3 id=&quot;（2）部署阶段：&quot;&gt;&lt;a href=&quot;#（2）部署阶段：&quot; class=&quot;headerlink&quot; title=&quot;（2）部署阶段：&quot;&gt;&lt;/a&gt;（2）部署阶段：&lt;/h3&gt;&lt;p&gt;指定 Web 服务的传输协议，将 Web 服务注册到相应服务描述部署文件（这些也是可以由工具来自动完成的）&lt;/p&gt;
&lt;h3 id=&quot;（3）发布阶段：&quot;&gt;&lt;a href=&quot;#（3）发布阶段：&quot; class=&quot;headerlink&quot; title=&quot;（3）发布阶段：&quot;&gt;&lt;/a&gt;（3）发布阶段：&lt;/h3&gt;&lt;p&gt;将 Web 服务的接口和调用的地址公开给客户端调用，常用的发布方式为基于 Web 提供的WSDL 的链接，当然 UDDI 也是一个选择。&lt;/p&gt;
&lt;h2 id=&quot;总结一下-WebServices的优点&quot;&gt;&lt;a href=&quot;#总结一下-WebServices的优点&quot; class=&quot;headerlink&quot; title=&quot;总结一下 WebServices的优点&quot;&gt;&lt;/a&gt;总结一下 WebServices的优点&lt;/h2&gt;&lt;p&gt;其实呢，前面介绍的都是关于 WebServices 的优点，在这里就只是浅要的总结一下了。&lt;/p&gt;
&lt;p&gt;首先，WebServices 是基于 Internet 和异构平台的应用，这样便可以方便的实现通过网络来通信，同时可以实现在不同的平台之间共享数据。&lt;/p&gt;
&lt;p&gt;然后就是，WebServices 是基于 XML 和HTTP 的，也就是基于标准和开放的，基于 XML 的话，扩展性自然好，自然跨语言。&lt;br&gt;基于 HTTP 的话，自然跨平台了。&lt;/p&gt;
&lt;p&gt;最后，再回忆一下 WebServices 是一种应用程序组件吧，这样便可以将 WebServices 重复使用了。&lt;/p&gt;
&lt;h2 id=&quot;谈谈-WebServices-的缺点&quot;&gt;&lt;a href=&quot;#谈谈-WebServices-的缺点&quot; class=&quot;headerlink&quot; title=&quot;谈谈 WebServices 的缺点&quot;&gt;&lt;/a&gt;谈谈 WebServices 的缺点&lt;/h2&gt;&lt;p&gt;首先就是由于 XML 文件的难以解析，所以在使用 Web 服务的时候，会消耗较多的 CPU 和内存资源，而后，SOAP 是基于XML 的，所以在网络传输中传输的是 XML 文件，&lt;br&gt;但是由 XML 文件相比于二进制文件来说，要大很多，自然就会消耗更多的网络资源了。&lt;br&gt;而后，由于通过 WSDL 解耦了Web 服务提供者和请求者，且 SOAP 消息时从发送者向接收者单向传送的，这在一定程度上造成了 WebServices 是一种无状态服务，尽管现在在 . Net 中可以通过 Session 来实现在客户端和服务端共享一些数据，&lt;br&gt;但是单单依靠 Session 来实现客户端和服务端的状态交互也太牵强了吧&lt;/p&gt;
&lt;p&gt;WebServices 在数据绑定上也存在一些缺陷，因为所有的数据在传输中都是使用的 XML 来实现的，因此，需要在二进制数据和 XML 之间进行一个转换（通过序列化和反序列化来实现），&lt;br&gt;而在转换过程中有可能出现语义丢失的情况。&lt;/p&gt;
&lt;p&gt;最后就是 WebServices 的技术要求相对比较高，因为涉及到底层的 HTTP 协议以及SOAP ，WSDL 和UDDL 这三大平台元素，所以学习的曲线也是比较长的，&lt;br&gt;当然，在 . Net 中可以通过 Visual Studio 非常快速和简单的开发和访问一个 Web 服务，&lt;br&gt;但这只限于在简单的使用上，而对于本质的东西，是比较难的。&lt;/p&gt;
&lt;h2 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h2&gt;&lt;p&gt;正如题目所言，是 WebServices 简介，既然是简介的话，那么自然就是以简为目标了，&lt;br&gt;说明一下的是，上面的这篇博文呢，源自前几天做的一个关于 WebServices 的演讲，&lt;br&gt;演讲的 PPT 还存有，有兴趣要的可以留个邮箱的。&lt;/p&gt;
&lt;h2 id=&quot;WebServices-的实战（待续……）&quot;&gt;&lt;a href=&quot;#WebServices-的实战（待续……）&quot; class=&quot;headerlink&quot; title=&quot;WebServices 的实战（待续……）&quot;&gt;&lt;/a&gt;WebServices 的实战（待续……）&lt;/h2&gt;&lt;p&gt;之前基于的语言不同，需要重新调整：需要从.Net环境变为PHP语言，暂时不写，待续。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wenku.baidu.com/view/f87b55f19e31433239689314.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WebServices简介&quot;&gt;&lt;a href=&quot;#WebServices简介&quot; class=&quot;headerlink&quot; title=&quot;WebServices简介&quot;&gt;&lt;/a&gt;WebServices简介&lt;/h2&gt;&lt;p&gt;先给出一个概念 SOA ，即Service Orie
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="SOAP" scheme="http://isunman.com/tags/soap/"/>
    
      <category term="WebService" scheme="http://isunman.com/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>如果你想做个程序员相关的论坛，请三思</title>
    <link href="http://isunman.com/2017/07/21/If-you-want-to-be-a-programmer-related-forum-think-twice/"/>
    <id>http://isunman.com/2017/07/21/If-you-want-to-be-a-programmer-related-forum-think-twice/</id>
    <published>2017-07-21T06:38:31.626Z</published>
    <updated>2017-07-21T06:38:31.575Z</updated>
    
    <content type="html">&lt;p&gt;标题中的“做”有两方面所指：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发：使用某种编程语言实现&lt;/li&gt;
&lt;li&gt;运营：使用某套程序直接搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是哪方面，如果你有做程序员相关论坛的想法，请三思而后行，因为你的竞争对手不是一般的多…. 所以在你行动之前，先了解一下吧！&lt;/p&gt;
&lt;p&gt;下面整理了一些使用 开源 程序搭建的论坛，他们的相似点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“小众”社区，用户大多是程序员&lt;/li&gt;
&lt;li&gt;基于“节点”进行分版&lt;/li&gt;
&lt;li&gt;界面都比较精致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一项的顺序分别是：站点、项目地址、开发语言。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://phphub.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PHPHub - PHP &amp;amp; Laravel 的中文社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/summerblue/phphub5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/summerblue/phphub5&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://flarumone.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlarumOne 官网 中文 Flarum 第一站&lt;/a&gt;    &lt;a href=&quot;https://github.com/flarumone/flarumone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/flarumone/flarumone&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.94cb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Carbon Forum&lt;/a&gt;    &lt;a href=&quot;https://github.com/lincanbin/Carbon-Forum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/lincanbin/Carbon-Forum&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://youbbs.sinaapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;youBBS - u 社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/ego008/youbbs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ego008/youbbs&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://bbs.xiuno.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xiuno BBS&lt;/a&gt;    &lt;a href=&quot;http://git.oschina.net/strwei/xiuno&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://git.oschina.net/strwei/xiuno&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vanillaforums.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vanilla 中文社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/chuck911/vanilla4china&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/chuck911/vanilla4china&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://laravel.so/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel.so - 最新的 Laravel 技巧&lt;/a&gt;    &lt;a href=&quot;https://github.com/laravelso/site&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/laravelso/site&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://getyii.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get√Yii - 致力打造 Yii 中国第一社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/iiyii/getyii&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iiyii/getyii&lt;/a&gt;    &lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://hacpai.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑客派&lt;/a&gt;    &lt;a href=&quot;https://github.com/b3log/symphony&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/b3log/symphony&lt;/a&gt;    &lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://bbs.tomoya.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;朋也社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/tomoya92/pybbs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomoya92/pybbs&lt;/a&gt;    &lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://java-china.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java 中国&lt;/a&gt;    &lt;a href=&quot;https://github.com/junicorn/java-china&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/junicorn/java-china&lt;/a&gt;    &lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://nutz.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nutz 社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/wendal/nutz-book-project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wendal/nutz-book-project&lt;/a&gt;     &lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.html-js.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端乱炖&lt;/a&gt;    &lt;a href=&quot;https://github.com/xinyu198736/htmljs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xinyu198736/htmljs&lt;/a&gt;    &lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 专业中文社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/cnodejs/nodeclub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/cnodejs/nodeclub&lt;/a&gt;    &lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://nodebb.org.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeBB 官方中文社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/NodeBB/NodeBB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/NodeBB/NodeBB&lt;/a&gt;    &lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://meta.discoursecn.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Discourse 中文论坛&lt;/a&gt;    &lt;a href=&quot;https://github.com/discourse/discourse&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/discourse/discourse&lt;/a&gt;    &lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://ruby-china.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby China&lt;/a&gt;    &lt;a href=&quot;https://github.com/ruby-china/ruby-china&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ruby-china/ruby-china&lt;/a&gt;     &lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://studygolang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go 语言中文网    &lt;/a&gt;&lt;a href=&quot;https://github.com/studygolang/studygolang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/studygolang/studygolang&lt;/a&gt;    &lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://golangtc.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Golang 中国&lt;/a&gt;    &lt;a href=&quot;https://github.com/jimmykuu/gopher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jimmykuu/gopher&lt;/a&gt;    &lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://f2e.im/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;F2E - 前端技术社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/PaulGuo/F2E.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/PaulGuo/F2E.im&lt;/a&gt;    &lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://beyoung.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Young 社区&lt;/a&gt;    &lt;a href=&quot;https://github.com/shiyanhui/Young&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/shiyanhui/Young&lt;/a&gt;    &lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;欢迎大家进行补充    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也许每个程序员都有一颗想写论坛的心&lt;/li&gt;
&lt;li&gt;PHP 不愧是世界上最好的编程语言….&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;标题中的“做”有两方面所指：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发：使用某种编程语言实现&lt;/li&gt;
&lt;li&gt;运营：使用某套程序直接搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是哪方面，如果你有做程序员相关论坛的想法，请三思而后行，因为你的竞争对手不是一般的多…. 所以在你行动之前，先了
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="开源" scheme="http://isunman.com/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>推荐三个很赞的英语学习网站</title>
    <link href="http://isunman.com/2017/07/20/recommend-the-three-favorite-english-learning-sites/"/>
    <id>http://isunman.com/2017/07/20/recommend-the-three-favorite-english-learning-sites/</id>
    <published>2017-07-19T16:49:10.994Z</published>
    <updated>2017-07-19T16:49:10.638Z</updated>
    
    <content type="html">&lt;p&gt;很多读者都知道我有在学英语，对英语蠢蠢欲动的同学，纷纷给我留言，问我是怎么学习的？有什么学习渠道、学习技巧之类的么？哪有啊，我也就是随意瞎学，没有任何技巧而言，我总觉得学习哪有那么多所谓的学习技巧、学习捷径，就按部就班默默的坚持就好了。&lt;/p&gt;
&lt;p&gt;但是虽说没什么学习捷径，但是我却发现一些不错的英语学习网站，我自己也亲自试用过，非常好用，所以推荐给大家。&lt;/p&gt;
&lt;h3 id=&quot;1-Lingvist&quot;&gt;&lt;a href=&quot;#1-Lingvist&quot; class=&quot;headerlink&quot; title=&quot;1. Lingvist&quot;&gt;&lt;/a&gt;1. Lingvist&lt;/h3&gt;&lt;p&gt;这个网站其实不只是可以用来学英语，还可以学习其他语言，如西班牙语、法语、俄罗斯语等等，号称学习一门语言只需要 200 小时，不过它牛逼的是号称通过人工智能运算、大数据，推荐最适合你水平的教材，确定你的学习进度，了解你的学习难点，你的每一步动作与习惯，都会影响它的教程，亲身尝试确实很好用，适合各种水平的英语学习者，推荐大家使用。&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&quot;http://lingvist.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lingvist.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-多邻国&quot;&gt;&lt;a href=&quot;#2-多邻国&quot; class=&quot;headerlink&quot; title=&quot;2. 多邻国&quot;&gt;&lt;/a&gt;2. 多邻国&lt;/h3&gt;&lt;p&gt;这个网站只能学习英语和西班牙语，而且一进入网站就看到很醒目的一行字「学习语言，免费永远」，对很多人应该非常有吸引力，这个网站的特色除了免费外，通过游戏化的方式让你学习，让你的学习不那么枯燥，很有趣，让你更容易的坚持下去，也推荐大家尝试下。&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&quot;http://www.duolingo.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.duolingo.cn&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-TED&quot;&gt;&lt;a href=&quot;#3-TED&quot; class=&quot;headerlink&quot; title=&quot;3. TED&quot;&gt;&lt;/a&gt;3. TED&lt;/h3&gt;&lt;p&gt;想要学习的话，上面两个网站就差不多够了，适用不同的人与很多场景了，推荐多了，反而很纠结，但是除了以上两个网站之外，再推荐一个 TED，TED 大家应该都听过吧？是美国的一个非盈利组织，涉及技术、娱乐、设计，TED 演讲都很有质量，是学习英语的绝佳之地，你现在英语水平听不懂也没关系，我一直觉得英语本身其实不难，只不过我们没有这种氛围，没那种感觉，所以我没事就会听下 TED 的演讲，即使听不懂，但是时间长了，我相信自己会有点感觉得的。&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&quot;https://www.ted.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ted.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上就是我推荐给大家的三个不错的英语学习网站，拿去不谢，对了，补充下，他们都有相对应的 App，手机上学习一样方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相信我，学点英语没坏处，任何时候学，都不晚！&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;很多读者都知道我有在学英语，对英语蠢蠢欲动的同学，纷纷给我留言，问我是怎么学习的？有什么学习渠道、学习技巧之类的么？哪有啊，我也就是随意瞎学，没有任何技巧而言，我总觉得学习哪有那么多所谓的学习技巧、学习捷径，就按部就班默默的坚持就好了。&lt;/p&gt;
&lt;p&gt;但是虽说没什么学习捷径
    
    </summary>
    
      <category term="工作学习" scheme="http://isunman.com/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="英语" scheme="http://isunman.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>服务器端周期提醒如何设计</title>
    <link href="http://isunman.com/2017/03/16/server-side-cycle-to-remind-how-to-design/"/>
    <id>http://isunman.com/2017/03/16/server-side-cycle-to-remind-how-to-design/</id>
    <published>2017-03-16T09:04:00.812Z</published>
    <updated>2017-03-16T09:04:00.435Z</updated>
    
    <content type="html">&lt;h2 id=&quot;服务器端周期提醒如何设计&quot;&gt;&lt;a href=&quot;#服务器端周期提醒如何设计&quot; class=&quot;headerlink&quot; title=&quot;服务器端周期提醒如何设计&quot;&gt;&lt;/a&gt;服务器端周期提醒如何设计&lt;/h2&gt;&lt;h4 id=&quot;问：&quot;&gt;&lt;a href=&quot;#问：&quot; class=&quot;headerlink&quot; title=&quot;问：&quot;&gt;&lt;/a&gt;问：&lt;/h4&gt;&lt;p&gt;为了活跃App,运营那边提出需要实现一个提醒功能，大概需求就是到了用户设置的提醒时间，打开APP，方便用户记录。用户可以设置重复的时间，就像闹钟一样，可以自己定义哪几天需要提醒。现在我的困惑是，这个数据库如何设计呢？怎么设计会比较方便且容易扩展，我是打算后台用定时任务去轮询，发现有需要提醒的，然后服务器就发推送通知给APP。&lt;/p&gt;
&lt;h4 id=&quot;答：&quot;&gt;&lt;a href=&quot;#答：&quot; class=&quot;headerlink&quot; title=&quot;答：&quot;&gt;&lt;/a&gt;答：&lt;/h4&gt;&lt;p&gt;因为时间是线性的，设置的再多，其实每次需要执行的下一个时间最多也只有一个。&lt;br&gt;因此可以这进行数据库设计–下一次提醒时间，重复的时间，特定时间。到时间发送通知，然后更新数据库的下一次提醒时间。&lt;/p&gt;
&lt;p&gt;PS：是一种不错的思路，可行性高&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://segmentfault.com/q/1010000006929169&quot; title=&quot;原文链接&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/q/1010000006929169&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务器端周期提醒如何设计&quot;&gt;&lt;a href=&quot;#服务器端周期提醒如何设计&quot; class=&quot;headerlink&quot; title=&quot;服务器端周期提醒如何设计&quot;&gt;&lt;/a&gt;服务器端周期提醒如何设计&lt;/h2&gt;&lt;h4 id=&quot;问：&quot;&gt;&lt;a href=&quot;#问：&quot; class=&quot;
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP与JSON的三点心得</title>
    <link href="http://isunman.com/2017/01/03/php-and-json-three-points-experience-php-and-json-three-experience/"/>
    <id>http://isunman.com/2017/01/03/php-and-json-three-points-experience-php-and-json-three-experience/</id>
    <published>2017-01-03T11:27:05.165Z</published>
    <updated>2017-01-03T11:27:05.094Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1、json-encode处理中文&quot;&gt;&lt;a href=&quot;#1、json-encode处理中文&quot; class=&quot;headerlink&quot; title=&quot;1、json_encode处理中文&quot;&gt;&lt;/a&gt;1、json_encode处理中文&lt;/h3&gt;&lt;p&gt;用PHP的json_encode来处理中文的时候, 中文都会被编码, 变成不可读的, 类似”\u&lt;em&gt;*&lt;/em&gt;”的格式, 还会在一定程度上增加传输的数据量。&lt;br&gt;而在PHP5.4, 这个问题终于得以解决, Json新增了一个选项: JSON_UNESCAPED_UNICODE, 故名思议, 就是说, Json不要编码Unicode，而是现实中文本身。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://php.net/manual/en/function.json-encode.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://php.net/manual/en/function.json-encode.php&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、PHP进行POST提交JSON格式数据做参数&quot;&gt;&lt;a href=&quot;#2、PHP进行POST提交JSON格式数据做参数&quot; class=&quot;headerlink&quot; title=&quot;2、PHP进行POST提交JSON格式数据做参数&quot;&gt;&lt;/a&gt;2、PHP进行POST提交JSON格式数据做参数&lt;/h3&gt;&lt;p&gt;无论是使用curl还是fsockopen，都需要注意：&lt;/p&gt;
&lt;p&gt;‘Content-Type: application/json’&lt;/p&gt;
&lt;p&gt;同时注意不再使用&lt;code&gt;http_build_query&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;看一下&lt;br&gt;&lt;code&gt;http_build_query&lt;/code&gt; 的定义和描述。&lt;/p&gt;
&lt;p&gt;定义：生成 url-encoded 之后的请求字符串。&lt;br&gt;描述：使用给出的关联（或下标）数组生成一个url-encoded请求字符串。参数 formdata 可以是数组或包含属性的对象。一个formdata数组可以是简单的一维结构，也可以是由数组组成的数组（其依次可以包含其它数组）。如果在基础数组中使用了数字下标同时给出了numeric_prefix参数，此参数值将会作为基础数组中的数字下标元素的前缀。这是为了让PHP或其它CGI程序在稍后对数据进行解码时获取合法的变量名。&lt;/p&gt;
&lt;h3 id=&quot;3、PHP处理返回JSON格式的数据&quot;&gt;&lt;a href=&quot;#3、PHP处理返回JSON格式的数据&quot; class=&quot;headerlink&quot; title=&quot;3、PHP处理返回JSON格式的数据&quot;&gt;&lt;/a&gt;3、PHP处理返回JSON格式的数据&lt;/h3&gt;&lt;p&gt;使用 json_decode($return,true);注意后面那个参数“true”，可以输出关联数组。&lt;/p&gt;
&lt;p&gt;直接赋值给变量，即是一个数组。可直接使用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、json-encode处理中文&quot;&gt;&lt;a href=&quot;#1、json-encode处理中文&quot; class=&quot;headerlink&quot; title=&quot;1、json_encode处理中文&quot;&gt;&lt;/a&gt;1、json_encode处理中文&lt;/h3&gt;&lt;p&gt;用PHP的json_
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="JSON" scheme="http://isunman.com/tags/json/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>如何解决秒杀的性能问题和超卖的讨论</title>
    <link href="http://isunman.com/2016/10/22/How-to-solve-the-spike-performance-issues-and-oversold-discussions/"/>
    <id>http://isunman.com/2016/10/22/How-to-solve-the-spike-performance-issues-and-oversold-discussions/</id>
    <published>2016-10-22T08:14:56.612Z</published>
    <updated>2016-10-22T08:14:56.565Z</updated>
    
    <content type="html">&lt;p&gt;最近业务试水电商，接了一个秒杀的活。之前经常看到淘宝的同行们讨论秒杀，讨论电商，这次终于轮到我们自己理论结合实际一次了。&lt;/p&gt;
&lt;p&gt;ps：进入正文前先说一点个人感受，之前看淘宝的ppt感觉都懂了，等到自己出解决方案的时候发现还是有很多想不到的地方其实都没懂，再次验证了“细节是魔鬼”的理论。并且一个人的能力有限，只有大家一起讨论才能想的更周全，更细致。好了，闲话少说，下面进入正文。&lt;/p&gt;
&lt;h2 id=&quot;一、秒杀带来了什么？&quot;&gt;&lt;a href=&quot;#一、秒杀带来了什么？&quot; class=&quot;headerlink&quot; title=&quot;一、秒杀带来了什么？&quot;&gt;&lt;/a&gt;一、秒杀带来了什么？&lt;/h2&gt;&lt;p&gt;秒杀或抢购活动一般会经过【预约】【抢订单】【支付】这3个大环节，而其中【抢订单】这个环节是最考验业务提供方的抗压能力的。&lt;/p&gt;
&lt;p&gt;抢订单环节一般会带来2个问题：&lt;/p&gt;
&lt;h3 id=&quot;1、高并发&quot;&gt;&lt;a href=&quot;#1、高并发&quot; class=&quot;headerlink&quot; title=&quot;1、高并发&quot;&gt;&lt;/a&gt;1、高并发&lt;/h3&gt;&lt;p&gt;比较火热的秒杀在线人数都是10w起的，如此之高的在线人数对于网站架构从前到后都是一种考验。&lt;/p&gt;
&lt;h3 id=&quot;2、超卖&quot;&gt;&lt;a href=&quot;#2、超卖&quot; class=&quot;headerlink&quot; title=&quot;2、超卖&quot;&gt;&lt;/a&gt;2、超卖&lt;/h3&gt;&lt;p&gt;任何商品都会有数量上限，如何避免成功下订单买到商品的人数不超过商品数量的上限，这是每个抢购活动都要面临的难题。&lt;/p&gt;
&lt;h2 id=&quot;二、如何解决？&quot;&gt;&lt;a href=&quot;#二、如何解决？&quot; class=&quot;headerlink&quot; title=&quot;二、如何解决？&quot;&gt;&lt;/a&gt;二、如何解决？&lt;/h2&gt;&lt;p&gt;首先，产品解决方案我们就不予讨论了。我们只讨论技术解决方案&lt;/p&gt;
&lt;h3 id=&quot;1、前端&quot;&gt;&lt;a href=&quot;#1、前端&quot; class=&quot;headerlink&quot; title=&quot;1、前端&quot;&gt;&lt;/a&gt;1、前端&lt;/h3&gt;&lt;p&gt;面对高并发的抢购活动，前端常用的三板斧是【扩容】【静态化】【限流】&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;A：扩容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　加机器，这是最简单的方法，通过增加前端池的整体承载量来抗峰值。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;B：静态化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　将活动页面上的所有可以静态的元素全部静态化，并尽量减少动态元素。通过CDN来抗峰值。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;C：限流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　一般都会采用IP级别的限流，即针对某一个IP，限制单位时间内发起请求数量。&lt;/p&gt;
&lt;p&gt;　　或者活动入口的时候增加游戏或者问题环节进行消峰操作。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;D：有损服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　最后一招，在接近前端池承载能力的水位上限的时候，随机拒绝部分请求来保护活动整体的可用性。&lt;/p&gt;
&lt;h3 id=&quot;2、后端&quot;&gt;&lt;a href=&quot;#2、后端&quot; class=&quot;headerlink&quot; title=&quot;2、后端&quot;&gt;&lt;/a&gt;2、后端&lt;/h3&gt;&lt;p&gt;那么后端的数据库在高并发和超卖下会遇到什么问题呢？主要会有如下3个问题：（主要讨论写的问题，读的问题通过增加cache可以很容易的解决）&lt;/p&gt;
&lt;p&gt;　　I：　首先MySQL自身对于高并发的处理性能就会出现问题，一般来说，MySQL的处理性能会随着并发thread上升而上升，但是到了一定的并发度之后会出现明显的拐点，之后一路下降，最终甚至会比单thread的性能还要差。&lt;/p&gt;
&lt;p&gt;　　II： 其次，超卖的根结在于减库存操作是一个事务操作，需要先select，然后insert，最后update -1。最后这个-1操作是不能出现负数的，但是当多用户在有库存的情况下并发操作，出现负数这是无法避免的。&lt;/p&gt;
&lt;p&gt;　　III：最后，当减库存和高并发碰到一起的时候，由于操作的库存数目在同一行，就会出现争抢InnoDB行锁的问题，导致出现互相等待甚至死锁，从而大大降低MySQL的处理性能，最终导致前端页面出现超时异常。&lt;/p&gt;
&lt;p&gt;针对上述问题，如何解决呢？ 我们先看眼淘宝的高大上解决方案：&lt;/p&gt;
&lt;p&gt;　　I：  关闭死锁检测，提高并发处理性能。&lt;/p&gt;
&lt;p&gt;　　II：修改源代码，将排队提到进入引擎层前，降低引擎层面的并发度。&lt;/p&gt;
&lt;p&gt;　　III：组提交，降低server和引擎的交互次数，降低IO消耗。&lt;/p&gt;
&lt;p&gt;以上内容可以参考丁奇在DTCC2013上分享的《秒杀场景下MySQL的低效》一文。在文中所有优化都使用后，TPS在高并发下，从原始的150飙升到8.5w，提升近566倍，非常吓人！！！&lt;/p&gt;
&lt;p&gt;不过结合我们的实际，改源码这种高大上的解决方案显然有那么一点不切实际。于是小伙伴们需要讨论出一种适合我们实际情况的解决方案。以下就是我们讨论的解决方案：&lt;/p&gt;
&lt;p&gt;首先设定一个前提，为了防止超卖现象，所有减库存操作都需要进行一次减后检查，保证减完不能等于负数。（由于MySQL事务的特性，这种方法只能降低超卖的数量，但是不可能完全避免超卖）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;update number set x=x-1 where (x -1 ) &amp;gt;= 0;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;解决方案1：&quot;&gt;&lt;a href=&quot;#解决方案1：&quot; class=&quot;headerlink&quot; title=&quot;解决方案1：&quot;&gt;&lt;/a&gt;解决方案1：&lt;/h4&gt;&lt;p&gt;将存库从MySQL前移到Redis中，所有的写操作放到内存中，由于Redis中不存在锁故不会出现互相等待，并且由于Redis的写性能和读性能都远高于MySQL，这就解决了高并发下的性能问题。然后通过队列等异步手段，将变化的数据异步写入到DB中。&lt;/p&gt;
&lt;p&gt;优点：解决性能问题&lt;/p&gt;
&lt;p&gt;缺点：没有解决超卖问题，同时由于异步写入DB，存在某一时刻DB和Redis中数据不一致的风险。&lt;/p&gt;
&lt;h4 id=&quot;解决方案2：&quot;&gt;&lt;a href=&quot;#解决方案2：&quot; class=&quot;headerlink&quot; title=&quot;解决方案2：&quot;&gt;&lt;/a&gt;解决方案2：&lt;/h4&gt;&lt;p&gt;引入队列，然后将所有写DB操作在单队列中排队，完全串行处理。当达到库存阀值的时候就不在消费队列，并关闭购买功能。这就解决了超卖问题。&lt;/p&gt;
&lt;p&gt;优点：解决超卖问题，略微提升性能。&lt;/p&gt;
&lt;p&gt;缺点：性能受限于队列处理机处理性能和DB的写入性能中最短的那个，另外多商品同时抢购的时候需要准备多条队列。&lt;/p&gt;
&lt;h4 id=&quot;解决方案3：&quot;&gt;&lt;a href=&quot;#解决方案3：&quot; class=&quot;headerlink&quot; title=&quot;解决方案3：&quot;&gt;&lt;/a&gt;解决方案3：&lt;/h4&gt;&lt;p&gt;将写操作前移到MC中，同时利用MC的轻量级的锁机制CAS来实现减库存操作。&lt;/p&gt;
&lt;p&gt;优点：读写在内存中，操作性能快，引入轻量级锁之后可以保证同一时刻只有一个写入成功，解决减库存问题。&lt;/p&gt;
&lt;p&gt;缺点：没有实测，基于CAS的特性不知道高并发下是否会出现大量更新失败？不过加锁之后肯定对并发性能会有影响。&lt;/p&gt;
&lt;h4 id=&quot;解决方案4：&quot;&gt;&lt;a href=&quot;#解决方案4：&quot; class=&quot;headerlink&quot; title=&quot;解决方案4：&quot;&gt;&lt;/a&gt;解决方案4：&lt;/h4&gt;&lt;p&gt;将提交操作变成两段式，先申请后确认。然后利用Redis的原子自增操作（相比较MySQL的自增来说没有空洞），同时利用Redis的事务特性来发号，保证拿到小于等于库存阀值的号的人都可以成功提交订单。然后数据异步更新到DB中。&lt;/p&gt;
&lt;p&gt;优点：解决超卖问题，库存读写都在内存中，故同时解决性能问题。&lt;/p&gt;
&lt;p&gt;缺点：由于异步写入DB，可能存在数据不一致。另可能存在少买，也就是如果拿到号的人不真正下订单，可能库存减为0，但是订单数并没有达到库存阀值。&lt;/p&gt;
&lt;h2 id=&quot;三、总结&quot;&gt;&lt;a href=&quot;#三、总结&quot; class=&quot;headerlink&quot; title=&quot;三、总结&quot;&gt;&lt;/a&gt;三、总结&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、前端三板斧【扩容】【限流】【静态化】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、后端两条路【内存】+【排队】&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、非技术感想&quot;&gt;&lt;a href=&quot;#四、非技术感想&quot; class=&quot;headerlink&quot; title=&quot;四、非技术感想&quot;&gt;&lt;/a&gt;四、非技术感想&lt;/h2&gt;&lt;p&gt;1、团队的力量是无穷的，各种各样的解决方案（先不谈可行性）都是在小伙伴们七嘴八舌中讨论出来的。我们需要让所有人都发出自己的声音，不要着急去否定。&lt;/p&gt;
&lt;p&gt;2、优化需要从整体层面去思考，不要只纠结于自己负责的部分，如果只盯着一个点思考，最后很可能就走进死胡同中了。&lt;/p&gt;
&lt;p&gt;3、有很多东西以为读过了就懂了，其实不然。依然还是需要实践，否则别人的知识永远不可能变成自己的。&lt;/p&gt;
&lt;p&gt;4、多思考为什么，会发生什么，不要想当然。只有这样才能深入进去，而不是留在表面。&lt;/p&gt;
&lt;p&gt;ps：以上仅仅是我们讨论的一些方案设想，欢迎大家一起讨论各种可行方案。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/billyxp/p/3701124.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近业务试水电商，接了一个秒杀的活。之前经常看到淘宝的同行们讨论秒杀，讨论电商，这次终于轮到我们自己理论结合实际一次了。&lt;/p&gt;
&lt;p&gt;ps：进入正文前先说一点个人感受，之前看淘宝的ppt感觉都懂了，等到自己出解决方案的时候发现还是有很多想不到的地方其实都没懂，再次验证了“
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
      <category term="效率" scheme="http://isunman.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>16个小众却很实用的网站（程序员 向）</title>
    <link href="http://isunman.com/2016/10/20/16-niche-is-very-useful-site/"/>
    <id>http://isunman.com/2016/10/20/16-niche-is-very-useful-site/</id>
    <published>2016-10-20T04:33:48.830Z</published>
    <updated>2016-10-20T04:33:48.796Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3个月以前在知乎上回答一个问题【有哪些能集实用，装逼于一身的冷门网站？】得到很多小伙伴的喜爱，一直到现在都还陆陆续续收到大家的赞，谢谢大家。&lt;br&gt;于是，我就想，现在有了专栏，干脆把这个回答写成一篇文章吧，当然肯定不是原封不动的摘抄过来，我会再添加一些比较小众但很实用的网站，希望可以给大家一些参考和帮助。&lt;/p&gt;
&lt;p&gt;以下是我在该问答下的回答，共分享了8个网站：&lt;/p&gt;
&lt;p&gt;啊，看到上面分享了好多比较酷炫的网站，好多都放进我的收藏夹了，(&lt;em&gt;^__^&lt;/em&gt;) 嘻嘻……看的我也忍不住想分享了，因为是IT行业，所以分享几个我收集的比较实用而且酷炫的网站O(∩_∩)O~&lt;/p&gt;
&lt;h3 id=&quot;1-“Hello-World”大全&quot;&gt;&lt;a href=&quot;#1-“Hello-World”大全&quot; class=&quot;headerlink&quot; title=&quot;1.“Hello World”大全&quot;&gt;&lt;/a&gt;1.&lt;a href=&quot;https://netsmell.com/apps/helloworldcollection/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“Hello World”大全&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;网站一共收集了大约481种“Hello World”程序，差不多涵盖了目前已知的所有编程语言，比较有趣好玩，很多语言可能都没有听过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-002.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Font-Awesome-Cheatsheet&quot;&gt;&lt;a href=&quot;#2-Font-Awesome-Cheatsheet&quot; class=&quot;headerlink&quot; title=&quot;2.Font Awesome Cheatsheet&quot;&gt;&lt;/a&gt;2.&lt;a href=&quot;https://fontawesome.io/cheatsheet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Font Awesome Cheatsheet&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Font Awesome图标，不多说，开发和设计都会用到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-003.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-实验楼-国内领先的IT技术实训平台&quot;&gt;&lt;a href=&quot;#3-实验楼-国内领先的IT技术实训平台&quot; class=&quot;headerlink&quot; title=&quot;3.实验楼 - 国内领先的IT技术实训平台&quot;&gt;&lt;/a&gt;3.&lt;a href=&quot;https://www.shiyanlou.com/courses/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验楼 - 国内领先的IT技术实训平台&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个拥有在线开发环境的IT学习网站，各种在线开发环境啊！！各种在线开发环境啊！！各种在线开发环境啊！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-004.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-动画展示各种路径搜索算法&quot;&gt;&lt;a href=&quot;#4-动画展示各种路径搜索算法&quot; class=&quot;headerlink&quot; title=&quot;4.动画展示各种路径搜索算法&quot;&gt;&lt;/a&gt;4.&lt;a href=&quot;http://netsmell.com/post/pathfinding.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动画展示各种路径搜索算法&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我觉得还蛮有趣的，直观的感受路径搜索算法；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-005.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-Most-Exclusive-Website&quot;&gt;&lt;a href=&quot;#5-Most-Exclusive-Website&quot; class=&quot;headerlink&quot; title=&quot;5.Most Exclusive Website&quot;&gt;&lt;/a&gt;5.&lt;a href=&quot;https://mostexclusivewebsite.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Most Exclusive Website&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;网站每次只允许一个人访问，而且只能访问网站60秒,已经有超多人排队了，你可以试试~当然这个可能并不一定实用，但是还觉得蛮好玩的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-006.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-IT-eBooks-Free-Download&quot;&gt;&lt;a href=&quot;#6-IT-eBooks-Free-Download&quot; class=&quot;headerlink&quot; title=&quot;6.IT eBooks - Free Download&quot;&gt;&lt;/a&gt;6.&lt;a href=&quot;https://www.it-ebooks.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IT eBooks - Free Download&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;可以下载IT电子书籍的网站，英文；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-007.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-Collecting-all-the-cheat-sheets&quot;&gt;&lt;a href=&quot;#7-Collecting-all-the-cheat-sheets&quot; class=&quot;headerlink&quot; title=&quot;7.Collecting all the cheat sheets&quot;&gt;&lt;/a&gt;7.&lt;a href=&quot;https://overapi.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Collecting all the cheat sheets&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这个网站可以查询到所有与编程相关的各种技术，并给出详细的知识点；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-008.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;8-DevDocs-API-Documentation&quot;&gt;&lt;a href=&quot;#8-DevDocs-API-Documentation&quot; class=&quot;headerlink&quot; title=&quot;8.DevDocs API Documentation&quot;&gt;&lt;/a&gt;8.&lt;a href=&quot;https://devdocs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevDocs API Documentation&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这是一份综合类的在线API列表，很全，方便查找。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-009.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面再添加一些比较小众，但也比较有趣或者有用的网站。&lt;/p&gt;
&lt;h3 id=&quot;1-GEEKTyper-com&quot;&gt;&lt;a href=&quot;#1-GEEKTyper-com&quot; class=&quot;headerlink&quot; title=&quot;1.GEEKTyper.com&quot;&gt;&lt;/a&gt;1.&lt;a href=&quot;http://geektyper.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GEEKTyper.com&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个在线模拟黑客工作的虚拟桌面系统，提供多种黑客工作的场景，就像是我们在电影里看到的黑客是如何操作电脑和进行代码录入的。伪装成黑客的网站啊，不一定有用但肯定有趣，我想所有程序员都想试试吧，毕竟成为一个黑客还是很酷炫的啊。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-010.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-codewars&quot;&gt;&lt;a href=&quot;#2-codewars&quot; class=&quot;headerlink&quot; title=&quot;2.codewars&quot;&gt;&lt;/a&gt;2.&lt;a href=&quot;http://www.codewars.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codewars&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Codewars是一个刷题网站，使用者可选择所学技术领域不断实战答题挑战，而且它的奖励系统激励程序员们像打游戏升级一样地做习题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-011.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-免费的计算机编程类中文书籍&quot;&gt;&lt;a href=&quot;#3-免费的计算机编程类中文书籍&quot; class=&quot;headerlink&quot; title=&quot;3.免费的计算机编程类中文书籍&quot;&gt;&lt;/a&gt;3.&lt;a href=&quot;https://github.com/justjavac/free-programming-books-zh_CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费的计算机编程类中文书籍&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;其实这个算不上小众，但是我认为非常有用，免费的中文书籍诶，随时可以看，所以也放进来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-012.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里还有英文的：&lt;/p&gt;
&lt;h3 id=&quot;4-free-programming-books&quot;&gt;&lt;a href=&quot;#4-free-programming-books&quot; class=&quot;headerlink&quot; title=&quot;4.free-programming-books&quot;&gt;&lt;/a&gt;4.&lt;a href=&quot;https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;free-programming-books&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;分享了大量免费的编程书籍，比上面分享的中文版的编程书籍要全要多，不过都是英文的；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-013.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-The-World’s-Most-Exclusive-Website&quot;&gt;&lt;a href=&quot;#5-The-World’s-Most-Exclusive-Website&quot; class=&quot;headerlink&quot; title=&quot;5.The World’s Most Exclusive Website&quot;&gt;&lt;/a&gt;5.&lt;a href=&quot;http://www.theworldsmostexclusivewebsite.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The World’s Most Exclusive Website&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个独特神秘的网站。基本上，该网站允许用户访问的级别是基于你在Twitter上的追随者有多少。它一共拥有10个房间。要进入“室1”，你需要是一个经过验证的Twitter用户。要进入“室2”，你需要有至少5000个追随者。级别越高，要求也就越高。也是世界上最容易被破解的。我们技术娴熟的一个读者甚至无需登录Twitter，只花费了不到60秒的时间便查看到该网站的所有页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-014.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-oreilly-Free-Programming-Ebooks&quot;&gt;&lt;a href=&quot;#6-oreilly-Free-Programming-Ebooks&quot; class=&quot;headerlink&quot; title=&quot;6.oreilly Free Programming Ebooks&quot;&gt;&lt;/a&gt;6.&lt;a href=&quot;http://www.oreilly.com/programming/free/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oreilly Free Programming Ebooks&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ORielly 的免费电子书，有需要的童鞋可以免费下载，虽说免费的书籍文章前面已经有过介绍了，但是书籍嘛，还是免费的，是很有用的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-015.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-The-Python-Challenge&quot;&gt;&lt;a href=&quot;#7-The-Python-Challenge&quot; class=&quot;headerlink&quot; title=&quot;7.The Python Challenge&quot;&gt;&lt;/a&gt;7.&lt;a href=&quot;http://www.pythonchallenge.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Python Challenge&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;是一个基于Python语言的闯关挑战游戏，每一关给出一个Python相关的图片，闯关者需要解答问题之后才能跳转到下一个关卡，还蛮有趣的，Python学习者可以看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-016.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;8-Regexper&quot;&gt;&lt;a href=&quot;#8-Regexper&quot; class=&quot;headerlink&quot; title=&quot;8.Regexper&quot;&gt;&lt;/a&gt;8.&lt;a href=&quot;https://regexper.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Regexper&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个正则表达式的可视化开源工具，直接输入正则表达式就能用可视化显示出来，只需要把你的表达式输入进去，就有可视化的图形。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-017.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上了就是我整理的16个相对来说比较小众，但是对程序员来说却有趣或者有用的网站，如果你还有其他相关网站，评论出来啊，我随时更新上来，大家共同学习嘛。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/23005451&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎专栏：IT干货分享&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrl2u.com1.z0.glb.clouddn.com/useful-site-001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3个月以前在知乎上回答一个问题【有哪些能集实用，装逼于一身的冷门网站？】得到很多小伙伴的喜爱，一直到现在都
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="工作" scheme="http://isunman.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="效率" scheme="http://isunman.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>CentOS6.5搭建LNMP</title>
    <link href="http://isunman.com/2016/08/17/centos6.5-build-lnmp/"/>
    <id>http://isunman.com/2016/08/17/centos6.5-build-lnmp/</id>
    <published>2016-08-17T11:31:13.639Z</published>
    <updated>2016-08-17T11:31:13.574Z</updated>
    
    <content type="html">&lt;p&gt;CentOS6.5搭建LNMP  &lt;/p&gt;
&lt;h3 id=&quot;1：查看环境：&quot;&gt;&lt;a href=&quot;#1：查看环境：&quot; class=&quot;headerlink&quot; title=&quot;1：查看环境：&quot;&gt;&lt;/a&gt;1：查看环境：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@10-4-14-168 html]# cat /etc/redhat-release
CentOS release 6.5 (Final)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2：关掉防火墙&quot;&gt;&lt;a href=&quot;#2：关掉防火墙&quot; class=&quot;headerlink&quot; title=&quot;2：关掉防火墙&quot;&gt;&lt;/a&gt;2：关掉防火墙&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@10-4-14-168 html]# chkconfig iptables off
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3：配置CentOS-6-0-第三方yum源（CentOS默认的标准源里没有nginx软件包）&quot;&gt;&lt;a href=&quot;#3：配置CentOS-6-0-第三方yum源（CentOS默认的标准源里没有nginx软件包）&quot; class=&quot;headerlink&quot; title=&quot;3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）&quot;&gt;&lt;/a&gt;3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#wget http://www.atomicorp.com/installers/atomic
#sh ./atomic
#yum check-update
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4：安装开发包和库文件&quot;&gt;&lt;a href=&quot;#4：安装开发包和库文件&quot; class=&quot;headerlink&quot; title=&quot;4：安装开发包和库文件　&quot;&gt;&lt;/a&gt;4：安装开发包和库文件　&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng
libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel
gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2
libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5：卸载已安装的apache、mysql、php&quot;&gt;&lt;a href=&quot;#5：卸载已安装的apache、mysql、php&quot; class=&quot;headerlink&quot; title=&quot;5：卸载已安装的apache、mysql、php&quot;&gt;&lt;/a&gt;5：卸载已安装的apache、mysql、php&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# yum remove httpd
# yum remove mysql
# yum remove php
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6：安装nginx&quot;&gt;&lt;a href=&quot;#6：安装nginx&quot; class=&quot;headerlink&quot; title=&quot;6：安装nginx&quot;&gt;&lt;/a&gt;6：安装nginx&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# yum install nginx
# service nginx start
# chkconfig --levels 235 nginx on
//设2、3、5级别开机启动
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;7：安装mysql&quot;&gt;&lt;a href=&quot;#7：安装mysql&quot; class=&quot;headerlink&quot; title=&quot;7：安装mysql&quot;&gt;&lt;/a&gt;7：安装mysql&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# yum install mysql mysql-server mysql-devel
# service mysqld start
# chkconfig --levels 235 mysqld on
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;登陆MySQL删除空用户，修改root密码&lt;br&gt;    mysql&amp;gt;select user,host,password from mysql.user;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt;drop user &amp;apos;&amp;apos;@localhost;

mysql&amp;gt;update mysql.user set password = PASSWORD(&amp;apos;*********&amp;apos;) where user=&amp;apos;root&amp;apos;;

mysql&amp;gt;flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　&lt;/p&gt;
&lt;h3 id=&quot;8：安装php&quot;&gt;&lt;a href=&quot;#8：安装php&quot; class=&quot;headerlink&quot; title=&quot;8：安装php&quot;&gt;&lt;/a&gt;8：安装php&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap
php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//安装php和所需组件使PHP支持MySQL、FastCGI模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#yum install  php-tidy php-common php-devel php-fpm php-mysql

# service php-fpm start
# chkconfig --levels 235 php-fpm on
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;9：配置nginx支持php&quot;&gt;&lt;a href=&quot;#9：配置nginx支持php&quot; class=&quot;headerlink&quot; title=&quot;9：配置nginx支持php&quot;&gt;&lt;/a&gt;9：配置nginx支持php&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# mv /etc/nginx/nginx.conf /etc/nginx/nginx.confbak
//将配置文件改为备份文件

# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf
//由于原配置文件要自己去写因此可以使用默认的配置文件作为配置文件

//修改nginx配置文件，添加fastcgi支持
# vi /etc/nginx/nginx.conf
index index.php index.html index.htm;
//加入index.php

location ~ \.php$ {
            root           /usr/share/nginx/html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
            include        fastcgi_params;
    }

//将以上代码注释去掉，并修改成nginx默认路径
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;10：配置php&quot;&gt;&lt;a href=&quot;#10：配置php&quot; class=&quot;headerlink&quot; title=&quot;10：配置php&quot;&gt;&lt;/a&gt;10：配置php&lt;/h3&gt;&lt;p&gt;//编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1&lt;br&gt;    [root@CentOS ~]# vi /etc/php.ini&lt;/p&gt;
&lt;h3 id=&quot;11：重启nginx-php-fpm&quot;&gt;&lt;a href=&quot;#11：重启nginx-php-fpm&quot; class=&quot;headerlink&quot; title=&quot;11：重启nginx php-fpm&quot;&gt;&lt;/a&gt;11：重启nginx php-fpm&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# service nginx restart
# service php-fpm restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　&lt;/p&gt;
&lt;h3 id=&quot;12：建立info-php文件&quot;&gt;&lt;a href=&quot;#12：建立info-php文件&quot; class=&quot;headerlink&quot; title=&quot;12：建立info.php文件&quot;&gt;&lt;/a&gt;12：建立info.php文件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# vi /usr/share/nginx/html/info.php

&amp;lt;?php
   phpinfo();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　&lt;/p&gt;
&lt;h3 id=&quot;13：测试nginx是否解析php&quot;&gt;&lt;a href=&quot;#13：测试nginx是否解析php&quot; class=&quot;headerlink&quot; title=&quot;13：测试nginx是否解析php&quot;&gt;&lt;/a&gt;13：测试nginx是否解析php&lt;/h3&gt;&lt;p&gt;本地浏览器输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.1.105/info.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示php界面  环境搭建成功
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS6.5搭建LNMP  &lt;/p&gt;
&lt;h3 id=&quot;1：查看环境：&quot;&gt;&lt;a href=&quot;#1：查看环境：&quot; class=&quot;headerlink&quot; title=&quot;1：查看环境：&quot;&gt;&lt;/a&gt;1：查看环境：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@10-4-14-168
    
    </summary>
    
      <category term="Web构建" scheme="http://isunman.com/categories/web%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
</feed>
