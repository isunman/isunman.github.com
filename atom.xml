<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳侠</title>
  <subtitle>我是一颗恒星</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://isunman.com/"/>
  <updated>2020-07-29T08:33:10.126Z</updated>
  <id>http://isunman.com/</id>
  
  <author>
    <name>isunman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>能写出来的河南话，你会写几个?</title>
    <link href="http://isunman.com/2020/07/29/can-you-write-the-Henan-dialect_P1/"/>
    <id>http://isunman.com/2020/07/29/can-you-write-the-Henan-dialect_P1/</id>
    <published>2020-07-29T08:32:00.000Z</published>
    <updated>2020-07-29T08:33:10.126Z</updated>
    
    <content type="html">&lt;h4 id=&quot;熰&quot;&gt;&lt;a href=&quot;#熰&quot; class=&quot;headerlink&quot; title=&quot;熰&quot;&gt;&lt;/a&gt;熰&lt;/h4&gt;&lt;p&gt;[读音]ǒu&lt;/p&gt;
&lt;p&gt;[释义]烤过度的东西出现碳化的迹象&lt;/p&gt;
&lt;p&gt;[引自]《管子?侈靡篇》古之祭有时而熰。《注》熰，热甚也。&lt;/p&gt;
&lt;p&gt;[举例]火上的东西快拿起来，都烤熰了。&lt;/p&gt;
&lt;h4 id=&quot;熥&quot;&gt;&lt;a href=&quot;#熥&quot; class=&quot;headerlink&quot; title=&quot;熥&quot;&gt;&lt;/a&gt;熥&lt;/h4&gt;&lt;p&gt;[读音]tēng&lt;/p&gt;
&lt;p&gt;[释义]把凉了的物体再加热或烤热&lt;/p&gt;
&lt;p&gt;[引自]《集韻》他東切，音通。以火煖物也。&lt;/p&gt;
&lt;p&gt;[举例]你的衣服湿了，脱下来在火上熥熥。&lt;/p&gt;
&lt;h4 id=&quot;缏&quot;&gt;&lt;a href=&quot;#缏&quot; class=&quot;headerlink&quot; title=&quot;缏&quot;&gt;&lt;/a&gt;缏&lt;/h4&gt;&lt;p&gt;[读音]biǎn&lt;/p&gt;
&lt;p&gt;[释义]卷起衣袖&lt;/p&gt;
&lt;p&gt;[引自]《说文通训定声》缏,缝缉其边曰缏。这里用引申义，因为袖子或裤子挽起的部分很像衣服被缝纫形成的缏。&lt;/p&gt;
&lt;p&gt;[举例]干活就把袖子缏起来，省的弄脏。&lt;/p&gt;
&lt;h4 id=&quot;癔症&quot;&gt;&lt;a href=&quot;#癔症&quot; class=&quot;headerlink&quot; title=&quot;癔症&quot;&gt;&lt;/a&gt;癔症&lt;/h4&gt;&lt;p&gt;[读音]yi zheng&lt;/p&gt;
&lt;p&gt;[释义]走神，发呆，说梦话&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]晚上开车看着点，别发癔症。&lt;/p&gt;
&lt;h4 id=&quot;撧&quot;&gt;&lt;a href=&quot;#撧&quot; class=&quot;headerlink&quot; title=&quot;撧&quot;&gt;&lt;/a&gt;撧&lt;/h4&gt;&lt;p&gt;[读音]字典里读音juē，方言里变音quē&lt;/p&gt;
&lt;p&gt;[释义]古同“绝”，折断；断绝。&lt;/p&gt;
&lt;p&gt;[引自]元?佚名《盆儿鬼》：我待撧枝在头上插。&lt;/p&gt;
&lt;p&gt;[举例]过来把这个树枝撧断了。&lt;/p&gt;
&lt;h4 id=&quot;爒&quot;&gt;&lt;a href=&quot;#爒&quot; class=&quot;headerlink&quot; title=&quot;爒&quot;&gt;&lt;/a&gt;爒&lt;/h4&gt;&lt;p&gt;[读音]liǎo&lt;/p&gt;
&lt;p&gt;[释义]古同「燎」。火烧&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]别靠火那么近，小心把衣服爒了。&lt;/p&gt;
&lt;h4 id=&quot;吃起来可艮gen（食物坚硬而不松脆）&quot;&gt;&lt;a href=&quot;#吃起来可艮gen（食物坚硬而不松脆）&quot; class=&quot;headerlink&quot; title=&quot;吃起来可艮gen（食物坚硬而不松脆）&quot;&gt;&lt;/a&gt;吃起来可艮gen（食物坚硬而不松脆）&lt;/h4&gt;&lt;p&gt;[读音]&lt;/p&gt;
&lt;p&gt;[释义]食物坚硬而不松脆。也指为人特别执拗，过于认真或者行动缓慢。&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]这个萝卜吃起来可艮。你这孩子怎么这么艮不听话。&lt;/p&gt;
&lt;h4 id=&quot;薅&quot;&gt;&lt;a href=&quot;#薅&quot; class=&quot;headerlink&quot; title=&quot;薅&quot;&gt;&lt;/a&gt;薅&lt;/h4&gt;&lt;p&gt;[读音]hāo&lt;/p&gt;
&lt;p&gt;[释义]揪&lt;/p&gt;
&lt;p&gt;[引自]《说文解字》拔去田艸也。&lt;/p&gt;
&lt;p&gt;[举例]你俩打架不要薅头发。&lt;/p&gt;
&lt;h4 id=&quot;冇&quot;&gt;&lt;a href=&quot;#冇&quot; class=&quot;headerlink&quot; title=&quot;冇&quot;&gt;&lt;/a&gt;冇&lt;/h4&gt;&lt;p&gt;[读音]māo（河南地区发音：māo mōu mō mù 均有）&lt;/p&gt;
&lt;p&gt;[释义]没有&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]（粤语中的冇也来自河南话）&lt;/p&gt;
&lt;h4 id=&quot;抪拉&quot;&gt;&lt;a href=&quot;#抪拉&quot; class=&quot;headerlink&quot; title=&quot;抪拉&quot;&gt;&lt;/a&gt;抪拉&lt;/h4&gt;&lt;p&gt;[读音]bu la&lt;/p&gt;
&lt;p&gt;[释义]用手来回拨弄；用手擦。&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]他在朋友进屋前赶紧抪拉了一下桌子上的灰。&lt;/p&gt;
&lt;h4 id=&quot;哕&quot;&gt;&lt;a href=&quot;#哕&quot; class=&quot;headerlink&quot; title=&quot;哕&quot;&gt;&lt;/a&gt;哕&lt;/h4&gt;&lt;p&gt;[读音]yuě&lt;/p&gt;
&lt;p&gt;[释义]呕吐，或要吐而吐不出东西来。&lt;/p&gt;
&lt;p&gt;[引自]明?张自烈《正字通》：方书有物无声曰吐，有声无物曰哕，有声有物曰呕。&lt;/p&gt;
&lt;p&gt;[举例]吃得不舒服，想干哕。&lt;/p&gt;
&lt;h4 id=&quot;搲&quot;&gt;&lt;a href=&quot;#搲&quot; class=&quot;headerlink&quot; title=&quot;搲&quot;&gt;&lt;/a&gt;搲&lt;/h4&gt;&lt;p&gt;[读音]wǎ&lt;/p&gt;
&lt;p&gt;[释义]以手或瓢状舀取。&lt;/p&gt;
&lt;p&gt;[引自]宋?司马光《类篇》：吴俗谓手爬物曰搲。元人杂剧《陈州粜米》第一折：他那边又搲了些米去了。&lt;/p&gt;
&lt;p&gt;[举例]没吃饱，再给我搲点儿米饭。&lt;/p&gt;
&lt;h4 id=&quot;扽&quot;&gt;&lt;a href=&quot;#扽&quot; class=&quot;headerlink&quot; title=&quot;扽&quot;&gt;&lt;/a&gt;扽&lt;/h4&gt;&lt;p&gt;[读音]dèn&lt;/p&gt;
&lt;p&gt;[释义]拉，猛拉，使伸直或平整。&lt;/p&gt;
&lt;p&gt;[引自]清?《康熙字典》：《唐韵》《集韵》都困切，音顿。撼也。又《博雅》引也。一曰摩也。&lt;/p&gt;
&lt;p&gt;[举例]刚洗好的床单太皱，来，跟我一起扽平整。&lt;/p&gt;
&lt;h4 id=&quot;鬻&quot;&gt;&lt;a href=&quot;#鬻&quot; class=&quot;headerlink&quot; title=&quot;鬻&quot;&gt;&lt;/a&gt;鬻&lt;/h4&gt;&lt;p&gt;[读音]yū&lt;/p&gt;
&lt;p&gt;[释义]液体沸腾溢出。&lt;/p&gt;
&lt;p&gt;[引自]宋?《广韵》：鬻，薄没切：说文吹釜溢也。清?《说文解字》段玉裁注：今江苏俗谓火盛水鬻溢出为铺出，鬻之转语也，正当作鬻字。&lt;/p&gt;
&lt;p&gt;[举例]米汤煮得快鬻出来了。&lt;/p&gt;
&lt;h4 id=&quot;醭&quot;&gt;&lt;a href=&quot;#醭&quot; class=&quot;headerlink&quot; title=&quot;醭&quot;&gt;&lt;/a&gt;醭&lt;/h4&gt;&lt;p&gt;[读音]bú&lt;/p&gt;
&lt;p&gt;[释义]酒﹑酱﹑醋等因败坏而生的白霉。亦泛指一切东西受潮而表面出现霉斑。&lt;/p&gt;
&lt;p&gt;[引自]杨万里《风雨》：梅天笔墨都生醭，棐几文书懒拂尘。&lt;/p&gt;
&lt;p&gt;[举例]这个菜赶快放冰箱里面，要不明天就出醭。&lt;/p&gt;
&lt;h4 id=&quot;敹&quot;&gt;&lt;a href=&quot;#敹&quot; class=&quot;headerlink&quot; title=&quot;敹&quot;&gt;&lt;/a&gt;敹&lt;/h4&gt;&lt;p&gt;[读音]liáo&lt;/p&gt;
&lt;p&gt;[释义]粗线缝缀。&lt;/p&gt;
&lt;p&gt;[引自]民国章炳麟《新方言》：凡非绽裂而粗率缝之曰敹。&lt;/p&gt;
&lt;p&gt;[举例]袖口炸线了，给它敹几针就好了。&lt;/p&gt;
&lt;h4 id=&quot;嬎&quot;&gt;&lt;a href=&quot;#嬎&quot; class=&quot;headerlink&quot; title=&quot;嬎&quot;&gt;&lt;/a&gt;嬎&lt;/h4&gt;&lt;p&gt;[读音]fàn&lt;/p&gt;
&lt;p&gt;[释义]禽类下蛋；生子多而整齐划一，也是繁殖的意思。&lt;/p&gt;
&lt;p&gt;[引自]清?《康熙字典》：同娩。息也。清?《说文解字》段玉裁注：谓生子多而如一也。&lt;/p&gt;
&lt;p&gt;[举例]昨晚，他家的老母鸡又嬎了三个鸡蛋。&lt;/p&gt;
&lt;h4 id=&quot;拌&quot;&gt;&lt;a href=&quot;#拌&quot; class=&quot;headerlink&quot; title=&quot;拌&quot;&gt;&lt;/a&gt;拌&lt;/h4&gt;&lt;p&gt;[读音]bǎn&lt;/p&gt;
&lt;p&gt;[释义]扔，丢弃。&lt;/p&gt;
&lt;p&gt;[引自]西汉?杨雄《方言》卷十：拌，弃也。楚凡挥弃物谓之拌。&lt;/p&gt;
&lt;p&gt;[举例]把这些垃圾拌出去。&lt;/p&gt;
&lt;h4 id=&quot;谝&quot;&gt;&lt;a href=&quot;#谝&quot; class=&quot;headerlink&quot; title=&quot;谝&quot;&gt;&lt;/a&gt;谝&lt;/h4&gt;&lt;p&gt;[读音]piǎn&lt;/p&gt;
&lt;p&gt;[释义]炫耀、夸耀或骄傲地显示。&lt;/p&gt;
&lt;p&gt;[引自]东汉?许慎《说文解字》：谝，便巧言也。清?蒲松龄《增补幸云曲》第十六回：这奴才不弹琵琶，光谝他的汗巾子，望我夸他。&lt;/p&gt;
&lt;p&gt;[举例]他买了个戒指，老在我面前谝。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;熰&quot;&gt;&lt;a href=&quot;#熰&quot; class=&quot;headerlink&quot; title=&quot;熰&quot;&gt;&lt;/a&gt;熰&lt;/h4&gt;&lt;p&gt;[读音]ǒu&lt;/p&gt;
&lt;p&gt;[释义]烤过度的东西出现碳化的迹象&lt;/p&gt;
&lt;p&gt;[引自]《管子?侈靡篇》古之祭有时而熰。《注》熰，热甚也。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="文学" scheme="http://isunman.com/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="家乡" scheme="http://isunman.com/tags/%E5%AE%B6%E4%B9%A1/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中文按首字母排序</title>
    <link href="http://isunman.com/2020/07/23/mysql-Chinese-is-sorted-alphabetically/"/>
    <id>http://isunman.com/2020/07/23/mysql-Chinese-is-sorted-alphabetically/</id>
    <published>2020-07-23T03:28:00.000Z</published>
    <updated>2020-07-23T03:33:42.801Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一种分析&quot;&gt;&lt;a href=&quot;#一种分析&quot; class=&quot;headerlink&quot; title=&quot;一种分析&quot;&gt;&lt;/a&gt;一种分析&lt;/h3&gt;&lt;p&gt;项目中有时候会遇到需要按照汉字拼音排序的需求。&lt;/p&gt;
&lt;p&gt;如果要排序的字段编码使用的是GBK字符集，那就可以直接按照拼音排序。因为GBK内码编码时本身就采用了拼音排序的方法（常用一级汉字3755个采用拼音排序，二级汉字就不是了），直接在查询语句后面添加ORDER BY name ASC，查询结果将按照姓氏的升序排序。&lt;/p&gt;
&lt;p&gt;如果存储姓名的字段采用的是utf-8字符集，需要在排序的时候对字段进行转码，对应的代码是ORDER BY convert(name using gbk) ASC，同样，查询的结果也是按照汉字拼音的升序排序。&lt;/p&gt;
&lt;p&gt;怎样才能将编码转化为GBK呢？在MySQL中提供了函数CONVERT() ，该函数可用来获取一个类型的值。该函数的使用方式为 CONVERT(字段 USING GBK)。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table ORDER BY CONVERT(field USING GBK) ASC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果字段的值中包含数字和字母也可以排序，因为数字和字母在gbk字符集中本身就是能排序的，数字&amp;lt;字母&amp;lt;汉字。&lt;/p&gt;
&lt;p&gt;以上亲测有效。&lt;/p&gt;
&lt;h3 id=&quot;另一种分析：&quot;&gt;&lt;a href=&quot;#另一种分析：&quot; class=&quot;headerlink&quot; title=&quot;另一种分析：&quot;&gt;&lt;/a&gt;另一种分析：&lt;/h3&gt;&lt;p&gt;使用MySQL过程中，我们经常会对一个字段进行排序查询，我们一般都是想要按照中文拼音首字母进行依次排序，但mysql中进行中文排序的时候，对汉字的排序结果往往都是错误的。 这种情况在MySQL的很多版本中都存在。&lt;/p&gt;
&lt;p&gt;如果这个问题不解决，那么MySQL将无法实际处理中文。 出现这个问题的原因是因为MySQL在查询字符串时是大小写不敏感的，在编绎MySQL时一般以ISO-8859字符集作为默认的字符集，因此在比较过程中中文编码字符大小写转换造成了这种现象。&lt;/p&gt;
&lt;p&gt;查了资料有两种解决方法：&lt;br&gt;1.对于包含中文的字段加上”binary”属性，使之作为二进制比较，例如将”name varchar(10)”改成”name varchar(10)binary”。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果不想对表结构进行修改或者重新编译MySQL，也可以在查询语句的 order by 部分使用 CONVERT 函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如 name字段为中文，需要按其排序，则可以写select * from mytable order by CONVERT(name USING gbk);
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一种分析&quot;&gt;&lt;a href=&quot;#一种分析&quot; class=&quot;headerlink&quot; title=&quot;一种分析&quot;&gt;&lt;/a&gt;一种分析&lt;/h3&gt;&lt;p&gt;项目中有时候会遇到需要按照汉字拼音排序的需求。&lt;/p&gt;
&lt;p&gt;如果要排序的字段编码使用的是GBK字符集，那就可以直接按照拼音
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CA根证书过期的问题</title>
    <link href="http://isunman.com/2020/06/11/issue-of-ca-root-certificate-expiration/"/>
    <id>http://isunman.com/2020/06/11/issue-of-ca-root-certificate-expiration/</id>
    <published>2020-06-11T07:38:00.000Z</published>
    <updated>2020-06-11T07:46:40.323Z</updated>
    
    <content type="html">&lt;p&gt;上一篇文章提到过PHP的curl函数的证书错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用已知的CA证书进行身份验证”。&lt;/p&gt;
&lt;p&gt;后来采用了在curl函数中不验证证书的临时解决方法。&lt;/p&gt;
&lt;p&gt;虽然问题暂时解决了，但是并没有找到出问题的根本原因，当然也就没有从根本上解决问题。&lt;/p&gt;
&lt;h4 id=&quot;紧接着，后续又出大问题了。&quot;&gt;&lt;a href=&quot;#紧接着，后续又出大问题了。&quot; class=&quot;headerlink&quot; title=&quot;紧接着，后续又出大问题了。&quot;&gt;&lt;/a&gt;紧接着，后续又出大问题了。&lt;/h4&gt;&lt;p&gt;在linux服务器上的crontab中设置的计划任务也不执行了。里面都是使用的wget加https的URL执行的。&lt;br&gt;经核查发现：&lt;/p&gt;
&lt;p&gt;1、crontab的计划任务是在定期执行的，只是没有执行wget+https的URL请求。&lt;/p&gt;
&lt;p&gt;2、上述计划任务中https的URL请求，如果在浏览器执行或postman中执行，都是可以正常执行出结果的。&lt;/p&gt;
&lt;p&gt;所以证明是wget在执行https的请求时出问题了。&lt;/p&gt;
&lt;p&gt;联系亚狐科技的客服，询问他们的SSL证书是不是出问题了。&lt;/p&gt;
&lt;p&gt;回复是，SSL证书本身没有过期，但是颁发SSL证书的CA机构的【根证书】过期了。&lt;/p&gt;
&lt;p&gt;回复原话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是CA证书过期了, 您更新下CA证书即可。证书没问题，有问题的是COMODO的上级证书链。浏览器访问都没问题。我可以发您最新的根证书，您替换旧可以。4月30日后签发的证书就没这个问题了。这个问题是历史问题，没办法避免。这样，我全部更新下，您重新下载可以吧。这个我们会注意这个问题，如果再有类似，我通知您。应该不会再发生了。一般如果只是使用浏览器，不会存在问题。是的，我们接收意见，以后避免再发生此类问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然中间有我的提问没有写出来，这是QQ聊天记录的对方回复的部分内容的合并。&lt;/p&gt;
&lt;p&gt;之后重新颁发了新的SSL证书，然后更新到所有使用该SSL证书的Nginx服务器之后（重启Nginx），crontab的计划任务可以正常执行了。&lt;/p&gt;
&lt;h4 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h4&gt;&lt;p&gt;1、CA的根证书快过期本应该提前处理好的，这个根证书时间应该不是每一年一次的。5年或10年吧，还不确定。&lt;/p&gt;
&lt;p&gt;2、这个CA根证书过期导致的是一些程序的执行命令和系统方法出问题，在浏览器中使用并不会表现出BUG和错误。（目前已发现明显会受影响的就是PHP的CURL函数和Linux的crontab中的wget命令）&lt;/p&gt;
&lt;p&gt;3、当一个问题出现时，必须及时准确地定位到问题的真正和根本原因，并迅速彻底解决；否则，可能会出现更严重的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章提到过PHP的curl函数的证书错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP的curl函数的证书错误 Peer certificate cannot be authenticated</title>
    <link href="http://isunman.com/2020/06/01/peer-certificate-of-php-curl-function-cannot-be-authenticated/"/>
    <id>http://isunman.com/2020/06/01/peer-certificate-of-php-curl-function-cannot-be-authenticated/</id>
    <published>2020-06-01T09:14:00.000Z</published>
    <updated>2020-06-01T09:18:34.390Z</updated>
    
    <content type="html">&lt;p&gt;系统的短信发送突然全部失败了。使用postman工具测试阿里云云通信的短信API可以正常发送。&lt;/p&gt;
&lt;p&gt;经过一番仔细核查，原因已找到，是PHP系统自带的CURL函数中的证书验证问题。&lt;/p&gt;
&lt;p&gt;错误提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用已知的CA证书进行身份验证”。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;curl的设置中加入这样一项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即在请求中“信任任何证书”，不再进行CA证书验证。&lt;/p&gt;
&lt;p&gt;但是至少耽误了一天半的短信发送，只是因为周末和月底，没被发现而已。从2020年05月30日 19:36之后到2020年06月01日10:30之前，都是失败的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;奇怪的就是&lt;/strong&gt;：为什么之前可以用，突然在2020年05月30日晚上失败了，而且是在没有更改任何服务器配置和项目相关代码的情况。后来检测，其他项目中使用相同方法的也失败了。不得不逐一修复。&lt;/p&gt;
&lt;p&gt;关于CURL函数可以参考官网说明&lt;br&gt;&lt;a href=&quot;https://www.php.net/manual/en/function.curl-setopt.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.php.net/manual/en/function.curl-setopt.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下为php curl https ssl 证书相关的设置汇总：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$curl = curl_init();
curl_setopt($curl,CURLOPT_URL,$url);
curl_setopt($curl, CURLOPT_PORT, 443);
curl_setopt($curl, CURLOPT_SSLVERSION, 3);
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); //信任任何证书
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0); // 检查证书中是否设置域名,0不验证
curl_setopt($curl, CURLOPT_VERBOSE, 1); //debug模式
curl_setopt($curl, CURLOPT_SSLCERT, &amp;quot;./keys/client.crt&amp;quot;); //client.crt文件路径
curl_setopt($curl, CURLOPT_SSLCERTPASSWD, &amp;quot;112358&amp;quot;); //client证书密码
curl_setopt($curl, CURLOPT_SSLKEY, &amp;quot;./keys/client.key&amp;quot;);
curl_setopt($curl, CURLOPT_POST, 1);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;所以，在最后总结三点：&lt;/p&gt;
&lt;p&gt;1、怎么能及时地发现问题；（有没有报警机制）&lt;/p&gt;
&lt;p&gt;2、怎么能快速地解决问题；（核查问题的能力）&lt;/p&gt;
&lt;p&gt;3、怎么能避免问题不再发生。（预防可能遇到的坑）
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;系统的短信发送突然全部失败了。使用postman工具测试阿里云云通信的短信API可以正常发送。&lt;/p&gt;
&lt;p&gt;经过一番仔细核查，原因已找到，是PHP系统自带的CURL函数中的证书验证问题。&lt;/p&gt;
&lt;p&gt;错误提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certifica
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="第三方API" scheme="http://isunman.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9api/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统inodes资源耗尽问题</title>
    <link href="http://isunman.com/2020/05/10/linux-system-inodes-resource-depletion-problem/"/>
    <id>http://isunman.com/2020/05/10/linux-system-inodes-resource-depletion-problem/</id>
    <published>2020-05-10T10:33:00.000Z</published>
    <updated>2020-05-10T11:39:51.290Z</updated>
    
    <content type="html">&lt;p&gt;Linux系统inodes资源耗尽问题&lt;/p&gt;
&lt;h3 id=&quot;1-inodes介绍&quot;&gt;&lt;a href=&quot;#1-inodes介绍&quot; class=&quot;headerlink&quot; title=&quot;1 inodes介绍&quot;&gt;&lt;/a&gt;1 inodes介绍&lt;/h3&gt;&lt;p&gt;Linux系统下文件数据储存在”块”中，文件的元信息，例如文件的创建者、文件的创建日期、文件的大小等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。&lt;/p&gt;
&lt;p&gt;inode也占用硬盘空间，硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。&lt;/p&gt;
&lt;p&gt;每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。&lt;/p&gt;
&lt;h3 id=&quot;2-inodes资源耗尽&quot;&gt;&lt;a href=&quot;#2-inodes资源耗尽&quot; class=&quot;headerlink&quot; title=&quot;2 inodes资源耗尽&quot;&gt;&lt;/a&gt;2 inodes资源耗尽&lt;/h3&gt;&lt;p&gt;inodes使用完与存储空间使用完相似，都是创建不了文件或无法正常执行一些命令。inodes使用完，存储空间可能还有，这种情况一般是生成了大量的小文件，把inode table占满。&lt;/p&gt;
&lt;p&gt;一般情况下存储空间使用完，inodes往往才使用百分之几，所以容易忽视对inodes使用情况的监控。&lt;/p&gt;
&lt;p&gt;借用网图来说明inodes用尽，而磁盘空间还未用完的情况：&lt;/p&gt;
&lt;p&gt;查看磁盘空间使用情况，使用df命令&lt;/p&gt;
&lt;p&gt;查看inodess使用情况，使用df -i命令&lt;/p&gt;
&lt;p&gt;上述两个命令可以使用-h参数，命令为df -h和df -hi。从图中看见磁盘空间使用71%，但是inodes使用100%。&lt;/p&gt;
&lt;h3 id=&quot;3-inodes耗尽解决&quot;&gt;&lt;a href=&quot;#3-inodes耗尽解决&quot; class=&quot;headerlink&quot; title=&quot;3 inodes耗尽解决&quot;&gt;&lt;/a&gt;3 inodes耗尽解决&lt;/h3&gt;&lt;p&gt;inodes的大小在磁盘格式化分区时确定，跟分区的大小相关，分区越大，inodes越大，反之亦然。&lt;/p&gt;
&lt;p&gt;linux操作系统根目录一般分区比较小，如果有定时性的小文件产生而又未及时清理，则很容易造成inodes占满。&lt;/p&gt;
&lt;p&gt;inodes占满解决步骤：&lt;/p&gt;
&lt;h4 id=&quot;（1）查看文件最多的目录&quot;&gt;&lt;a href=&quot;#（1）查看文件最多的目录&quot; class=&quot;headerlink&quot; title=&quot;（1）查看文件最多的目录&quot;&gt;&lt;/a&gt;（1）查看文件最多的目录&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;for i in /*; do echo $i; find $i | wc -l; done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果确定目录范围，把/*写的具体点&lt;/p&gt;
&lt;p&gt;最终发现是/var/spool/postfix/maildrop目录下小文件过多，原因如下：&lt;/p&gt;
&lt;p&gt;由于linux在执行cron时，会将cron执行脚本中的output和warning信息，都会以邮件的形式发送给cron所有者。由于客户环境中的sendmail和postfix没有正常运行，邮件发送不成功，导致全部小文件都堆积在maildrop目录下，另由于缺乏自动清理的机制，故此目录下堆积了大量的文件。&lt;/p&gt;
&lt;p&gt;经过排查root用户下发现有个每分钟进行一次时钟同步的定时任务，该定时任务每分钟产生一个小文件。&lt;/p&gt;
&lt;h4 id=&quot;（2）删除大量文件&quot;&gt;&lt;a href=&quot;#（2）删除大量文件&quot; class=&quot;headerlink&quot; title=&quot;（2）删除大量文件&quot;&gt;&lt;/a&gt;（2）删除大量文件&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ls | xargs -n 1000 rm -rf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;需要使用xargs命令，不然会删除失败。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-总结&quot;&gt;&lt;a href=&quot;#4-总结&quot; class=&quot;headerlink&quot; title=&quot;4 总结&quot;&gt;&lt;/a&gt;4 总结&lt;/h3&gt;&lt;h4 id=&quot;（1）设置方面&quot;&gt;&lt;a href=&quot;#（1）设置方面&quot; class=&quot;headerlink&quot; title=&quot;（1）设置方面&quot;&gt;&lt;/a&gt;（1）设置方面&lt;/h4&gt;&lt;p&gt;在crontab -e 第一行增加MAILTO=”” ，就没有文件产生啦&lt;/p&gt;
&lt;h4 id=&quot;（2）重定向&quot;&gt;&lt;a href=&quot;#（2）重定向&quot; class=&quot;headerlink&quot; title=&quot;（2）重定向&quot;&gt;&lt;/a&gt;（2）重定向&lt;/h4&gt;&lt;p&gt;对定时任务设置定向输出文件，不需要日志输出的定时任务可以将日志重定向到/dev/null，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*/10 * * * * /tmp/test.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（3）定时清理文件&quot;&gt;&lt;a href=&quot;#（3）定时清理文件&quot; class=&quot;headerlink&quot; title=&quot;（3）定时清理文件&quot;&gt;&lt;/a&gt;（3）定时清理文件&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;find 目录 -type f -mtime +30 | xargs -n 1000 rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（4）监控inodes的使用&quot;&gt;&lt;a href=&quot;#（4）监控inodes的使用&quot; class=&quot;headerlink&quot; title=&quot;（4）监控inodes的使用&quot;&gt;&lt;/a&gt;（4）监控inodes的使用&lt;/h4&gt;&lt;p&gt;备注：应注意crontab的写法和产生的文件的定时清理&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下来自另一篇文章《查找和删除占用较多Inodes的目录》&lt;/p&gt;
&lt;p&gt;1.df -h 显示磁盘使用未到52%，但 df -i 显示 100%，站点程序提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning: session_start(): open(/tmp/sess_24q39g3sh8viclu4ok8nkl7nt7, O_RDWR) failed: No space left on device
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.先尝试删除/tmp目录的一个或多个临时文件&lt;/p&gt;
&lt;p&gt;3.从少到多，显示目录占用的inodes数量【实测此条实用】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find / -xdev -printf &amp;apos;%h\n&amp;apos; | sort | uniq -c | sort -k 1 -n
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.本例是 /var/spool/clientmqueue/ 目录占用的inodes数量最多&lt;/p&gt;
&lt;p&gt;5.转到相应的目录，且删除该目录下的文件，请谨慎操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/spool/clientmqueue &amp;amp;&amp;amp; ls | xargs rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.再次查看inodes占用情况，降到10%了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统inodes资源耗尽问题&lt;/p&gt;
&lt;h3 id=&quot;1-inodes介绍&quot;&gt;&lt;a href=&quot;#1-inodes介绍&quot; class=&quot;headerlink&quot; title=&quot;1 inodes介绍&quot;&gt;&lt;/a&gt;1 inodes介绍&lt;/h3&gt;&lt;p&gt;Linux系统下文件数
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>Nginx access.log文件太大，自动释放清理</title>
    <link href="http://isunman.com/2020/05/10/the-nginx-accesslog-file-is-too-large-to-clean-up/"/>
    <id>http://isunman.com/2020/05/10/the-nginx-accesslog-file-is-too-large-to-clean-up/</id>
    <published>2020-05-10T10:30:00.000Z</published>
    <updated>2020-05-10T11:39:40.753Z</updated>
    
    <content type="html">&lt;p&gt;Nginx access.log文件太大，自动释放清理&lt;/p&gt;
&lt;p&gt;Nginx在涉及大流量时，会发生非常庞大的日志文件，包含access.log和error.log，日志会随着连接不断增加，到无限大。如果日志文件太大，会导致Nginx运行缓慢，卡顿，也是存储资源的浪费。&lt;/p&gt;
&lt;p&gt;该文件为nginx的访问日志文件可以删除,删除后nginx启动还会产生&lt;br&gt;如果要关闭日志功能,在nginx配置文件中找到access_log一行,改为access_log off;&lt;/p&gt;
&lt;h3 id=&quot;手动释放清理Nginx日志文件access-log&quot;&gt;&lt;a href=&quot;#手动释放清理Nginx日志文件access-log&quot; class=&quot;headerlink&quot; title=&quot;手动释放清理Nginx日志文件access.log&quot;&gt;&lt;/a&gt;手动释放清理Nginx日志文件access.log&lt;/h3&gt;&lt;p&gt;查看并查找相关信息及路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看空间占用
$ df -h

# 定位Nginx
$ which nginx
/usr/local/nginx/logs

# 列出日志文件
$ cd /usr/local/nginx/logs
ls

# 查看日志文件大小
$ du -sh ./*

# 暂停Nginx并删除日志文件
# nginx -s stop
rm -rf *.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意的是，看到网上有人说重启Nginx可以清除日志文件，这是错误的。重启并不会清空日志文件，你需要手动清理。&lt;/p&gt;
&lt;p&gt;另外，你也可以使用覆盖日志的方法清理Nginx日志文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;&amp;quot; &amp;gt; /usr/local/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不需要日志文件就直接关闭（不建议），nginx.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;access_log off; 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;对Nginx-access-log进行分割&quot;&gt;&lt;a href=&quot;#对Nginx-access-log进行分割&quot; class=&quot;headerlink&quot; title=&quot;对Nginx access.log进行分割&quot;&gt;&lt;/a&gt;对Nginx access.log进行分割&lt;/h3&gt;&lt;p&gt;通过shell脚本+linux的定时任务进行的一个平滑切分。不需要重启nginx进程。代码cut_logs.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
log_path=/usr/local/nginx/logs/access.log
save_path=/usr/local/nginx/logs/bak/access_$(date +%Y%m%d -d &amp;apos;yesterday&amp;apos;).log
cp $log_path $save_path &amp;amp;&amp;amp; echo &amp;gt; $log_path
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置定时任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ crontab -e
#输入
0 0  * * * /usr/bin/sh cut_logs.sh #每天的00:00执行日志切分

$ crontab -l #查看定时任务是否添加成功
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx access.log文件太大，自动释放清理&lt;/p&gt;
&lt;p&gt;Nginx在涉及大流量时，会发生非常庞大的日志文件，包含access.log和error.log，日志会随着连接不断增加，到无限大。如果日志文件太大，会导致Nginx运行缓慢，卡顿，也是存储资源的浪费。&lt;
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>梁宁演讲：在产品里修行</title>
    <link href="http://isunman.com/2020/03/25/liang-ning-speech-practice-in-the-product/"/>
    <id>http://isunman.com/2020/03/25/liang-ning-speech-practice-in-the-product/</id>
    <published>2020-03-25T05:39:00.000Z</published>
    <updated>2020-05-10T11:39:19.833Z</updated>
    
    <content type="html">&lt;p&gt;梁宁演讲：在产品里修行&lt;/p&gt;
&lt;p&gt;大家好，我是梁宁，今天我演讲的题目叫做《在产品里修行》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做一个产品就是你的修行，因为在这个过程里，你需要认识这个世界，你需要认识人的弱点。你需要认识你的本性，并且不去挑战它。你需要认识你的合作伙伴的本性，并且知道怎么去做跨文化的交流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##你需要洞察人性并且不去挑战它&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做产品和做运营是两种人格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们在讨论这次课程的时候，说到一个现象：为什么现在优秀的产品经理里面女性很少?&lt;/p&gt;
&lt;p&gt;一个很重要的原因就是大多数女性是容忍度非常高的人。容忍度高的人，其实是做不了好产品的。她很难把别人逼到角落里还要坚持自己主张。&lt;/p&gt;
&lt;p&gt;产品经理最重要的是有创造力。而创造力是自我的延伸，所以创造力强的人都是极端以自我为中心的人，很难照顾别人的感受。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他的自我造就了他对产品的敏感和决不妥协的态度，以及推到一切的创造力。所以我们看到乔布斯其实就是一个绝对自我的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;腾讯里面关于产品还有另外一个岗位，叫做运营经理。运营经理最重要的是控制，控制节奏，控制资源，控制结果。控制其实是自制力的延伸。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你会发现，作为一个人类，你不可能同时具备超强的自我和超强的自制。所以你如果是一个非常好的营销人员，一定不是一个好产品经理，因为他太爱迎合别人，太懂得体贴别人的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##最大的成本就是用错人&lt;/p&gt;
&lt;p&gt;作为一个创业的公司，很重要的一件事就是，你需要和优秀的人建立重度关系，你不能把时间都放在不优秀的人身上。&lt;/p&gt;
&lt;p&gt;如何去发现优秀的人?他们有三个特点，第一个是敏感度高，第二个特点是容忍度低，第三个特点是主动优化。&lt;/p&gt;
&lt;p&gt;1，&lt;strong&gt;敏感度高&lt;/strong&gt;，其实和每个人的天分有关。有的人一眼就看出有问题，而有的人却很难觉察。这个在面试的时候就应该果断判断，因为让一个人做他不擅长的事情，只能带来双方的痛苦和时间浪费。&lt;/p&gt;
&lt;p&gt;2，&lt;strong&gt;容忍度低&lt;/strong&gt;，从某种程度上来件，其实是一种文化的塑造。比如我们的父母，他们都是在一个完全集体主义的环境中成长起来的，所以他们的成长环境决定了他们势必要学会妥协、容忍，差不多就行了。中国制造、中国产品的特征，同样也是这种高容忍度的产物。&lt;/p&gt;
&lt;p&gt;3，&lt;strong&gt;主动优化&lt;/strong&gt;。一个人发现了问题，他是在不停抱怨还是主动优化?这个取决于你和他的沟通和鼓励。&lt;/p&gt;
&lt;p&gt;比如我家很乱，我请了一个阿姨来打扫，但是她第一次来，她肯定得不停地和我沟通，哪些可以扔哪些不能动。但是时间长了以后，你不用多说，她也可以自动优化了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以我们在搭建团队的时候，首先就是你必须快速地察觉他是不是有足够的敏感度，其次，用你的沟通和鼓励让他从一个敏感，容忍度低的人变成一个能够主动优化的人，这是我们搭建一个好的创业团队的关键。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##你对世界的洞察在你的产品之中&lt;/p&gt;
&lt;p&gt;你对于世界的洞察，对于产业的掌控力，其实都在你自己的产品当中。接下来我们说一说对产品的洞察。&lt;/p&gt;
&lt;p&gt;我想分为产品、用户、场景三点来分析。&lt;/p&gt;
&lt;p&gt;你要提供的产品，是你能够持续驾驭的产业链的长度、力度和精准度。&lt;/p&gt;
&lt;h2 id=&quot;产品是你提供服务的能力&quot;&gt;&lt;a href=&quot;#产品是你提供服务的能力&quot; class=&quot;headerlink&quot; title=&quot;产品是你提供服务的能力&quot;&gt;&lt;/a&gt;产品是你提供服务的能力&lt;/h2&gt;&lt;p&gt;先看产品。&lt;strong&gt;产品不是简单的APP界面，而是你提供服务的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我之前做过一个旅游网站，后来被腾讯全资收购，于是有了在腾讯学习工作的三年。在腾讯的内部交流里，没有人谈产品和功能，大家谈的是服务和特性。&lt;/p&gt;
&lt;p&gt;为什么?因为你在谈产品，有可能一个功能扩展起来就是一个产品，比如说评论，对于很多人来讲是一个功能，但是你把它整个运营好，它就是微博。&lt;/p&gt;
&lt;p&gt;所以不谈产品，谈服务，我们关心你提供的到底是一个什么样的服务?&lt;/p&gt;
&lt;p&gt;这种思路就解决了不是以产品经理的个人认知为中心，而是以服务对象的需求和满意度为中心去优化产品、设计服务的问题。&lt;/p&gt;
&lt;h3 id=&quot;真正关键的是产品的隐性特征&quot;&gt;&lt;a href=&quot;#真正关键的是产品的隐性特征&quot; class=&quot;headerlink&quot; title=&quot;真正关键的是产品的隐性特征&quot;&gt;&lt;/a&gt;真正关键的是产品的隐性特征&lt;/h3&gt;&lt;p&gt;我在腾讯学会的第一节产品课是一台ATM机。&lt;/p&gt;
&lt;p&gt;第一个问题，ATM机提供什么服务?取现。第二个问题，ATM机有什么特性?&lt;/p&gt;
&lt;p&gt;一堆的产品控可能跳出来说：屏幕是什么颜色的?是先出卡还是先出钞?能否支持手机扫码取现?&lt;/p&gt;
&lt;p&gt;其实这些都是ATM机的显性特征。那么ATM机的隐性特征是什么?&lt;/p&gt;
&lt;p&gt;大家知道在一台ATM机里面会放现金?一台ATM机基本四个钞箱，一个钞箱是20万现金，四个都装满了是80万。但大多数ATM机会放50万现金在里面。为什么?因为这些放在ATM机的现金是不能产生利息的。&lt;/p&gt;
&lt;p&gt;也就是说，当ATM提供为柜台分流取现压力的同时，它同时也分流了这个企业的核心资源。&lt;/p&gt;
&lt;p&gt;所以如何通过数据统计支持决策，既能为用户提供充足的取现服务，又能避免过多的资金闲置，成为ATM机的隐性特征。&lt;/p&gt;
&lt;p&gt;第三个问题，ATM服务的全流程是什么?&lt;/p&gt;
&lt;p&gt;表面上来看，用户只需要插卡、输入密码，就可以取现。但是从企业角度来看，它至少需要这些流程去支持一台ATM机的正常运转。&lt;/p&gt;
&lt;p&gt;战略部门。它来确定我们为什么需要一台ATM机。&lt;/p&gt;
&lt;p&gt;战略价值分两个：分流柜台窗口的取现压力;在人流多的商场设置ATM机，可以向用户传达品牌亲近感和安心感。&lt;/p&gt;
&lt;p&gt;运营部。用数据分析支持决策：在哪些网点设置ATM机以及放置多少现金。&lt;/p&gt;
&lt;p&gt;运营部四个功能：第一个增撤网点;第二个现金管理，包括现金的回收和放置;此外还需要两个人，一个人管硬件，一个人拿钥匙。&lt;/p&gt;
&lt;p&gt;硬件维护。ATM机的无法打印凭条，断电等等问题的处理。&lt;/p&gt;
&lt;p&gt;客服。取钱吞卡，出钱有误等等问题处理。&lt;/p&gt;
&lt;p&gt;就是说这么一台最简单的产品，它的背后需要至少7个岗位来围绕它工作。&lt;/p&gt;
&lt;p&gt;###结论&lt;/p&gt;
&lt;p&gt;当我们谈起产品，绝大多数人想到的只是APP的界面，但实际上对产品的定义是完整的服务流程，和总体的服务成本。你要提供的产品，是你能够持续驾驭的产业链的长度、力度和精准度。&lt;/p&gt;
&lt;p&gt;什么叫长度?京东的供应链和物流控制能力。&lt;/p&gt;
&lt;p&gt;什么叫力度?比如双十一大战时，天猫向供应商要求，你只能向我供货，我是你的唯一分销商。这就是力度。&lt;/p&gt;
&lt;p&gt;什么是精准度?我重仓压一个什么东西，结果搞错了，这就是精准度的问题。首先去搞清楚，自己要提供的到底是什么服务?&lt;/p&gt;
&lt;p&gt;最后再去想怎么展现，是用APP还是网站还是实体店，这些都只是产品的显性特征和外化模式而已。&lt;/p&gt;
&lt;p&gt;不管是小闲还是笨笨，最后都会转化为笨笨，这里面是一个情绪触发的过程。&lt;/p&gt;
&lt;p&gt;好的产品从精细的用户画像开始&lt;/p&gt;
&lt;h2 id=&quot;第二个，用户。&quot;&gt;&lt;a href=&quot;#第二个，用户。&quot; class=&quot;headerlink&quot; title=&quot;第二个，用户。&quot;&gt;&lt;/a&gt;第二个，用户。&lt;/h2&gt;&lt;p&gt;刚刚我们举的一台ATM机的例子，我们说它是最简答的产品。为什么，因为它是唯一一个不用考虑用户细分的产品。&lt;/p&gt;
&lt;p&gt;但是除了钱之外的任何一个产品，你都需要做用户细分，去研究用户画像。所以大家记住，我们做的东西是一定是远比一台ATM机复杂的产品。&lt;/p&gt;
&lt;p&gt;###三类最简单的用户画像&lt;/p&gt;
&lt;p&gt;关于用户画像，我们从最简单的三个用户说起：&lt;/p&gt;
&lt;p&gt;第一个用户叫“大明“。大明的特点是什么呢?他决定暑假的某一段确定的时间带小孩去新加坡旅游。他要做什么，什么时间做，他非常清楚。&lt;/p&gt;
&lt;p&gt;他对自己所要的东西已经非常清晰了，所以给我硬货，好的配置和好的价格，最快的效率，这就是大明需要的。&lt;/p&gt;
&lt;p&gt;中国最早的电子商务网站，都是服务于大明的。这些网站的共同特点就是大大的搜索框，强大的检索功能，非常快地找到自己要的东西，这对大明来说，就是最好的服务。&lt;/p&gt;
&lt;p&gt;还有一类叫“笨笨”。笨笨什么特点呢?暑假我想出去玩，但是去哪儿呢?欧洲没去过，巴厘岛也没去过，听说新加坡也挺好的，好多人都去日本…然后我去哪儿玩呢，有可能她最后去了漓江，或者她哪儿也没去，就在北京怀柔延庆溜达了一下。&lt;/p&gt;
&lt;p&gt;笨笨的特点就是不知道自己要什么。你给我搜索框，可是我还不知道自己要什么?我需要浏览，我需要逛，可能我花了8个小时逛街，本来要买的裙子没有买，而是买了一把雨伞和几双袜子。&lt;/p&gt;
&lt;p&gt;所以互联网崛起的第二类电商其实是服务于笨笨的。蘑菇街，小红书都是这样的模式，给你充分的浏览，在你的浏览过程中，设计促进购物决策的环节。&lt;/p&gt;
&lt;p&gt;还有一类叫“小闲”。我没有想去旅游，我就是无聊来网上瞎逛。小闲其实就是你我的常态，就是我们的需求没有被触发之前，其实人人都是小闲。&lt;/p&gt;
&lt;p&gt;其实腾讯是一个非常经典的服务小闲的公司，为什么呢?QQ聊天是因为闲，刷微信朋友圈也是因为闲，你在任何一个闲的时候，你只要打开腾讯的产品，都可以足够让你打发时间。&lt;/p&gt;
&lt;p&gt;所以从腾讯的小闲延伸出来，到游戏和视频的转化率就非常高，为什么?因为游戏也好、视频也好，它本质上都是沿着小闲的行为路径，让大家继续打发时间的一个行动。&lt;/p&gt;
&lt;p&gt;这是三种用户的不同的状态。&lt;/p&gt;
&lt;p&gt;不管是“小闲”还是“笨笨”&lt;/p&gt;
&lt;p&gt;最后都会变成“大明”&lt;/p&gt;
&lt;p&gt;从小闲到笨笨到大明，其实这是一个连续的情绪触发的过程。怎么解释，其实当用户的情绪被触发，锁定了他要做什么事情的时候，小闲和笨笨就变成了大明。&lt;/p&gt;
&lt;p&gt;你要服务小闲，你就需要提供一个打发时间的东西，豆瓣、天涯、猫扑、这些社区网站就是这类产品。但是我们看到这类产品向交易导流的效果都不太好，其实就是因为从小闲到大明的转化流程过长。&lt;/p&gt;
&lt;p&gt;笨笨的产品就很典型，比如说美丽说，蘑菇街，我先收藏，收藏了很多以后，我到淘宝上去搜同类，搜到最喜欢的款式以后，我再去比价，找到最便宜的那家，然后购买。&lt;/p&gt;
&lt;p&gt;上面就是一个比较经典的用户从小闲到笨笨到大明的转化过程，其实我们每个人都会有一个情绪被激发和需求变明确的过程。&lt;/p&gt;
&lt;p&gt;但是不管这个用户之前是小闲还是笨笨，是男是女，最后购买的一瞬间一定是变成大明。而搞定大明的唯一的办法就是提供硬货。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景是通过情绪触发和意见挟裹引导用户决策的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;场景是引导用户决策的过程&lt;/p&gt;
&lt;p&gt;##第三个是场景。&lt;/p&gt;
&lt;p&gt;从小闲到笨笨再到大明这个过程中，其实有非常多的具体和建设场景的工作要做。&lt;/p&gt;
&lt;p&gt;场景是什么?“场”是停留时间和消费时间，而“景”是情绪触发和意见挟裹。&lt;/p&gt;
&lt;p&gt;如果你只提供了一个广告，但是你没有给用户提供停留空间，然后在这个停留时间里面去激发用户的消费情绪，那么这个广告转化成购买的距离还是非常遥远。&lt;/p&gt;
&lt;p&gt;情绪是最支持人做决策的一个动力。下一件事情是互动，那互动的本质其实是你对用户行为的影响。&lt;/p&gt;
&lt;p&gt;营销活动就是这么一个场景，让用户停留在我搭建的场景里，花时间了解，酝酿情绪，然后他被周围的意见挟裹，被你引导，这就是营销的核心。它的核心不在于你提供一个功能，而在于你搭建了一个场景。&lt;/p&gt;
&lt;p&gt;举个例子，罗辑思维&lt;/p&gt;
&lt;p&gt;罗辑思维有一次打包卖书，就是这个套装里面有6本书，但是你不知道你们都有哪些书，而且限量8000套来销售。&lt;/p&gt;
&lt;p&gt;一个淘宝店主就觉得这个套装一定有价值，因为限量必须要抢购。所以他在开卖的第一时间就抢购了10套，在紧接着的1个小时内8000套书就售罄了。&lt;/p&gt;
&lt;p&gt;罗辑思维的群里还有人在问，怎么没了，还能到哪儿买?于是这位淘宝店主就把他买的10套书上架销售。&lt;/p&gt;
&lt;p&gt;他就想说，大家都想买买不到，我怎么着也得加点价吧。于是他加了点价450开卖，放了两天没人来问，降到400，还是没人问，然后打折，还是没有人问。最后这套书在淘宝是零交易。&lt;/p&gt;
&lt;p&gt;为什么同样一套书，在罗辑思维上是1小时8000套一抢而空，但是在淘宝店主这里是打了对折，放了10天还是零交易呢?&lt;/p&gt;
&lt;p&gt;原因就在于罗辑思维其实搭建了一个场景，对消费者进行意见挟裹。这里面最核心的是什么?如果你架构的场景，不能影响别人的情绪，不能对别人造成情绪触动的，那它就不是一个场景。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;梁宁演讲：在产品里修行&lt;/p&gt;
&lt;p&gt;大家好，我是梁宁，今天我演讲的题目叫做《在产品里修行》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做一个产品就是你的修行，因为在这个过程里，你需要认识这个世界，你需要认识人的弱点。你需要认识你的本性，并且不去挑战它。你需要认识你的合作伙伴的本性，
    
    </summary>
    
      <category term="生活感悟" scheme="http://isunman.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="思考" scheme="http://isunman.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>手机App扫码登录Web端，技术上是怎么实现的？</title>
    <link href="http://isunman.com/2020/02/15/mobile-phone-app-scan-code-login-web-terminal-how-to-achieve-technically/"/>
    <id>http://isunman.com/2020/02/15/mobile-phone-app-scan-code-login-web-terminal-how-to-achieve-technically/</id>
    <published>2020-02-15T03:38:00.000Z</published>
    <updated>2020-06-01T09:18:24.369Z</updated>
    
    <content type="html">&lt;p&gt;手机App扫码登录Web端，技术上是怎么实现的？&lt;/p&gt;
&lt;p&gt;##1、引言&lt;/p&gt;
&lt;p&gt;扫码登录这个功能，最早应该是微信的PC端开始搞，虽然有点反人类的功能（不扫码也没别的方式登录），但不得不说还是很酷的。&lt;/p&gt;
&lt;p&gt;下面这张图，不管是IM开发者还是普通用户，应该很熟悉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/202655hhi73ezfei7icd88.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;于是，搞IM产品的老板和产品经理们，从此又多了一个要抛给程序员们的需求——“为什么微信有扫一扫登录，而我们的没有？”。&lt;/p&gt;
&lt;p&gt;好吧，每次只要是微信有的功能，IM程序员们想甩锅，难度就有点大了，毕竟老板们都都会想当然认为，微信有的“我”的IM产品里也得有。&lt;/p&gt;
&lt;p&gt;既然无法回避，那就只能老老实实搞懂技术原理，然后自已使劲撸吧。&lt;/p&gt;
&lt;p&gt;本文将简要的介绍扫码登录功能的技术实现逻辑，并实际结合淘宝、微信的扫码登录功能，学习和研究大厂主流应用的技术实现思路。&lt;/p&gt;
&lt;p&gt;##2、基本技术原理&lt;/p&gt;
&lt;p&gt;###2.1 扫码登录功能到底是什么样的？&lt;/p&gt;
&lt;p&gt;首先介绍下什么是扫码登录。现在大部分同学手机上都装有微信、qq和淘宝这一类的软件。而这些app都有他们相对应的网页端。为了让用户在使用他们的网页时登录更加方便和安全，使用手机扫一扫就可以登录的服务，就显得自然而然了。&lt;/p&gt;
&lt;p&gt;几个主流大厂应用扫码登录时的界面效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/203056dycwfmmpcpoh6m8e.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有很多小伙伴可能会感到很神奇，网页上只是显示了个二维码，它怎么就知道是哪个手机扫到了二维码，并且进行登录的呢？而且，登录完成以后，还能直接把用户信息显示给用户，真的是很神奇啊。&lt;/p&gt;
&lt;p&gt;###2.2 扫码登录功能的完整技术逻辑&lt;/p&gt;
&lt;p&gt;####1）网页端与服务器的配合逻辑：&lt;/p&gt;
&lt;p&gt;接下来就是对于这个服务的详细实现。&lt;/p&gt;
&lt;p&gt;首先用户打开网站的登录页面的时候，向浏览器的服务器发送获取登录二维码的请求。服务器收到请求后，随机生成一个uuid，将这个id作为key值存入redis服务器，同时设置一个过期时间，再过期后，用户登录二维码需要进行刷新重新获取。&lt;/p&gt;
&lt;p&gt;同时，将这个key值和本公司的验证字符串合在一起，通过二维码生成接口，生成一个二维码的图片（二维码生成，网上有很多现成的接口和源码，这里不再介绍）。然后，将二维码图片和uuid一起返回给用户浏览器。&lt;/p&gt;
&lt;p&gt;浏览器拿到二维码和uuid后，会每隔一秒向浏览器发送一次，登录是否成功的请求。请求中携带有uuid作为当前页面的标识符。这里有的同学就会奇怪了，服务器只存了个uuid在redis中作为key值，怎么会有用户的id信息呢？&lt;/p&gt;
&lt;p&gt;这里确实会有用户的id信息，这个id信息是由手机服务器存入redis中的。具体请继续阅读“手机端与服务器的配合逻辑”。&lt;/p&gt;
&lt;p&gt;####2）手机端与服务器的配合逻辑：&lt;/p&gt;
&lt;p&gt;话说，浏览器拿到二维码后，将二维码展示到网页上，并给用户一个提示：请掏出您的手机，打开扫一扫进行登录。&lt;/p&gt;
&lt;p&gt;用户拿出手机扫描二维码，就可以得到一个验证信息和一个uuid（扫描二维码获取字符串的功能在网上同样有很多demo，这里就不详细介绍了）。&lt;/p&gt;
&lt;p&gt;由于手机端已经进行过了登录，在访问手机端的服务器的时候，参数中都会携带一个用户的token，手机端服务器可以从中解析到用户的userId（这里从token中取值而不是手机端直接传userid是为了安全，直接传userid可能会被截获和修改，token是加密的，被修改的风险会小很多）。手机端将解析到的数据和用户token一起作为参数，向服务器发送验证登录请求（这里的服务器是手机服务器，手机端的服务器跟网页端服务器不是同一台服务器）。&lt;/p&gt;
&lt;p&gt;服务器收到请求后，首先对比参数中的验证信息，确定是否为用户登录请求接口。如果是，返回一个确认信息给手机端。&lt;/p&gt;
&lt;p&gt;手机端收到返回后，将登录确认框显示给用户（防止用户误操作，同时使登录更加人性化）。用户确认是进行的登录操作后，手机再次发送请求。服务器拿到uuId和userId后，将用户的userid作为value值存入redis中以uuid作为key的键值对中。&lt;/p&gt;
&lt;p&gt;####3）登录成功时的逻辑：&lt;/p&gt;
&lt;p&gt;然后，浏览器再次发送请求的时候，浏览器端的服务器就可以得到一个用户Id，并调用登录的方法，生成一个浏览器端的token，再浏览器再次发送请求的时候，将用户信息返回给浏览器，登录成功。这里存储用户id而不是直接存储用户信息是因为，手机端的用户信息，不一定是和浏览器端的用户信息完全一致。&lt;/p&gt;
&lt;p&gt;####4）详细的技术原理总结如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/210751e2bz7c27qcbq7ugo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;###3、淘宝的扫码登录技术实现&lt;/p&gt;
&lt;p&gt;本节我们以淘宝的扫码登录为例，来实际研究分析一下淘宝的扫码登录实现逻辑。&lt;/p&gt;
&lt;p&gt;登录界面 &lt;a href=&quot;https://login.taobao.com/member/login.jhtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://login.taobao.com/member/login.jhtml&lt;/a&gt; 传回来的参数为：&lt;/p&gt;
&lt;p&gt;然后请求(GET)报文是这样的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://qrlogin.taobao.com/qrcodelogin/qrcodeLoginCheck.do?
lgToken=2c3b4d53ef0513787bf4ce711ea5ba53&amp;amp;defaulturl=&amp;amp;_ksTS=1540106757739_2804&amp;amp;callback=jsonp2805
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关键的就是lgToken，是网页的唯一ID，当打开了二维码登录的时候，网页在轮询(应该是长轮询long polling)调用接口去请求服务器。扩展：彻底理解cookie，session，token&lt;/p&gt;
&lt;p&gt;如果没有扫码，返回的为：&lt;/p&gt;
&lt;p&gt;如果扫了的话则会返回：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{

    &amp;quot;code&amp;quot;: &amp;quot;10001&amp;quot;,

    &amp;quot;message&amp;quot;: &amp;quot;mobile scan QRCode success&amp;quot;,

    &amp;quot;success&amp;quot;: true

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;长时间没有扫码的话，网页端会停止轮询，二维码失效！&lt;/p&gt;
&lt;p&gt;当手机端确认登录后，接口返回的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ 
&amp;quot;code&amp;quot;: &amp;quot;10006&amp;quot;, 
&amp;quot;success&amp;quot;: true,
 &amp;quot;url&amp;quot;: &amp;quot;https://login.taobao.com/member/loginByIm.do?uid=cntaobaoxxx&amp;amp;token=ff82fc0d1d395a33d3b38ec5a4981336&amp;amp;time=1530179143250&amp;amp;asker=qrcodelogin&amp;amp;ask_version=1.0.0&amp;amp;defaulturl=https://www.taobao.com&amp;amp;webpas=0b7aed2d43f01825183e4a49c6cae47d1479929926&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;表示登录成功，当然手机端与服务端在点击”确认登录”之间的交互可能就是这样：网页端生成的lgToken去请求服务端，服务端记住了这个lgToken并认为登录了，当网页端再次轮询请求接口时，就返回真正的登录态Token，网页端此时就可以凭着这个Token来登录了。&lt;/p&gt;
&lt;p&gt;详细的技术逻辑如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/212653o685grmsmldylv36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##4、微信的扫码登录技术实现&lt;/p&gt;
&lt;p&gt;###4.1 技术原理流程图&lt;br&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/213927pve6vavng8iavy4v.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;微信的网页版访问地址是：&lt;a href=&quot;https://wx.qq.com/，有兴趣也可以自行深入研究。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wx.qq.com/，有兴趣也可以自行深入研究。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###4.2 实际的技术实现逻辑&lt;/p&gt;
&lt;p&gt;####1）获取唯一的uuid, 以及包含uid信息的二维码：&lt;/p&gt;
&lt;p&gt;// 获取uuid&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getUUID: function() {

    vare = t.defer();

    returnwindow.QRLogin = {},

    $.ajax({

        url: i.API_jsLogin,

        dataType: &amp;quot;script&amp;quot;

    }).done(function() {

        200 == window.QRLogin.code ? e.resolve(window.QRLogin.uuid) : e.reject(window.QRLogin.code)

    }).fail(function() {

        e.reject()

    }),

    e.promise

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####2）浏览器轮询服务器，获取扫码状态：&lt;/p&gt;
&lt;p&gt;// 查看扫码状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;checkLogin: function(e, a) {

    varn = t.defer()

        , a = a || 0;

    returnwindow.code = 0,

    window.checkLoginPromise = $.ajax({

        url: i.API_login + &amp;quot;?loginicon=true&amp;amp;uuid=&amp;quot;+ e + &amp;quot;&amp;amp;tip=&amp;quot;+ a + &amp;quot;&amp;amp;r=&amp;quot;+ ~newDate,

        dataType: &amp;quot;script&amp;quot;,

        timeout: 35e3

    }).done(function() {

        newRegExp(&amp;quot;/&amp;quot;+ location.host + &amp;quot;/&amp;quot;);

        if(window.redirect_uri &amp;amp;&amp;amp; window.redirect_uri.indexOf(&amp;quot;/&amp;quot;+ location.host + &amp;quot;/&amp;quot;) &amp;lt; 0)

            returnvoid (location.href = window.redirect_uri);

        vare = {

            code: window.code,

            redirect_uri: window.redirect_uri,

            userAvatar: window.userAvatar

        };

        n.resolve(e)

    }).fail(function() {

        n.reject()

    }),

    n.promise

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####3）根据服务器返回的扫码状态，进行相应的操作：&lt;/p&gt;
&lt;p&gt;408 扫码超时：如果手机没有扫码或没有授权登录，服务器会阻塞约25s，然后返回状态码 408 -&amp;gt; 前端继续轮询&lt;/p&gt;
&lt;p&gt;400 二维码失效：大约5分钟的时间内不扫码，二维码失效&lt;/p&gt;
&lt;p&gt;201 已扫码：如果手机已经扫码，服务器立即返回状态码和用户的基本信息 （window.code=201,window.code.userAvator=”…”），-&amp;gt; 前端继续轮询&lt;/p&gt;
&lt;p&gt;200 已授权：如果手机点击了确认登录，服务器返回200及token -&amp;gt; 前端停止轮询, 获取到token，重定向到目标页&lt;/p&gt;
&lt;p&gt;具体的代码示例如下：&lt;/p&gt;
&lt;p&gt;// 根据服务器返回的扫码状态，进行相应的操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;functiono(c) {
    switch(c.code) {
    case200:
        t.newLoginPage(c.redirect_uri).then(function(t) {
            varo = t.match(/&amp;lt;ret&amp;gt;(.*)&amp;lt;\/ret&amp;gt;/)
                , r = t.match(/&amp;lt;script&amp;gt;(.*)&amp;lt;\/script&amp;gt;/)
                , c = t.match(/&amp;lt;skey&amp;gt;(.*)&amp;lt;\/skey&amp;gt;/)
                , s = t.match(/&amp;lt;wxsid&amp;gt;(.*)&amp;lt;\/wxsid&amp;gt;/)
                , l = t.match(/&amp;lt;wxuin&amp;gt;(.*)&amp;lt;\/wxuin&amp;gt;/)
                , d = t.match(/&amp;lt;pass_ticket&amp;gt;(.*)&amp;lt;\/pass_ticket&amp;gt;/)
                , f = t.match(/&amp;lt;message&amp;gt;(.*)&amp;lt;\/message&amp;gt;/)
                , u = t.match(/&amp;lt;redirecturl&amp;gt;(.*)&amp;lt;\/redirecturl&amp;gt;/);
            returnu ? void (window.location.href = u[1]) : o &amp;amp;&amp;amp; &amp;quot;0&amp;quot;!= o[1] ? (alert(f &amp;amp;&amp;amp; f[1] || &amp;quot;登录失败&amp;quot;),
            i.report(i.AUTH_FAIL_COUNT, 1),
            void location.reload()) : (e.$emit(&amp;quot;newLoginPage&amp;quot;, {
                Ret: o &amp;amp;&amp;amp; o[1],
                SKey: c &amp;amp;&amp;amp; c[1],
                Sid: s &amp;amp;&amp;amp; s[1],
                Uin: l &amp;amp;&amp;amp; l[1],
                Passticket: d &amp;amp;&amp;amp; d[1],
                Code: r
            }),

            void (a.getCookie(&amp;quot;webwx_data_ticket&amp;quot;) || n.report(n.ReportType.cookieError, {
                text: &amp;quot;webwx_data_ticket 票据丢失&amp;quot;,
                cookie: document.cookie
            })))
        });
        break;

    case201:
        e.isScan = !0,
        n.report(n.ReportType.timing, {
            timing: {
                scan: Date.now()
            }
        }),
        t.checkLogin(e.uuid).then(o, function(t) {
            !t &amp;amp;&amp;amp; window.checkLoginPromise &amp;amp;&amp;amp; (e.isBrokenNetwork = !0)
        });
        break;

    case408:
        t.checkLogin(e.uuid).then(o, function(t) {
            !t &amp;amp;&amp;amp; window.checkLoginPromise &amp;amp;&amp;amp; (e.isBrokenNetwork = !0)
        });
        break;

    case400:

    case500:

    case0:
        vars = a.getCookie(&amp;quot;refreshTimes&amp;quot;) || 0;
        s &amp;lt; 5 ? (s++,
        a.setCookie(&amp;quot;refreshTimes&amp;quot;, s, .5),
        document.location.reload()) : e.isNeedRefresh = !0;
        break;

    case202:
        e.isScan = !1,
        e.isAssociationLogin = !1,
        a.setCookie(&amp;quot;login_frequency&amp;quot;, 0, 2),
        window.checkLoginPromise &amp;amp;&amp;amp; (window.checkLoginPromise.abort(),
        window.checkLoginPromise = null),
        r()
    }

    e.code = c.code,
    e.userAvatar = c.userAvatar,
    a.log(&amp;quot;get code&amp;quot;, c.code)

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###4.3 小结&lt;/p&gt;
&lt;p&gt;微信网页端扫码登录时，轮询的数据返回采用的是JSONP的形式，这是为了解决跨域问题。如对JSONP不了解的，可以参考：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://www.52im.net/thread-1038-1-1.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;微信网页端扫码登录时，轮询采用了后台根据扫码情况阻塞前台请求，优化轮询及减少前端的无效轮询。这种技术，请详见：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://www.52im.net/thread-338-1-1.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##5、本文小结&lt;/p&gt;
&lt;p&gt;扫码登录这个功能，现在已经不只出现有IM应用里，各种带有移动端的线上网站也都有了这个功能，所以本文中介绍的技术原理并不局限于只用于实现IM应用中的扫码登录。&lt;/p&gt;
&lt;p&gt;另外，为了方便抓取真实的数据进行分析研究，本文中的PC端案例分析是针对的是网页端，但实际上如果你的PC端是富客户端（也就是.exe、.dmg这样的安装版），原理也是一样的，而且还不需要考虑浏览器里的跨域问题等。&lt;/p&gt;
&lt;p&gt;阅读本文时，可能涉及到传统的Web端即时通讯技术（为了扫码登录的实时性），比如长轮询等，如果您对这些技术还不太了解的话，可以系统学习一下即时通讯网整理的有关Web端即时通讯方面的资料。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文参考链接1：&lt;a href=&quot;https://mp.weixin.qq.com/s/ND6vF_HAueH8GuQJzPkiBg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来源微信公众号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文参考链接2：&lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2892&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;即时通讯网&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;手机App扫码登录Web端，技术上是怎么实现的？&lt;/p&gt;
&lt;p&gt;##1、引言&lt;/p&gt;
&lt;p&gt;扫码登录这个功能，最早应该是微信的PC端开始搞，虽然有点反人类的功能（不扫码也没别的方式登录），但不得不说还是很酷的。&lt;/p&gt;
&lt;p&gt;下面这张图，不管是IM开发者还是普通用户，应该很
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="即时通讯" scheme="http://isunman.com/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
      <category term="微信" scheme="http://isunman.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>PHP5.6通过CURL上传图片@符无效的兼容问题</title>
    <link href="http://isunman.com/2020/01/10/php56-an-invalid-compatibility-problem-with-the-sign-of-an-image-uploaded-via-curl/"/>
    <id>http://isunman.com/2020/01/10/php56-an-invalid-compatibility-problem-with-the-sign-of-an-image-uploaded-via-curl/</id>
    <published>2020-01-10T12:26:00.000Z</published>
    <updated>2020-05-10T11:38:34.686Z</updated>
    
    <content type="html">&lt;p&gt;今天本来想试试一个图片云的API，于是本地做了个上传图片的测试，结果灰常郁闷的发现以前一直用的好好的CURL上传图片居然死活不起作用，本来几分钟搞定的事情，结果折腾了大半天才终于找到原因，居然是兼容性问题，真是无语。。&lt;/p&gt;
&lt;p&gt;网上搜索PHP通过CURL上传图片几乎都是类似下面的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&amp;apos;Content-type:text/html; charset=utf-8&amp;apos;); //声明编码
$ch = curl_init();
$url = &amp;apos;https://xxx.com/api/mobile/auto_upload.php?uid=9705459&amp;apos;;

//post数据，使用@符号，curl就会认为是有文件上传
$curlPost = array(&amp;apos;Filedata&amp;apos;=&amp;gt;&amp;apos;@/Users/finup/Documents/11.png&amp;apos;);


curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_HEADER, 1);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1); //POST提交
curl_setopt($ch, CURLOPT_POSTFIELDS,$curlPost);
$data =curl_exec($ch);
curl_close($ch);
echo &amp;apos;&amp;lt;pre&amp;gt;&amp;apos;;
var_dump($data);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以前上传图片都是在图片路径前面增加一个 @符号，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. $file);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就行了，但现在这种情况一般只适用于 PHP5.6以下的版本。&lt;br&gt;对5.6来说，直接加@是木有用的啦。&lt;/p&gt;
&lt;p&gt;解决办法有两个：一种是兼容；二是使用新的方法。&lt;/p&gt;
&lt;p&gt;1 . 兼容方法：&lt;br&gt;主要用到 CURL 的一个配置参数 CURLOPT_SAFE_UPLOAD&lt;br&gt;CURLOPT_SAFE_UPLOAD 在 PHP5.5中默认值是 false&lt;br&gt;而在 PHP5.6中已经默认为 true 了。&lt;br&gt;所以只需要增加一行强制设置为 false 就行，如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：该参数的设置顺序，必须在设置 CURLOPT_POSTFIELDS 参数之前才有效哦！！！&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$url = &amp;apos;http://127.0.0.1/test3.php&amp;apos;;
$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. $file);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_SAFE_UPLOAD, false);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
$content = curl_exec($curl);
curl_close($curl);
print_r($content);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2 . 新的图片上传方法：&lt;br&gt;使用 CURLFile 类来处理文件，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$url = &amp;apos;http://127.0.0.1/test3.php&amp;apos;;
$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;new CURLFile($file));
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
$content = curl_exec($curl);
curl_close($curl);
print_r($content);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我这里只是最简单的应用，具体可参考下面官方文档：&lt;br&gt;&lt;a href=&quot;http://php.net/manual/en/class.curlfile.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://php.net/manual/en/class.curlfile.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这下终于上传成功了。。。太坑爹了，一天时间又被折腾完了。&lt;/p&gt;
&lt;p&gt;最后，注意使用CURLFile类时的一个问题：&lt;/p&gt;
&lt;p&gt;CURLFile的第三个参数，如果使用的话，要么带上后缀的文件全名；要么整个空着。不能有值又不带后缀，否则DZ系统默认上传失败，因为获取文件扩展名为空。&lt;/p&gt;
&lt;p&gt;当然，如果像上面示例一样只有一个文件路径本身，其他全都是缺省值（默认值），服务器会自动获取其他文件属相参数，反而是一个更好的方案。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天本来想试试一个图片云的API，于是本地做了个上传图片的测试，结果灰常郁闷的发现以前一直用的好好的CURL上传图片居然死活不起作用，本来几分钟搞定的事情，结果折腾了大半天才终于找到原因，居然是兼容性问题，真是无语。。&lt;/p&gt;
&lt;p&gt;网上搜索PHP通过CURL上传图片几乎都
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>iOS 支持通用链接UniversalLinks</title>
    <link href="http://isunman.com/2019/12/28/ios-support-universal-links/"/>
    <id>http://isunman.com/2019/12/28/ios-support-universal-links/</id>
    <published>2019-12-28T09:00:00.000Z</published>
    <updated>2020-05-10T11:38:09.851Z</updated>
    
    <content type="html">&lt;p&gt;iOS 支持通用链接UniversalLinks&lt;/p&gt;
&lt;p&gt;关于iOS中的Universal Links（通用链接）分三部分讲解一下。&lt;br&gt;这个功能是从 iOS 9 之后开始支持的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一部分：一篇文章《iOS微信里打开app，Universal-Links》&quot;&gt;&lt;a href=&quot;#第一部分：一篇文章《iOS微信里打开app，Universal-Links》&quot; class=&quot;headerlink&quot; title=&quot;第一部分：一篇文章《iOS微信里打开app，Universal Links》&quot;&gt;&lt;/a&gt;第一部分：一篇文章《iOS微信里打开app，Universal Links》&lt;/h3&gt;&lt;p&gt;从第三方应用或者浏览器打开自己app的东西&lt;/p&gt;
&lt;p&gt;传统的方式是通过URL Scheme的方式，但是iOS9以后又出了新的更完美的方式Universal Links。&lt;/p&gt;
&lt;p&gt;传统的URL Scheme方式微信内置的浏览器都是封锁了所有它投资的公司之外的，只有白名单的才可以（比如京东，B站，等）。Universal Links也不能算是完美的实现，但是已经是目前为止最好的了。&lt;/p&gt;
&lt;p&gt;就说一下这个东西的介绍，就像在windows里面为某一类型的文件添加了默认的打开方式。只不过这个文件类型变成了某一个“域名”（并非完全是某个域名，或者可以称之为某段有特殊意义的URL）的URL。这个东西只能在iOS9以后才有。&lt;/p&gt;
&lt;p&gt;具体的表现在在iOS系统中，当你邮件或者短信或者其他方式收到含有某段“特定标示”的URL的时候如果安装有你的app，就可以直接默认调用app去打开，否则只能调用你的Safari去打开。具体到微信里面就是打开了分享的H5，右上角更多－在Safari中打开，可以直接调用你的app去打开这个URL。具体在app的中怎么展示相关的逻辑就看你的了。&lt;/p&gt;
&lt;h4 id=&quot;具体介绍的相关文章：&quot;&gt;&lt;a href=&quot;#具体介绍的相关文章：&quot; class=&quot;headerlink&quot; title=&quot;具体介绍的相关文章：&quot;&gt;&lt;/a&gt;具体介绍的相关文章：&lt;/h4&gt;&lt;p&gt;苹果文档：&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;苹果检测链接有效性：&lt;br&gt;&lt;a href=&quot;https://search.developer.apple.com/appsearch-validation-tool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://search.developer.apple.com/appsearch-validation-tool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很棒的一个英文的步骤文章：&lt;br&gt;&lt;a href=&quot;https://blog.branch.io/how-to-setup-universal-links-to-deep-link-on-apple-ios-9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.branch.io/how-to-setup-universal-links-to-deep-link-on-apple-ios-9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关的文章：&lt;a href=&quot;http://www.jackivers.me/blog/2015/9/17/list-of-universal-link-ios-9-apps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jackivers.me/blog/2015/9/17/list-of-universal-link-ios-9-apps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.glowing.com/cn/deferred-deep-linking-and-branch-sdk-in-ios/（URL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tech.glowing.com/cn/deferred-deep-linking-and-branch-sdk-in-ios/（URL&lt;/a&gt; Scheme和Universal Links优缺点介绍的很棒，这个团队的技术博客也很不错哦）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20150911/13321.html（里面的那个运行流程的总结图很不错）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/ios/20150911/13321.html（里面的那个运行流程的总结图很不错）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体的步骤就不再赘述了，因为无论是官方文档，还是其他人写的文章都很棒了，我就说一下实际开发中可能遇到的的坑。&lt;/p&gt;
&lt;p&gt;1.注意拼写那个json文件的时候，应该是你的开发者中心，Identifiers—App IDs— 应用的证书名字（bundle id所有对应的那个）—Prefix&lt;br&gt;.英文的点号，再跟上你的bundle id。并且文件的名字必须为“apple-app-site-association”，不能自己私自定义。用浏览器打开https://&lt;domain&gt;/apple-app-site-association文件，看一下成功否就可以了。&lt;/domain&gt;&lt;/p&gt;
&lt;p&gt;2.生成后的json文件一定是要放到你的那些网页所在的站点的目录下面的HTTPS web server根目录下面。比如你的网站是&lt;a href=&quot;https://www.google.com（所有的网页都是以这个开头的），然后你应用的地址baseurl是https://api.google.com，其实你应该放在www的那个HTTPS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.google.com（所有的网页都是以这个开头的），然后你应用的地址baseurl是https://api.google.com，其实你应该放在www的那个HTTPS&lt;/a&gt; web server根目录下面。然后过两三分钟吧，就用苹果有效性检测工具的那个去试一下，找一个你要分享出去的h5链接试一下，只要不出错，出来很多的相关信息就可以了（就跟用这个URL测试出来的结果一样就可以了&lt;a href=&quot;https://www.yelp.com/biz/michael-winnetka）。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.yelp.com/biz/michael-winnetka）。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.在工程的设置Associated Domains的时候，一定先要去苹果的开发者中心打开你的应用证书Associated Domains Enabled。然后记得更新你的证书关联的东西，然后更新本地的证书。才可以打开工程的Associated Domains。记住填写链接的时候是applinks:&lt;domain&gt;。这个&lt;domain&gt;就是第1点中调试通的那个（如果你的应用的api的和页面的不区分服务器就一样了）。&lt;/domain&gt;&lt;/domain&gt;&lt;/p&gt;
&lt;p&gt;4.然后编译你的应用。如果你在短信中含有类似的https://&lt;domain&gt;?a=1&amp;amp;b=2 已经通过了后，直接长按会出来“在“XXX”中打开”就说明成功了。可以去微信微博等其他的地方去看看了。&lt;/domain&gt;&lt;/p&gt;
&lt;p&gt;这一段内容来源链接（版权归属原作者）：&lt;a href=&quot;https://www.cnblogs.com/ysk-china/p/5777299.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/ysk-china/p/5777299.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第二部分：一篇文章《iOS-9-通用链接（Universal-Links）》&quot;&gt;&lt;a href=&quot;#第二部分：一篇文章《iOS-9-通用链接（Universal-Links）》&quot; class=&quot;headerlink&quot; title=&quot;第二部分：一篇文章《iOS 9 通用链接（Universal Links）》&quot;&gt;&lt;/a&gt;第二部分：一篇文章《iOS 9 通用链接（Universal Links）》&lt;/h3&gt;&lt;p&gt;1.apple-app-site-association文件不能带后缀，务必把”.json”的后缀去掉！有些人的电脑是隐藏文件后缀的，这要格外注意；&lt;/p&gt;
&lt;p&gt;2.apple-app-site-association一定要传到域名根目录下；&lt;/p&gt;
&lt;p&gt;3.WebServer需要支持https，且https使用有效的证书（是私密链接）。笔者在这里卡了很久，原因就是后台给配的https使用无效的证书，导致应用安装的时候不能正确的下载apple-app-site-association文件；&lt;/p&gt;
&lt;p&gt;4.如果想测试这个功能，可以让后台搭一个测试服务器，并配置虚拟主机生成域名，然后iOS这边通过host访问域名就可以了。注意”applink:”后面写的一定是域名，不能是IP；&lt;/p&gt;
&lt;p&gt;5.抓包的结果显示，网络顺畅的情况下，应用会在在刚安装（不是打开）的时候会去applink中的地址下载apple-app-site-association文件，所以如果需要测试，请保证网络通畅；&lt;/p&gt;
&lt;p&gt;6.当所有都准备好，需要测试该功能的时候，只需要在记事本或短信中输入App能识别的链接，然后直接点击或是长按就可以了，直接点的效果是跳转到你的App，然后右上角是“去网页”的箭头，长按的效果是弹出的菜单中第二项是“在’XXX’中打开”，这也代表着成功。直接在Safari中输入链接是无效的，必须从一处跳入才可以（比如上一级网页）。&lt;/p&gt;
&lt;p&gt;7.苹果有个网址（这里）可以检测你的apple-app-site-association是否是有效的，准备好了可以测试一下。&lt;/p&gt;
&lt;p&gt;8.测试的时候，建议使用dev证书打包，之后安装到手机上测试功能。未安装应用的情况下直接在手机上跑好像也是可以的，因为抓到过请求。&lt;/p&gt;
&lt;p&gt;9.如果你有问题，但上面没有列出，Stackoverflow上面有个问题，可以看下其他人的建议。&lt;/p&gt;
&lt;h4 id=&quot;继续之前的补充几点&quot;&gt;&lt;a href=&quot;#继续之前的补充几点&quot; class=&quot;headerlink&quot; title=&quot;继续之前的补充几点&quot;&gt;&lt;/a&gt;继续之前的补充几点&lt;/h4&gt;&lt;p&gt;1.如果需要支持此功能，需要在开发者中心做配置。具体是这样：开发者中心-&amp;gt;Identitiers-&amp;gt;App IDs-&amp;gt;需要支持的应用App ID，在Application Services列表里有Associated Domains一条，把它变为Enabled就可以了。&lt;/p&gt;
&lt;p&gt;2.当你在项目targets-&amp;gt;Capabilities-&amp;gt;Associated Domains中配置app link之后，系统会自动帮你写入.entitlements文件，所以不需要自己去手动加。需要注意的是，有人遇到过.entitlements文件没有被加入工程的，这也会产生问题，需要手动把.entitlements加入工程。&lt;/p&gt;
&lt;p&gt;3.apple-app-site-association文件里有个paths字段，这个是用来控制可识别链接的，星号的写法代表了可识别域名下所有链接。这篇博客里有很多其他公司的例子，可以参考一下。&lt;/p&gt;
&lt;p&gt;这一段内容来源链接（版权归属原作者）：&lt;a href=&quot;https://www.jianshu.com/p/c2ca5b5f391f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/c2ca5b5f391f&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第三部分-关于apple-app-site-association文件自己遇到的坑&quot;&gt;&lt;a href=&quot;#第三部分-关于apple-app-site-association文件自己遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;第三部分 关于apple-app-site-association文件自己遇到的坑&quot;&gt;&lt;/a&gt;第三部分 关于apple-app-site-association文件自己遇到的坑&lt;/h3&gt;&lt;p&gt;Configure your website to host the apple-app-site-association file&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Buy a domain name or pick from your existing.&lt;/li&gt;
&lt;li&gt;Acquire SSL certification for the domain name.&lt;/li&gt;
&lt;li&gt;Create structured apple-app-site-association JSON file.&lt;/li&gt;
&lt;li&gt;Sign the JSON file with the SSL certification.&lt;/li&gt;
&lt;li&gt;Configure the file server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面是一篇英文文章说明这个文件的配置过程，很准确。&lt;/p&gt;
&lt;p&gt;但是，实际配置过程总遇到的问题有以下几点：&lt;/p&gt;
&lt;p&gt;1、此文件在浏览器中访问时，默认是下载而不是打开显示文件内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：在服务器对应项目的配置文件中增加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location ~ apple-app-site-association$ {
    add_header  Content-Type &amp;apos;text/plain&amp;apos;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、上述方法解决了浏览器直接显示文件内容的问题，但是并不是返回的json格式数据，但是使用苹果的URL检测工具不通过，显示469错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：在服务器对应项目的配置文件中增加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location ~ apple-app-site-association$ {
    default_type application/json;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、上述方法同时解决了显示文件内容和返回json格式的问题，也按上面的方案修改了，但是使用苹果的URL检测工具仍然不通过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：注意苹果官网检测工具的一句话“Applebot will crawl your webpage”，需要服务器允许苹果爬的访问权限（默认是禁止所有爬虫的）。在修改允许苹果爬虫Applebot之后，经检测工具检测，apple-app-site-association文件已有效可用。&lt;/p&gt;
&lt;p&gt;另外2个问题说明：&lt;/p&gt;
&lt;p&gt;1、配置过程中需要多次重启nginx服务器，并且清除浏览器缓存。&lt;/p&gt;
&lt;p&gt;2、apple-app-site-association文件的内容是由iOS开发工程师配置好的，此处只涉及服务器上传此文件，并支持检测工具检测到可用状态。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 支持通用链接UniversalLinks&lt;/p&gt;
&lt;p&gt;关于iOS中的Universal Links（通用链接）分三部分讲解一下。&lt;br&gt;这个功能是从 iOS 9 之后开始支持的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一部分：一篇文章《iOS微信里打开app，Uni
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
      <category term="爬虫" scheme="http://isunman.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>你所不知道的 AI 进展</title>
    <link href="http://isunman.com/2019/10/29/AI-progress-you-do-not-know/"/>
    <id>http://isunman.com/2019/10/29/AI-progress-you-do-not-know/</id>
    <published>2019-10-29T04:02:00.000Z</published>
    <updated>2020-05-10T11:37:37.256Z</updated>
    
    <content type="html">&lt;p&gt;人工智能现在是常见词汇，大多数人可能觉得，它是学术话题，跟普通人关系不大。&lt;br&gt;但是实际上，AI 突飞猛进，正在脱离实验室，进入日常生活。仅仅是现在的技术水平，就足以模糊现实与虚拟的界限，颠覆一般民众的认知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102801.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图1：2018年10月，世界第一幅 AI 生成的肖像画，&lt;a href=&quot;https://www.christies.com/features/A-collaboration-between-two-artists-one-human-one-a-machine-9332-1.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;拍卖&lt;/a&gt;成交价43.25万美元。）&lt;/p&gt;
&lt;p&gt;为了让普通人了解 AI 的进展，谷歌的机器学习专家格里高利·萨普诺夫（Grigory Sapunov）写了一篇通俗的&lt;a href=&quot;https://blog.inten.to/welcome-to-the-simulation-dd0d8cb6534d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;科普文章&lt;/a&gt;，介绍目前的技术成果。这盘文章非常精彩，有大量的图片，加上一些简单的解释，信息量很大，对于了解技术动态很有帮助。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102802.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图2：谷歌的机器学习专家格里高利·萨普诺夫）&lt;br&gt;下面就是那篇文章的翻译，比较长，图片很多，但是值得耐心读完。我保证，有些内容一定会让你感到吃惊。&lt;/p&gt;
&lt;h2 id=&quot;一、图像处理&quot;&gt;&lt;a href=&quot;#一、图像处理&quot; class=&quot;headerlink&quot; title=&quot;一、图像处理&quot;&gt;&lt;/a&gt;一、图像处理&lt;/h2&gt;&lt;p&gt;人工智能最早是从图像处理开始的。图像处理是一种常见任务，智能要求比较高，需要使用 PhotoShop 之类的软件人工编辑，一般的算法解决不了。&lt;/p&gt;
&lt;h3 id=&quot;1-1-对象补全&quot;&gt;&lt;a href=&quot;#1-1-对象补全&quot; class=&quot;headerlink&quot; title=&quot;1.1 对象补全&quot;&gt;&lt;/a&gt;1.1 对象补全&lt;/h3&gt;&lt;p&gt;2017年，日本科学家提出了一种&lt;a href=&quot;https://web.archive.org/web/20191016060740/http://iizuka.cs.tsukuba.ac.jp/projects/completion/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图像的对象补全模型&lt;/a&gt;。经过训练，模型可以补全图片上缺失的部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102803.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图3：图像的对象补全模型）&lt;br&gt;上图中，左边是原始图片，然后把中间的花盆涂掉，输入模型。模型会自动补全缺失的部分（右图），由于它不知道，那里有一个花盆，所以只会根据没有涂掉的部分，补上地板和扶手。&lt;br&gt;下面是更多这样的例子。涂掉的部分，模型都会补上，哪怕它根本不知道，那里原来是什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102804.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图4：图像的对象补全示例）&lt;br&gt;Nvidia 公司将这个模型做成了产品，放在网上。你可以到&lt;a href=&quot;https://www.nvidia.com/research/inpainting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;它的网站&lt;/a&gt;，上传一张图片，然后涂掉一些部分，让网站替你补全。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102805.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图5：涂掉沙发旁边的茶几）&lt;br&gt;有的&lt;a href=&quot;https://www.slashgear.com/adobes-entry-level-photoshop-elements-gets-new-ai-powered-tools-04594215/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图像软件&lt;/a&gt;已经应用这项技术，去除人像脸上的斑点。&lt;/p&gt;
&lt;h3 id=&quot;1-2-背景处理&quot;&gt;&lt;a href=&quot;#1-2-背景处理&quot; class=&quot;headerlink&quot; title=&quot;1.2 背景处理&quot;&gt;&lt;/a&gt;1.2 背景处理&lt;/h3&gt;&lt;p&gt;背景处理指的是，将前景物体从图片分离出来，再对背景进行加工。目前，已经有&lt;a href=&quot;https://towardsdatascience.com/background-removal-with-deep-learning-c4f2104b3157&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;很好的智能算法&lt;/a&gt;可以去除图片背景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102806.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图6：图片的背景去除）&lt;br&gt;在模型内部，图片会转成像素的色块。下图的浅紫色块就是前景物体，然后再把这些像素提取出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102807.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图7：背景去除模型）&lt;br&gt;这个模型也已经做成了&lt;a href=&quot;https://www.remove.bg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线上服务&lt;/a&gt;，大家可以上传图片感受一下它的效果。&lt;br&gt;既然可以去除背景，那当然就可以&lt;a href=&quot;https://arxiv.org/abs/1703.03872&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更改背景&lt;/a&gt;，为图片合成打开方便之门。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102808.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图8：更改图片背景）&lt;/p&gt;
&lt;h3 id=&quot;1-3-样式转换&quot;&gt;&lt;a href=&quot;#1-3-样式转换&quot; class=&quot;headerlink&quot; title=&quot;1.3 样式转换&quot;&gt;&lt;/a&gt;1.3 样式转换&lt;/h3&gt;&lt;p&gt;人工智能还能够&lt;a href=&quot;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;识别&lt;/a&gt;图片的风格样式（即像素的变化规律），将其套用在另一张图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102809.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图9：原始图片）&lt;br&gt;上图是两张原始图片，第一张是梵高的名画《星夜》，第二张是普通的风景照。模型可以提取第一张图片的风格，将其套用在第二张图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102810.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图10：套用梵高的《星夜》风格）&lt;br&gt;其他名画的风格，同样可以套用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102812.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102813.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图11：图像的风格转换）&lt;/p&gt;
&lt;h3 id=&quot;1-4-图像着色&quot;&gt;&lt;a href=&quot;#1-4-图像着色&quot; class=&quot;headerlink&quot; title=&quot;1.4 图像着色&quot;&gt;&lt;/a&gt;1.4 图像着色&lt;/h3&gt;&lt;p&gt;一旦识别出图片中的物体，模型就可以统计不同物体的像素颜色规律，然后就能推断黑白照片可能的颜色，从而实现&lt;a href=&quot;https://arxiv.org/abs/1603.06668&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;照片着色&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102814.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图12：黑白照片的着色）&lt;br&gt;网上也有免费的&lt;a href=&quot;https://colorize.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;着色服务&lt;/a&gt;，大家可以体验。&lt;/p&gt;
&lt;h2 id=&quot;二、GAN-方法&quot;&gt;&lt;a href=&quot;#二、GAN-方法&quot; class=&quot;headerlink&quot; title=&quot;二、GAN 方法&quot;&gt;&lt;/a&gt;二、GAN 方法&lt;/h2&gt;&lt;h3 id=&quot;2-1-简介&quot;&gt;&lt;a href=&quot;#2-1-简介&quot; class=&quot;headerlink&quot; title=&quot;2.1 简介&quot;&gt;&lt;/a&gt;2.1 简介&lt;/h3&gt;&lt;p&gt;GAN 是”生成对抗网络”（Generative Adversarial Networks）的缩写，它是一种革命性的提升人工智能模型效果、生成虚拟图像的方法。&lt;br&gt;原理很简单，就是两个神经网络互相对抗。一个神经网络负责生成虚拟图像，另一个神经网络负责鉴定假图像。理论上，如果 GAN 训练成功，那么生成的假图像与真图像将无法区分。2014年，这种方法提出以后，快速发展，目前效果已经可以乱真。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102815.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图13：GAN 的改进速度）&lt;br&gt;上图是过去几年，GAN 生成的虚拟人像。可以发现，每过一年，图片越来越大，细节越来越丰富，越发接近真实人像。它的工作方法也是如此，第一步生成一张低分辨率图片，然后慢慢放大，依次修改每一个像素，确定该像素怎样才能最大概率通过鉴定器。&lt;br&gt;GAN 不仅能生成虚拟图像，还能生成音频、文本，甚至是化合物分子。AI 模型可能创造出来的任何东西，都能使用 GAN 提升效果。GitHub 有一个&lt;a href=&quot;https://github.com/hindupuravinash/the-gan-zoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;仓库&lt;/a&gt;，专门收集不同用途的 GAN，目前已经有500多种模型。&lt;/p&gt;
&lt;h3 id=&quot;2-2-StyleGAN&quot;&gt;&lt;a href=&quot;#2-2-StyleGAN&quot; class=&quot;headerlink&quot; title=&quot;2.2 StyleGAN&quot;&gt;&lt;/a&gt;2.2 StyleGAN&lt;/h3&gt;&lt;p&gt;目前，生成虚拟人像效果最好的模型是 Nvidia 公司的 &lt;a href=&quot;https://arxiv.org/abs/1812.04948&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StyleGAN&lt;/a&gt;。下面两张头像，你能分辨哪张是虚拟的，哪张是真实的吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102816.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图14：GAN 虚拟人像）&lt;br&gt;这是网站截图，你可以去&lt;a href=&quot;http://www.whichfaceisreal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;那个网站&lt;/a&gt;试试看，能猜对多少张。需要提醒的是，这是2018年底的模型产物，随着模型进化，迟早将无法分辨真假。&lt;br&gt;GAN 不仅能生成人像，实际上可以生成任何图像。下面是 &lt;a href=&quot;https://arxiv.org/abs/1809.11096&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BigGAN&lt;/a&gt; 模型生成的各种图像，图片里的东西都是不存在的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102817.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图15：BigGAN 模型生成的虚拟图像）&lt;/p&gt;
&lt;h3 id=&quot;2-3-图像翻译&quot;&gt;&lt;a href=&quot;#2-3-图像翻译&quot; class=&quot;headerlink&quot; title=&quot;2.3 图像翻译&quot;&gt;&lt;/a&gt;2.3 图像翻译&lt;/h3&gt;&lt;p&gt;一种图像通过 GAN 转变为另一种图像，称为图像翻译。空拍照片变成地图、黑白照片变成彩色照片，都是图像翻译的例子。&lt;br&gt;&lt;a href=&quot;https://github.com/phillipi/pix2pix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pix2pix&lt;/a&gt; 是图像翻译的开源工具，它可以让黑夜变成白天，示意图变成实物图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102818.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图16：图像翻译）&lt;br&gt;也可以让春天变成夏天，晴天变成雨天。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102819.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图17：图像翻译）&lt;br&gt;图像翻译的难点在于，它需要有成对的示例（源图像和相应的目标图像），告诉模型应该怎么翻译，这些示例可能很难创建。但是反过来，只要有配对的示例，就可以翻译图像，不管这种翻译是否合理。下面是两只小猫翻译成对应的豹子、狮子和老虎。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102820.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图18：图像翻译）&lt;br&gt;&lt;a href=&quot;https://github.com/junyanz/CycleGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CycleGAN&lt;/a&gt; 模型还支持跨域翻译，将照片翻译成油画，斑马翻译成马。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102821.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图19：图像翻译）&lt;br&gt;Nvidia 开发了一个 &lt;a href=&quot;http://nvidia-research-mingyuliu.com/gaugan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GauGAN&lt;/a&gt; 软件，可以在线试玩。用户只需手绘一个示意图，软件就能生成一张对应的风景照片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102829.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图20：GauGAN 将示意图变成照片）&lt;/p&gt;
&lt;h3 id=&quot;2-4-人像翻译&quot;&gt;&lt;a href=&quot;#2-4-人像翻译&quot; class=&quot;headerlink&quot; title=&quot;2.4 人像翻译&quot;&gt;&lt;/a&gt;2.4 人像翻译&lt;/h3&gt;&lt;p&gt;图像翻译用于人像，就是人像翻译。&lt;a href=&quot;https://github.com/yunjey/StarGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StarGAN&lt;/a&gt; 模型可以翻译面部属性，比如头发的颜色、性别、肤色等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102824.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图21：脸部属性的改变）&lt;br&gt;还可以把其他人的表情移植到你的脸上，下图分别是愤怒、快乐、恐惧的表情翻译。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102825.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图22：表情的改变）&lt;br&gt;&lt;a href=&quot;https://github.com/run-youngjoo/SC-FEGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SC-FEGAN&lt;/a&gt; 是人像翻译的开源软件，可以让你编辑人像，比如加上刘海，去除墨镜等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102826.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102827.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图23：人像编辑软件 SC_FEGAN）&lt;/p&gt;
&lt;h3 id=&quot;2-5-文本到图像生成&quot;&gt;&lt;a href=&quot;#2-5-文本到图像生成&quot; class=&quot;headerlink&quot; title=&quot;2.5 文本到图像生成&quot;&gt;&lt;/a&gt;2.5 文本到图像生成&lt;/h3&gt;&lt;p&gt;GAN 最惊人的成果之一，大概就是&lt;a href=&quot;https://arxiv.org/abs/1711.10485&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;根据文本生成图像&lt;/a&gt;。用户提供一个句子，软件生成对应的图像。原始文本”一只红中透白、长着非常短的尖嘴的鸟”，可以得到下面的图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102830.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图24：根据文本生成图像）&lt;br&gt;论文甚至提到，将来存在可能，根据剧本直接生成一部电影。&lt;/p&gt;
&lt;h2 id=&quot;三、视频生成&quot;&gt;&lt;a href=&quot;#三、视频生成&quot; class=&quot;headerlink&quot; title=&quot;三、视频生成&quot;&gt;&lt;/a&gt;三、视频生成&lt;/h2&gt;&lt;p&gt;图像处理逐渐成熟以后，人工智能业界的关注重点就转向了视频。&lt;br&gt;从一个视频生成另一个视频，这就叫视频翻译。目前比较成熟的两个方向是运动传递和面部交换。&lt;/p&gt;
&lt;h3 id=&quot;3-1-运动传递&quot;&gt;&lt;a href=&quot;#3-1-运动传递&quot; class=&quot;headerlink&quot; title=&quot;3.1 运动传递&quot;&gt;&lt;/a&gt;3.1 运动传递&lt;/h3&gt;&lt;p&gt;运动传递指的是，将一个人的动作（包括身体、眼睛或嘴唇的动作）翻译到另一个人身上，使得另一个人出现一模一样的动作。&lt;br&gt;2018的论文&lt;a href=&quot;https://carolineec.github.io/everybody_dance_now/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Everybody Dance Now》&lt;/a&gt;，给出了一个模型，可以将舞者的动作移植到任何人身上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102831.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图25：动作传递）&lt;br&gt;上图中，蓝衣女子的跳舞视频完全是假的，是将左上角舞者的动作套用在她身上，自动生成的。&lt;br&gt;NVIDIA 公司的开源软件 &lt;a href=&quot;https://github.com/NVIDIA/vid2vid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vid2vid&lt;/a&gt; 更为强大，可以生成高分辨率的、连贯的逼真视频。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102832.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图26：vidvid 软件）&lt;/p&gt;
&lt;h3 id=&quot;3-2-脸部生成&quot;&gt;&lt;a href=&quot;#3-2-脸部生成&quot; class=&quot;headerlink&quot; title=&quot;3.2 脸部生成&quot;&gt;&lt;/a&gt;3.2 脸部生成&lt;/h3&gt;&lt;p&gt;脸部生成指的是，根据一张脸的表情和动作，重建另一张脸。最著名的例子是虚拟的&lt;a href=&quot;http://grail.cs.washington.edu/projects/AudioToObama/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;奥巴马演讲&lt;/a&gt;。2017年，华盛顿大学的团队发表了一段奥巴马的演讲视频。奥巴马其实从未做过这个演讲，是将别人的表情和口型套在他脸上生成的，语音也是合成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102833.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图27：虚拟的奥巴马演讲）&lt;br&gt;这种伪造的视频被称为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Deepfake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deepfake&lt;/a&gt;（深度伪造），具有很大的欺骗性，许多在线平台都禁止上传这一类视频。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102834.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图28：伪造的特朗普演讲，将喜剧演员的表演变成特朗普自己在讲。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102837.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图29：深度伪造的普京）&lt;br&gt;2018年出现的&lt;a href=&quot;https://web.stanford.edu/~zollhoef/papers/SG2018_DeepVideo/page.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《深度视频肖像》&lt;/a&gt;更进了一步，生成的视频不局限于虚拟的面部表情，还会头部旋转、眼睛凝视和眨眼，是 3D 的肖像重构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102835.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图29：深度视频肖像）&lt;br&gt;这些技术还在&lt;a href=&quot;https://www.theverge.com/2019/6/10/18659432/deepfake-ai-fakes-tech-edit-video-by-typing-new-words&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;继续发展&lt;/a&gt;，现在你可以给出任意文本，从任何你指定的对象嘴里说出来。甚至只凭一张照片，就可以生成一段表情变化的视频。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102836.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图30：一张照片生成各种表情）&lt;/p&gt;
&lt;h3 id=&quot;3-3-中国的实践&quot;&gt;&lt;a href=&quot;#3-3-中国的实践&quot; class=&quot;headerlink&quot; title=&quot;3.3 中国的实践&quot;&gt;&lt;/a&gt;3.3 中国的实践&lt;/h3&gt;&lt;p&gt;国内的人工智能视频生成，并不落后于国外。换脸应用 ZAO 只需用户上传一张照片，就能把影视剧主人公的脸换掉，好像你本人在表演电影一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102838.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图31：换脸应用 ZAO）&lt;br&gt;2018年，新华社与搜狗合作推出了虚拟新闻主播，具有真人的形象，带有声音、面部表情和动作，在电视上播报新闻，已经开通了英语、俄语、阿拉伯语的主持人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102839.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图32：虚拟新闻主播）&lt;/p&gt;
&lt;h3 id=&quot;3-4-视频渲染&quot;&gt;&lt;a href=&quot;#3-4-视频渲染&quot; class=&quot;headerlink&quot; title=&quot;3.4 视频渲染&quot;&gt;&lt;/a&gt;3.4 视频渲染&lt;/h3&gt;&lt;p&gt;除了视频生成，人工智能在视频渲染上也取得了很大进展。&lt;br&gt;Nvidia 公司2018年展示了实时光线追踪 RTX 技术。这项技术用人工智能预测光线的变化，从而不用耗费大量计算去追踪光线，因此可以实时渲染出高画质的 3D 动画。这对于视频游戏有重大意义。&lt;br&gt;下面是使用这项技术的 Unreal Engine 4，实时渲染出的一个女子的&lt;a href=&quot;https://venturebeat.com/2018/03/21/epic-games-shows-off-amazing-real-time-digital-human-with-siren-demo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3D 动画&lt;/a&gt;，可以一边计算生成，一边播放，完全没有延迟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102840.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102841.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图32：实时渲染的动画）&lt;br&gt;实时光线追踪技术还可以用于自动驾驶，在白天和黑夜的不同时间，不同的路面和环境下，预测出暴雨、风雪和强烈的眩光导致的光线变化，对驾驶做出调整。&lt;/p&gt;
&lt;h2 id=&quot;四、文本和声音处理&quot;&gt;&lt;a href=&quot;#四、文本和声音处理&quot; class=&quot;headerlink&quot; title=&quot;四、文本和声音处理&quot;&gt;&lt;/a&gt;四、文本和声音处理&lt;/h2&gt;&lt;p&gt;最后，简单提一下，人工智能在文本和声音处理领域的进展。&lt;/p&gt;
&lt;h4 id=&quot;（1）语音合成&quot;&gt;&lt;a href=&quot;#（1）语音合成&quot; class=&quot;headerlink&quot; title=&quot;（1）语音合成&quot;&gt;&lt;/a&gt;（1）语音合成&lt;/h4&gt;&lt;p&gt;谷歌在2018年推出了智能助手 Google Duplex，它会根据你的日程，自动打电话去餐厅订座位。谷歌 CEO 说，这个机器人的对话能力，使得对方完全没有发现这是机器人。&lt;/p&gt;
&lt;h4 id=&quot;（2）音乐合成&quot;&gt;&lt;a href=&quot;#（2）音乐合成&quot; class=&quot;headerlink&quot; title=&quot;（2）音乐合成&quot;&gt;&lt;/a&gt;（2）音乐合成&lt;/h4&gt;&lt;p&gt;OpenAI 基金会推出的 &lt;a href=&quot;https://openai.com/blog/musenet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MuseNet&lt;/a&gt;，通过学习数十万段 MIDI 音乐，能做到使用10种乐器，生成一段4分钟的音乐。它的官网有这些音乐的下载，相当动听。&lt;/p&gt;
&lt;h4 id=&quot;（3）自动评论&quot;&gt;&lt;a href=&quot;#（3）自动评论&quot; class=&quot;headerlink&quot; title=&quot;（3）自动评论&quot;&gt;&lt;/a&gt;（3）自动评论&lt;/h4&gt;&lt;p&gt;据报道，使用 Yelp 网站的数据进行训练的模型，可以自动生成餐厅评论。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 我喜欢这个地方，一直来这里已经好多年。它是与朋友和家人相聚的好地点，我喜欢这里的食物和服务，从未有过糟糕的经历。
- 我吃了烤蔬菜汉堡配薯条！哦，很好吃！
- 我和我的家人都是这个地方的忠实粉丝。工作人员超级好，食物也很棒。鸡肉很好，大蒜酱也很完美。配水果的冰淇淋也很美味。强烈推荐！
- 上面这些都是机器生成的评论。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（4）智能邮件&quot;&gt;&lt;a href=&quot;#（4）智能邮件&quot; class=&quot;headerlink&quot; title=&quot;（4）智能邮件&quot;&gt;&lt;/a&gt;（4）智能邮件&lt;/h4&gt;&lt;p&gt;Gmail 会根据电子邮件的来信内容，自动生成&lt;a href=&quot;https://www.blog.google/products/gmail/save-time-with-smart-reply-in-gmail/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三种不同的回复&lt;/a&gt;，让用户选择。如果只是简单回应，用户不用自己动手写。&lt;br&gt;Gmail 的&lt;a href=&quot;https://ai.googleblog.com/2018/05/smart-compose-using-neural-networks-to.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;另一个功能&lt;/a&gt;是，根据用户已经写的内容，预测接下来会写的句子，供用户选择。&lt;/p&gt;
&lt;h2 id=&quot;五、小结&quot;&gt;&lt;a href=&quot;#五、小结&quot; class=&quot;headerlink&quot; title=&quot;五、小结&quot;&gt;&lt;/a&gt;五、小结&lt;/h2&gt;&lt;p&gt;毫无疑问，人工智能是很酷的技术，创造出了神奇的产品，有着难以想象的巨大应用前景。&lt;br&gt;但是，人工智能也是一把双刃剑，模糊了现实与虚拟之间的界限，把我们带上了一条不可预测的道路。作为个人，了解这些技术的进展和潜力，有助于保持一份清醒，享受技术之福的同时，避免它带来的一些副作用。&lt;br&gt;（正文完）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;p&gt;[1] 拍卖: &lt;a href=&quot;https://www.christies.com/features/A-collaboration-between-two-artists-one-human-one-a-machine-9332-1.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.christies.com/features/A-collaboration-between-two-artists-one-human-one-a-machine-9332-1.aspx&lt;/a&gt;&lt;br&gt;[2] 科普文章: &lt;a href=&quot;https://blog.inten.to/welcome-to-the-simulation-dd0d8cb6534d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.inten.to/welcome-to-the-simulation-dd0d8cb6534d&lt;/a&gt;&lt;br&gt;[3] 腾讯课堂: &lt;a href=&quot;https://ke.qq.com/?utm=ruanyifeng&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ke.qq.com/?utm=ruanyifeng&lt;/a&gt;&lt;br&gt;[4] “腾讯课堂101计划”: &lt;a href=&quot;https://edu.qq.com/a/20190119/005414.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://edu.qq.com/a/20190119/005414.htm&lt;/a&gt;&lt;br&gt;[5] 图像的对象补全模型: &lt;a href=&quot;https://web.archive.org/web/20191016060740/http://iizuka.cs.tsukuba.ac.jp/projects/completion/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://web.archive.org/web/20191016060740/http://iizuka.cs.tsukuba.ac.jp/projects/completion/en/&lt;/a&gt;&lt;br&gt;[6] 它的网站: &lt;a href=&quot;https://www.nvidia.com/research/inpainting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.nvidia.com/research/inpainting/&lt;/a&gt;&lt;br&gt;[7] 图像软件: &lt;a href=&quot;https://www.slashgear.com/adobes-entry-level-photoshop-elements-gets-new-ai-powered-tools-04594215/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.slashgear.com/adobes-entry-level-photoshop-elements-gets-new-ai-powered-tools-04594215/&lt;/a&gt;&lt;br&gt;[8] 很好的智能算法: &lt;a href=&quot;https://towardsdatascience.com/background-removal-with-deep-learning-c4f2104b3157&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://towardsdatascience.com/background-removal-with-deep-learning-c4f2104b3157&lt;/a&gt;&lt;br&gt;[9] 线上服务: &lt;a href=&quot;https://www.remove.bg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.remove.bg/&lt;/a&gt;&lt;br&gt;[10] 更改背景: &lt;a href=&quot;https://arxiv.org/abs/1703.03872&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1703.03872&lt;/a&gt;&lt;br&gt;[11] 识别: &lt;a href=&quot;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&lt;/a&gt;&lt;br&gt;[12] 照片着色: &lt;a href=&quot;https://arxiv.org/abs/1603.06668&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1603.06668&lt;/a&gt;&lt;br&gt;[13] 着色服务: &lt;a href=&quot;https://colorize.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://colorize.cc/&lt;/a&gt;&lt;br&gt;[14] 仓库: &lt;a href=&quot;https://github.com/hindupuravinash/the-gan-zoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hindupuravinash/the-gan-zoo&lt;/a&gt;&lt;br&gt;[15] StyleGAN: &lt;a href=&quot;https://arxiv.org/abs/1812.04948&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1812.04948&lt;/a&gt;&lt;br&gt;[16] 那个网站: &lt;a href=&quot;http://www.whichfaceisreal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.whichfaceisreal.com/&lt;/a&gt;&lt;br&gt;[17] BigGAN: &lt;a href=&quot;https://arxiv.org/abs/1809.11096&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1809.11096&lt;/a&gt;&lt;br&gt;[18] pix2pix: &lt;a href=&quot;https://github.com/phillipi/pix2pix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/phillipi/pix2pix&lt;/a&gt;&lt;br&gt;[19] CycleGAN: &lt;a href=&quot;https://github.com/junyanz/CycleGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/junyanz/CycleGAN&lt;/a&gt;&lt;br&gt;[20] GauGAN: &lt;a href=&quot;http://nvidia-research-mingyuliu.com/gaugan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nvidia-research-mingyuliu.com/gaugan&lt;/a&gt;&lt;br&gt;[21] StarGAN: &lt;a href=&quot;https://github.com/yunjey/StarGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yunjey/StarGAN&lt;/a&gt;&lt;br&gt;[22] SC-FEGAN: &lt;a href=&quot;https://github.com/run-youngjoo/SC-FEGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/run-youngjoo/SC-FEGAN&lt;/a&gt;&lt;br&gt;[23] 根据文本生成图像: &lt;a href=&quot;https://arxiv.org/abs/1711.10485&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1711.10485&lt;/a&gt;&lt;br&gt;[24] 《Everybody Dance Now》: &lt;a href=&quot;https://carolineec.github.io/everybody_dance_now/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://carolineec.github.io/everybody_dance_now/&lt;/a&gt;&lt;br&gt;[25] vid2vid: &lt;a href=&quot;https://github.com/NVIDIA/vid2vid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/NVIDIA/vid2vid&lt;/a&gt;&lt;br&gt;[26] 奥巴马演讲: &lt;a href=&quot;http://grail.cs.washington.edu/projects/AudioToObama/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://grail.cs.washington.edu/projects/AudioToObama/&lt;/a&gt;&lt;br&gt;[27] Deepfake: &lt;a href=&quot;https://en.wikipedia.org/wiki/Deepfake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Deepfake&lt;/a&gt;&lt;br&gt;[28] 《深度视频肖像》: &lt;a href=&quot;https://web.stanford.edu/~zollhoef/papers/SG2018_DeepVideo/page.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://web.stanford.edu/~zollhoef/papers/SG2018_DeepVideo/page.html&lt;/a&gt;&lt;br&gt;[29] 继续发展: &lt;a href=&quot;https://www.theverge.com/2019/6/10/18659432/deepfake-ai-fakes-tech-edit-video-by-typing-new-words&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.theverge.com/2019/6/10/18659432/deepfake-ai-fakes-tech-edit-video-by-typing-new-words&lt;/a&gt;&lt;br&gt;[30] 3D 动画: &lt;a href=&quot;https://venturebeat.com/2018/03/21/epic-games-shows-off-amazing-real-time-digital-human-with-siren-demo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://venturebeat.com/2018/03/21/epic-games-shows-off-amazing-real-time-digital-human-with-siren-demo/&lt;/a&gt;&lt;br&gt;[31] MuseNet: &lt;a href=&quot;https://openai.com/blog/musenet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://openai.com/blog/musenet/&lt;/a&gt;&lt;br&gt;[32] 自动生成: &lt;a href=&quot;https://www.theverge.com/2017/8/31/16232180/ai-fake-reviews-yelp-amazon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.theverge.com/2017/8/31/16232180/ai-fake-reviews-yelp-amazon&lt;/a&gt;&lt;br&gt;[33] 三种不同的回复: &lt;a href=&quot;https://www.blog.google/products/gmail/save-time-with-smart-reply-in-gmail/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blog.google/products/gmail/save-time-with-smart-reply-in-gmail/&lt;/a&gt;&lt;br&gt;[34] 另一个功能: &lt;a href=&quot;https://ai.googleblog.com/2018/05/smart-compose-using-neural-networks-to.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ai.googleblog.com/2018/05/smart-compose-using-neural-networks-to.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;严重声明：本文转载自阮一峰的博客，版权属于原作者所有。&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/10/artificial-intelligenence.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;人工智能现在是常见词汇，大多数人可能觉得，它是学术话题，跟普通人关系不大。&lt;br&gt;但是实际上，AI 突飞猛进，正在脱离实验室，进入日常生活。仅仅是现在的技术水平，就足以模糊现实与虚拟的界限，颠覆一般民众的认知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wa
    
    </summary>
    
      <category term="未来探索" scheme="http://isunman.com/categories/%E6%9C%AA%E6%9D%A5%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="AI" scheme="http://isunman.com/tags/ai/"/>
    
      <category term="思考" scheme="http://isunman.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>下载海外地区的AppStore中应用的方法</title>
    <link href="http://isunman.com/2019/10/11/download-the-application-method-in-the-AppStore-of-overseas-region/"/>
    <id>http://isunman.com/2019/10/11/download-the-application-method-in-the-AppStore-of-overseas-region/</id>
    <published>2019-10-11T08:02:00.000Z</published>
    <updated>2020-05-10T11:37:22.208Z</updated>
    
    <content type="html">&lt;p&gt;下载海外地区的AppStore中应用的方法&lt;/p&gt;
&lt;h3 id=&quot;1、官方应用直接下载&quot;&gt;&lt;a href=&quot;#1、官方应用直接下载&quot; class=&quot;headerlink&quot; title=&quot;1、官方应用直接下载&quot;&gt;&lt;/a&gt;1、官方应用直接下载&lt;/h3&gt;&lt;p&gt;如果是下载指定地区的AppStore中的应用，必须拥有此地区的AppID，然后使用此AppID登录AppStore即可随意下载免费应用。&lt;/p&gt;
&lt;p&gt;如果需要下载收费的应用，又没有开通对应的支付方式（例如对应国家地区的信用卡），可以去TB上购买一个Gifts Card充值到账户余额。然后再操作。&lt;/p&gt;
&lt;h3 id=&quot;2、一些共享AppID的平台&quot;&gt;&lt;a href=&quot;#2、一些共享AppID的平台&quot; class=&quot;headerlink&quot; title=&quot;2、一些共享AppID的平台&quot;&gt;&lt;/a&gt;2、一些共享AppID的平台&lt;/h3&gt;&lt;p&gt;有专门做这个的网站或者论坛帖子，前几年多些。&lt;/p&gt;
&lt;p&gt;还有公众号（例如：野泽科技、绝世废柴、DoMiSo），现在以公众号居多。&lt;/p&gt;
&lt;h3 id=&quot;3、第三方平台安装&quot;&gt;&lt;a href=&quot;#3、第三方平台安装&quot; class=&quot;headerlink&quot; title=&quot;3、第三方平台安装&quot;&gt;&lt;/a&gt;3、第三方平台安装&lt;/h3&gt;&lt;p&gt;使用爱思助手或PP助手直接连接电脑安装对应的应用。&lt;/p&gt;
&lt;h3 id=&quot;4、怎么获得一个美国区的AppID&quot;&gt;&lt;a href=&quot;#4、怎么获得一个美国区的AppID&quot; class=&quot;headerlink&quot; title=&quot;4、怎么获得一个美国区的AppID&quot;&gt;&lt;/a&gt;4、怎么获得一个美国区的AppID&lt;/h3&gt;&lt;p&gt;这个目前已经有很多方法，而且各种方法都在与时俱进地跟新。可以直接搜索“知乎”等，就有许多可行的方案。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下载海外地区的AppStore中应用的方法&lt;/p&gt;
&lt;h3 id=&quot;1、官方应用直接下载&quot;&gt;&lt;a href=&quot;#1、官方应用直接下载&quot; class=&quot;headerlink&quot; title=&quot;1、官方应用直接下载&quot;&gt;&lt;/a&gt;1、官方应用直接下载&lt;/h3&gt;&lt;p&gt;如果是下载指定地区
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
      <category term="科学上网" scheme="http://isunman.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>身份证号码解释，附：18位公民身份证编码规则</title>
    <link href="http://isunman.com/2019/09/21/Explanation-of-id-number/"/>
    <id>http://isunman.com/2019/09/21/Explanation-of-id-number/</id>
    <published>2019-09-21T09:44:00.000Z</published>
    <updated>2020-05-10T11:36:37.719Z</updated>
    
    <content type="html">&lt;h2 id=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;a href=&quot;#身份证号码解释，附：18位公民身份证编码规则&quot; class=&quot;headerlink&quot; title=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;/a&gt;身份证号码解释，附：18位公民身份证编码规则&lt;/h2&gt;&lt;h3 id=&quot;身份证号码由18位数字组成，你知道它们代表的信息吗？&quot;&gt;&lt;a href=&quot;#身份证号码由18位数字组成，你知道它们代表的信息吗？&quot; class=&quot;headerlink&quot; title=&quot;身份证号码由18位数字组成，你知道它们代表的信息吗？&quot;&gt;&lt;/a&gt;身份证号码由18位数字组成，你知道它们代表的信息吗？&lt;/h3&gt;&lt;p&gt;其中的第一、第二数字表示公民所在地的省份（或自治区、直辖市）；第三、第四位数字表示公民所在地的市（或州）；第五、第六位数字表示公民所在地的县（或县级市）；接下来的8位数字表示公民的出生年、月、日；最后4位数字中的前两位表示当地派出所的编码；倒数第二位表示公民是男性还是女性（男性用单数，女性用双数）；最后一位数字是一个随机数，又称为校验码。&lt;/p&gt;
&lt;p&gt;大陆的身份证为18位，老的身份证是15位。&lt;/p&gt;
&lt;h3 id=&quot;关于身份证第18是怎么计算的，原理如下&quot;&gt;&lt;a href=&quot;#关于身份证第18是怎么计算的，原理如下&quot; class=&quot;headerlink&quot; title=&quot;关于身份证第18是怎么计算的，原理如下&quot;&gt;&lt;/a&gt;关于身份证第18是怎么计算的，原理如下&lt;/h3&gt;&lt;p&gt;根据〖中华人民共和国国家标准GB11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。&lt;/p&gt;
&lt;p&gt;地址码（身份证前六位）表示编码对象常住户口所在县(市、旗、区)的行政区划代码。（所有区域的编码可以到这个网址&lt;a href=&quot;http://xzqh.mca.gov.cn查询到最新的县及县以上的行政编码资料。）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xzqh.mca.gov.cn查询到最新的县及县以上的行政编码资料。）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;生日期码（身份证第七位到第十四位）表示编码对象出生的年、月、日，其中年份用四位数字表示，年、月、日之间不用分隔符。例如：1981年05月11日就用19810511表示。&lt;/p&gt;
&lt;p&gt;顺序码（身份证第十五位到十七位）为同一地址码所标识的区域范围内，对同年、月、日出生的人员编定的顺序号。其中第十七位奇数分给男性，偶数分给女性。&lt;/p&gt;
&lt;p&gt;校验码（身份证最后一位）是根据前面十七位数字码，按照ISO7064:1983.MOD11-2校验码计算出来的检验码。&lt;/p&gt;
&lt;h3 id=&quot;第十八位数字的计算方法&quot;&gt;&lt;a href=&quot;#第十八位数字的计算方法&quot; class=&quot;headerlink&quot; title=&quot;第十八位数字的计算方法&quot;&gt;&lt;/a&gt;第十八位数字的计算方法&lt;/h3&gt;&lt;p&gt;1.将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7910584216379105842&lt;/p&gt;
&lt;p&gt;2.将这17位数字和系数相乘的结果相加。&lt;/p&gt;
&lt;p&gt;3.用加出来和除以11，看余数是多少？&lt;/p&gt;
&lt;p&gt;4.余数只可能有012345678910这11个数字。其分别对应的最后一位身份证的号码为10X98765432。&lt;/p&gt;
&lt;p&gt;5.通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ。如果余数是10，身份证的最后一位号码就是2。&lt;/p&gt;
&lt;p&gt;例如：某男性的身份证号码是34052419800101001X。我们要看看这个身份证是不是合法的身份证。&lt;/p&gt;
&lt;p&gt;首先：我们得出，前17位的乘积和是189&lt;/p&gt;
&lt;p&gt;然后：用189除以11得出的结果是17+2/11，也就是说余数是2。&lt;/p&gt;
&lt;p&gt;最后：通过对应规则就可以知道余数2对应的数字是X。所以，这是一个合格的身份证号码。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;附：18位公民身份证编码规则&quot;&gt;&lt;a href=&quot;#附：18位公民身份证编码规则&quot; class=&quot;headerlink&quot; title=&quot;附：18位公民身份证编码规则&quot;&gt;&lt;/a&gt;附：18位公民身份证编码规则&lt;/h3&gt;&lt;p&gt;18位身份证标准在国家质量技术监督局于1999年7月1日实施的GB11643-1999《公民身份号码》中做了明确规定。GB11643-1999《公民身份号码》为GB11643-1989《社会保障号码》的修订版，其中指出将原标准名称“社会保障号码”更名为“公民身份号码”，另外GB11643-1999《公民身份号码》从实施之日起代替GB11643-1989。公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位校验码。其含义如下：&lt;/p&gt;
&lt;p&gt;1.地址码：表示编码对象常住户口所在县(市、旗、区)的行政区划代码，按GB/T2260的规定执行。&lt;/p&gt;
&lt;p&gt;2.出生日期码：表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日分别用4位、2位、2位数字表示，之间不用分隔符。&lt;/p&gt;
&lt;p&gt;3.顺序码：表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。&lt;/p&gt;
&lt;p&gt;校验的计算方式：&lt;/p&gt;
&lt;p&gt;1.对前17位数字本体码加权求和&lt;/p&gt;
&lt;p&gt;公式为：S=Sum(Ai*Wi),i=0,…,16&lt;/p&gt;
&lt;p&gt;其中Ai表示第i位置上的身份证号码数字值，Wi表示第i位置上的加权因子，其各位对应的值依次为：7910584216379105842&lt;/p&gt;
&lt;p&gt;2.以11对计算结果取模&lt;/p&gt;
&lt;p&gt;Y=mod(S,11)&lt;/p&gt;
&lt;p&gt;3.根据模的值得到对应的校验码&lt;/p&gt;
&lt;p&gt;对应关系为：&lt;/p&gt;
&lt;p&gt;Y值：012345678910&lt;/p&gt;
&lt;p&gt;校验码：10X98765432&lt;/p&gt;
&lt;h3 id=&quot;关于18位身份证号码尾数是“X”的解释&quot;&gt;&lt;a href=&quot;#关于18位身份证号码尾数是“X”的解释&quot; class=&quot;headerlink&quot; title=&quot;关于18位身份证号码尾数是“X”的解释&quot;&gt;&lt;/a&gt;关于18位身份证号码尾数是“X”的解释&lt;/h3&gt;&lt;p&gt;居民身份证的号码是按照国家的标准编制的，由18位组成：前六位为行政区划代码，第七至第十四位为出生日期码，第15至17位为顺序码，第18位为校验码。作为尾号的校验码，是由号码编制单位按统一的公式计算出来的，如果某人的尾号是0-9，都不会出现X，但如果尾号是10，那么就得用X来代替，因为如果用10做尾号，那么此人的身份证就变成了19位，而19位的号码违反了国家标准，并且我国的计算机应用系统也不承认19位的身份证号码。X是罗马数字的10，用X来代替10，可以保证公民的身份证符合国家标准。但是我国的居民身份证在升位后，一些人的尾号变成了X，这部分人在工作生活中，例如去银行存取钱、去汽车公司租赁汽车或者报名参加考试等等过程中，往往不被检验者理解，认为是假身份证，这样的误会给很多人的生活带来不便。公安局的同志希望领到X身份证的同志正确理解这个数字的含义，查验身份证的机关和单位更应该清楚这一点。&lt;/p&gt;
&lt;h3 id=&quot;一个简单身份证号尾号校验算法的PHP实现的过程&quot;&gt;&lt;a href=&quot;#一个简单身份证号尾号校验算法的PHP实现的过程&quot; class=&quot;headerlink&quot; title=&quot;一个简单身份证号尾号校验算法的PHP实现的过程&quot;&gt;&lt;/a&gt;一个简单身份证号尾号校验算法的PHP实现的过程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function checkId($id) {
    $len = strlen($id);
    if($len != 18) {
        return 0;
    }
    $a=str_split($id,1);
    $w=array(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2);
    $c=array(1,0,&amp;apos;X&amp;apos;,9,8,7,6,5,4,3,2);
    $sum = 0;
    for($i=0;$i&amp;lt;17;$i++){
        $sum= $sum + $a[$i]*$w[$i];
    }
    $r=$sum%11;
    $res=$c[$r];
    //echo &amp;quot;校验位是: &amp;quot;.$res;
    if ($res == $a[17]) {
        return 1;
    } else {
        return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;a href=&quot;#身份证号码解释，附：18位公民身份证编码规则&quot; class=&quot;headerlink&quot; title=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;/a&gt;身份证号码解释，附：18位公民身份证编码
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>九酷音乐真实地址解析</title>
    <link href="http://isunman.com/2019/08/03/9-cool-music-real-address-resolution/"/>
    <id>http://isunman.com/2019/08/03/9-cool-music-real-address-resolution/</id>
    <published>2019-08-03T09:04:00.000Z</published>
    <updated>2020-05-10T11:36:07.825Z</updated>
    
    <content type="html">&lt;p&gt;九酷音乐的资源还是比较全的；九酷的历史也比较长，从2002年就有了。&lt;br&gt;许多其他音乐平台，例如QQ音乐、虾米音乐、网易云音乐上面没有的，这里也可以找到。&lt;/p&gt;
&lt;p&gt;缺点就是网页上广告太多，而且页面也不好看。目前也没有PC客户端，手机客户端iOS版一直不能用（数据加载失败，2年多未更新了）。&lt;/p&gt;
&lt;p&gt;九酷音乐官网：&lt;a href=&quot;http://www.9ku.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.9ku.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择一首歌曲，如 &lt;a href=&quot;http://m.9ku.com/play/86179.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://m.9ku.com/play/86179.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中，86179就是歌曲的id号&lt;/p&gt;
&lt;p&gt;真实地址为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp3.9ku.com/m4a/86179.m4a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mp3.9ku.com/m4a/86179.m4a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://111.161.71.11/mp3.9ku.com/m4a/86179.m4a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://111.161.71.11/mp3.9ku.com/m4a/86179.m4a&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;九酷音乐的资源还是比较全的；九酷的历史也比较长，从2002年就有了。&lt;br&gt;许多其他音乐平台，例如QQ音乐、虾米音乐、网易云音乐上面没有的，这里也可以找到。&lt;/p&gt;
&lt;p&gt;缺点就是网页上广告太多，而且页面也不好看。目前也没有PC客户端，手机客户端iOS版一直不能用（数据加载
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="音乐" scheme="http://isunman.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>对多维数组进行排序的函数array_multisort</title>
    <link href="http://isunman.com/2019/07/31/Array_multisort-that-sorts-multidimensional-arrays/"/>
    <id>http://isunman.com/2019/07/31/Array_multisort-that-sorts-multidimensional-arrays/</id>
    <published>2019-07-31T09:57:00.000Z</published>
    <updated>2020-05-10T11:35:39.251Z</updated>
    
    <content type="html">&lt;p&gt;经常会面临这样的需求，虽然有时候我们可以在数据库查询的时候，直接对数据进行排序，但还是无法满足日益复杂的业务需求。这里边会用到两个函数一个是&lt;code&gt;array_column()&lt;/code&gt;函数，这个函数接受三个参数。详情参见这里是从二维数组中抽出一个键的值，作为一个新的数组返回。&lt;br&gt;另一个是&lt;code&gt;array_multisort()&lt;/code&gt;函数，这个函数是一个排序函数，&lt;a href=&quot;https://www.php.net/manual/zh/function.array-multisort.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详情参见这里&lt;/a&gt;。&lt;br&gt;它会依照第一个参数数组的排序规则，依照第一个参数数组的值在第三个参数重的位置对第三个参数进行排序。&lt;/p&gt;
&lt;p&gt;听不明白吧？听不明白就对了，还是直接看代码来的实在：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$orgin = array(
 array(
    &amp;apos;id&amp;apos; =&amp;gt; 5698,
    &amp;apos;first_name&amp;apos; =&amp;gt; &amp;apos;Bill&amp;apos;,
    &amp;apos;last_name&amp;apos; =&amp;gt; &amp;apos;Gates&amp;apos;,
  ),
 array(
    &amp;apos;id&amp;apos; =&amp;gt; 4767,
    &amp;apos;first_name&amp;apos; =&amp;gt; &amp;apos;Steve&amp;apos;,
    &amp;apos;last_name&amp;apos; =&amp;gt; &amp;apos;Jobs&amp;apos;,
 ),
 array(
    &amp;apos;id&amp;apos; =&amp;gt; 3809,
    &amp;apos;first_name&amp;apos; =&amp;gt; &amp;apos;Mark&amp;apos;,
    &amp;apos;last_name&amp;apos; =&amp;gt; &amp;apos;Zuckerberg&amp;apos;,
  )
);

$idArr = array_column($orgin, &amp;apos;id&amp;apos;);
array_multisort($idArr,SORT_ASC,$orgin);
var_dump($orgin);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个打印的结果是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array (size=3)
      0 =&amp;gt; 
array (size=3)
  &amp;apos;id&amp;apos; =&amp;gt; int 3809
  &amp;apos;first_name&amp;apos; =&amp;gt; string &amp;apos;Mark&amp;apos; (length=4)
  &amp;apos;last_name&amp;apos; =&amp;gt; string &amp;apos;Zuckerberg&amp;apos; (length=10)
  1 =&amp;gt; 
array (size=3)
  &amp;apos;id&amp;apos; =&amp;gt; int 4767
  &amp;apos;first_name&amp;apos; =&amp;gt; string &amp;apos;Steve&amp;apos; (length=5)
  &amp;apos;last_name&amp;apos; =&amp;gt; string &amp;apos;Jobs&amp;apos; (length=4)
  2 =&amp;gt; 
array (size=3)
  &amp;apos;id&amp;apos; =&amp;gt; int 5698
  &amp;apos;first_name&amp;apos; =&amp;gt; string &amp;apos;Bill&amp;apos; (length=4)   
  &amp;apos;last_name&amp;apos; =&amp;gt; string &amp;apos;Gates&amp;apos; (length=5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此函数有点意思。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;经常会面临这样的需求，虽然有时候我们可以在数据库查询的时候，直接对数据进行排序，但还是无法满足日益复杂的业务需求。这里边会用到两个函数一个是&lt;code&gt;array_column()&lt;/code&gt;函数，这个函数接受三个参数。详情参见这里是从二维数组中抽出一个键的值，作为一个新
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>爬虫获取知乎网页title的方法</title>
    <link href="http://isunman.com/2018/10/17/The-method-for-crawler-to-get-the-web-page-title-of-zhihu/"/>
    <id>http://isunman.com/2018/10/17/The-method-for-crawler-to-get-the-web-page-title-of-zhihu/</id>
    <published>2018-10-17T08:01:00.000Z</published>
    <updated>2020-05-10T11:34:30.377Z</updated>
    
    <content type="html">&lt;p&gt;知乎的网页标题title的提取一直有各种问题。可能是知乎自己做了防止被爬虫抓取的。普通的问题详情页和知乎专栏，都提取不到网页title，或者提取到了错误的title。&lt;/p&gt;
&lt;p&gt;本文记录了实际可用的方法，分别提取知乎问题详情页的title与知乎专栏页的title和封面图片的提取方法。&lt;/p&gt;
&lt;h2 id=&quot;知乎问题详情页的title提取&quot;&gt;&lt;a href=&quot;#知乎问题详情页的title提取&quot; class=&quot;headerlink&quot; title=&quot;知乎问题详情页的title提取&quot;&gt;&lt;/a&gt;知乎问题详情页的title提取&lt;/h2&gt;&lt;p&gt;首先看一下源代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;你必讲的笑话是哪个？ - 知乎&amp;lt;/title&amp;gt;&amp;lt;title&amp;gt;知乎 - 有问题上知乎&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中间部分源代码省略了。其中有2个title，直接使用正则匹配时，只能匹配到第2个title——“知乎 - 有问题上知乎”，所有页都是这个。&lt;/p&gt;
&lt;p&gt;再继续向下面寻找，看到这么一段：&lt;br&gt;    &lt;code&gt;&amp;lt;h1 class=&amp;quot;QuestionHeader-title&amp;quot;&amp;gt;你必讲的笑话是哪个？&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;直接使用正则匹配即可，正则匹配规则为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h1\sclass=\&amp;quot;QuestionHeader-title\&amp;quot;&amp;gt;([\s\S]+?)&amp;lt;\/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;知乎专栏文章页的title提取与封面图片提取&quot;&gt;&lt;a href=&quot;#知乎专栏文章页的title提取与封面图片提取&quot; class=&quot;headerlink&quot; title=&quot;知乎专栏文章页的title提取与封面图片提取&quot;&gt;&lt;/a&gt;知乎专栏文章页的title提取与封面图片提取&lt;/h2&gt;&lt;p&gt;首先看一下源代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;智能闹钟音箱能给自己的商业世界打开一扇窗吗？ - 知乎&amp;lt;/title&amp;gt;&amp;lt;title&amp;gt;知乎 - 有问题上知乎&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中间部分源代码省略了。其中有2个title，直接使用正则匹配时，只能匹配到第2个title——“知乎 - 有问题上知乎”，所有页都是这个。&lt;/p&gt;
&lt;p&gt;再继续向下面寻找，看到这么一段：&lt;br&gt;    &lt;code&gt;&amp;lt;header class=&amp;quot;Post-Header&amp;quot;&amp;gt;&amp;lt;h1 class=&amp;quot;Post-Title&amp;quot;&amp;gt;智能闹钟音箱能给自己的商业世界打开一扇窗吗？&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用正则匹配也匹配不到。可能是因为知乎专栏页的数据是使用js加载的，网页源代码初始代码中不含有这些数据。&lt;/p&gt;
&lt;p&gt;稍微看看知乎专栏网页代码可以发现，如果在浏览器中访问类似这样的专栏文章链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42557513&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zhuanlan.zhihu.com/p/42557513&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际会加载下面的文章内容数据 API 链接，知乎专栏页面加载完数据之后才会显示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/api/posts/42557513&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zhuanlan.zhihu.com/api/posts/42557513&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而且返回的数据就是json格式的，可以直接转换为PHP数组，然后根据数组的key值，直接获取需要的字段，然后即可使用。&lt;/p&gt;
&lt;h2 id=&quot;扩展其他知乎相关页的爬虫抓取&quot;&gt;&lt;a href=&quot;#扩展其他知乎相关页的爬虫抓取&quot; class=&quot;headerlink&quot; title=&quot;扩展其他知乎相关页的爬虫抓取&quot;&gt;&lt;/a&gt;扩展其他知乎相关页的爬虫抓取&lt;/h2&gt;&lt;p&gt;后面的参考链接中里面有一句话说的好：&lt;/p&gt;
&lt;p&gt;不管AngularJS还是其它架构，都是服务端的东西，再天花乱坠的服务端架构，到了客户端终究逃不脱HTTP协议，至少目前来说还是如此。&lt;/p&gt;
&lt;p&gt;知道用户ID之后可以相机获取：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获得用户专栏入口&lt;/li&gt;
&lt;li&gt;获得专栏文章信息&lt;/li&gt;
&lt;li&gt;获得专栏文章&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;如何用爬虫爬去知乎专栏信息&quot;&gt;https://www.zhihu.com/question/24948369/answer/29611724&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;使用以上各种方法，基本可以解决与知乎相关内容的爬虫爬取相关的问题。&lt;/p&gt;
&lt;p&gt;另一篇参考文章：&lt;a href=&quot;https://www.300168.com/biancheng/show-21974.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简单PHP实现Pocket抓取知乎专栏文章&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;知乎的网页标题title的提取一直有各种问题。可能是知乎自己做了防止被爬虫抓取的。普通的问题详情页和知乎专栏，都提取不到网页title，或者提取到了错误的title。&lt;/p&gt;
&lt;p&gt;本文记录了实际可用的方法，分别提取知乎问题详情页的title与知乎专栏页的title和封面图
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="正则表达式" scheme="http://isunman.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="爬虫" scheme="http://isunman.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>PHP模拟上传文件使用CURLFile函数</title>
    <link href="http://isunman.com/2018/09/20/php-simulates-uploading-files-using-the-CURLFile-function/"/>
    <id>http://isunman.com/2018/09/20/php-simulates-uploading-files-using-the-CURLFile-function/</id>
    <published>2018-09-20T08:30:00.000Z</published>
    <updated>2020-05-10T11:34:09.785Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、CURLFile-介绍&quot;&gt;&lt;a href=&quot;#一、CURLFile-介绍&quot; class=&quot;headerlink&quot; title=&quot;一、CURLFile 介绍&quot;&gt;&lt;/a&gt;一、CURLFile 介绍&lt;/h3&gt;&lt;h4 id=&quot;CURLFile-construct&quot;&gt;&lt;a href=&quot;#CURLFile-construct&quot; class=&quot;headerlink&quot; title=&quot;CURLFile::__construct&quot;&gt;&lt;/a&gt;CURLFile::__construct&lt;/h4&gt;&lt;p&gt;(PHP 5 &amp;gt;= 5.5.0, PHP 7)&lt;br&gt;CURLFile::__construct – curl_file_create — 创建 CURLFile 对象&lt;/p&gt;
&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;面向对象风格&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;过程化风格&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CURLFile curl_file_create ( string $filename [, string $mimetype [, string $postname ]] )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建 CURLFile 对象，使用 CURLOPT_POSTFIELDS 选项上传文件。&lt;/p&gt;
&lt;h4 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;p&gt;filename 被上传文件的 路径。&lt;/p&gt;
&lt;p&gt;mimetype 被上传文件的 MIME 类型。&lt;/p&gt;
&lt;p&gt;postname 上传数据里面的文件名。&lt;/p&gt;
&lt;h4 id=&quot;返回值&quot;&gt;&lt;a href=&quot;#返回值&quot; class=&quot;headerlink&quot; title=&quot;返回值&quot;&gt;&lt;/a&gt;返回值&lt;/h4&gt;&lt;p&gt;返回 CURLFile 对象。&lt;/p&gt;
&lt;h3 id=&quot;二、使用示例&quot;&gt;&lt;a href=&quot;#二、使用示例&quot; class=&quot;headerlink&quot; title=&quot;二、使用示例&quot;&gt;&lt;/a&gt;二、使用示例&lt;/h3&gt;&lt;h4 id=&quot;1、一个单独的函数定义&quot;&gt;&lt;a href=&quot;#1、一个单独的函数定义&quot; class=&quot;headerlink&quot; title=&quot;1、一个单独的函数定义&quot;&gt;&lt;/a&gt;1、一个单独的函数定义&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public function testUpload01(){
    $file = __DIR__.&amp;apos;\assets\test.jpg&amp;apos;;
    //var_dump($file);
    //$post[&amp;apos;file&amp;apos;] = &amp;apos;@&amp;apos;.$file;
    $obj = new CurlFile($file);
    &amp;lt;span style=&amp;quot;color:#ff0000;&amp;quot;&amp;gt;$obj-&amp;gt;setMimeType(&amp;quot;image/jpeg&amp;quot;);//必须指定文件类型，否则会默认为application/octet-stream，二进制流文件&amp;lt;/span&amp;gt;
    $post[&amp;apos;file&amp;apos;] =  $obj;
    $post[&amp;apos;abc&amp;apos;] = &amp;quot;abc&amp;quot;;
    var_dump($post);
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_HEADER, false);
    //启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch,CURLOPT_BINARYTRANSFER,true);
    curl_setopt($ch, CURLOPT_POSTFIELDS,$post);
    curl_setopt($ch, CURLOPT_URL, &amp;quot;http://localhost/fs/upload.php&amp;quot;);//上传类

    $info= curl_exec($ch);
    curl_close($ch);
    var_dump($info);
    file_put_contents(&amp;apos;./1.html&amp;apos;,$info);
    $res=json_decode($info,true);
    //var_dump($res);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2、模拟php-curl向远程服务器上传文件&quot;&gt;&lt;a href=&quot;#2、模拟php-curl向远程服务器上传文件&quot; class=&quot;headerlink&quot; title=&quot;2、模拟php curl向远程服务器上传文件&quot;&gt;&lt;/a&gt;2、模拟php curl向远程服务器上传文件&lt;/h4&gt;&lt;p&gt;第1个文件：test.php 可以向远程服务器模拟提交上传文件的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    header(&amp;apos;content-type:text/html;charset=utf8&amp;apos;);

    $ch = curl_init();

    //加@符号curl就会把它当成是文件上传处理
    $data = array(&amp;apos;img&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. dirname(__FILE__).&amp;apos;/img/1.jpg&amp;apos;);
    curl_setopt($ch,CURLOPT_URL,&amp;quot;http://localhost:8088/curl/get_img.php&amp;quot;);
    curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
    curl_setopt($ch,CURLOPT_POST,true);
    curl_setopt($ch,CURLOPT_POSTFIELDS,$data);
    $result = curl_exec($ch);
    curl_close($ch);
    echo json_decode($result);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第2个文件：get_img.php 可以接收上传文件的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
if($_FILES){
    $filename = $_FILES[&amp;apos;img&amp;apos;][&amp;apos;name&amp;apos;];
    $tmpname = $_FILES[&amp;apos;img&amp;apos;][&amp;apos;tmp_name&amp;apos;];
    if(move_uploaded_file($tmpname,dirname(__FILE__).&amp;apos;/upload/&amp;apos;.$filename)){
        echo json_encode(&amp;apos;上传成功&amp;apos;);
    }else{
        $data = json_encode($_FILES);
        echo $data;
    }
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3、本人实测可用综合示例&quot;&gt;&lt;a href=&quot;#3、本人实测可用综合示例&quot; class=&quot;headerlink&quot; title=&quot;3、本人实测可用综合示例&quot;&gt;&lt;/a&gt;3、本人实测可用综合示例&lt;/h4&gt;&lt;p&gt;第1个文件 test.php 模拟上传文件的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$file = __DIR__.&amp;apos;\test.jpg&amp;apos;;
$obj = new CurlFile($file);
$obj-&amp;gt;setMimeType(&amp;quot;image/jpeg&amp;quot;);//必须指定文件类型，否则会默认为application/octet-stream，二进制流文件&amp;lt;/span&amp;gt;
$post[&amp;apos;file&amp;apos;] =  $obj;
$post[&amp;apos;abc&amp;apos;] = &amp;quot;abc&amp;quot;;
var_dump($post);
$ch = curl_init();

curl_setopt($ch, CURLOPT_HEADER, false);
//启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch,CURLOPT_BINARYTRANSFER,true);
curl_setopt($ch, CURLOPT_POSTFIELDS,$post);
curl_setopt($ch, CURLOPT_URL, &amp;quot;http://locaolhost/test/get_img.php&amp;quot;);//上传类

$info= curl_exec($ch);
curl_close($ch);
var_dump($info);
file_put_contents(&amp;apos;./1.html&amp;apos;,$info);
$res=json_decode($info,true);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第2个文件 get_img.php 接收数据的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

print_r($_FILES);
if($_FILES){
    $filename = $_FILES[&amp;apos;file&amp;apos;][&amp;apos;name&amp;apos;];
    $tmpname = $_FILES[&amp;apos;file&amp;apos;][&amp;apos;tmp_name&amp;apos;];
    if(move_uploaded_file($tmpname,dirname(__FILE__).&amp;apos;/&amp;apos;.$filename)){
        echo json_encode(&amp;apos;SUCCESS&amp;apos;);
    }else{
        $data = json_encode($_FILES);
        echo $data;
    }
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;1、经实际测试，可以使用。如果使用本地签发的SSL证书的https协议，注意本地环境无法测试，可以暂时使用http代替。&lt;/p&gt;
&lt;p&gt;线上的https协议可以正常使用。&lt;/p&gt;
&lt;p&gt;2、线上在使用curl中转当前服务器上传的文件再次转发到另一个远程服务器时，需要把文件先临时存储到当前服务器，待另一个远程服务器接收并处理完成后再把当前服务器上的临时文件删除即可。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、CURLFile-介绍&quot;&gt;&lt;a href=&quot;#一、CURLFile-介绍&quot; class=&quot;headerlink&quot; title=&quot;一、CURLFile 介绍&quot;&gt;&lt;/a&gt;一、CURLFile 介绍&lt;/h3&gt;&lt;h4 id=&quot;CURLFile-construct&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="上传文件" scheme="http://isunman.com/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>微信红包的架构设计与算法实现</title>
    <link href="http://isunman.com/2018/09/11/architecture-design-and-algorithm-implementation-of-wechat-luckymoney/"/>
    <id>http://isunman.com/2018/09/11/architecture-design-and-algorithm-implementation-of-wechat-luckymoney/</id>
    <published>2018-09-11T10:39:00.000Z</published>
    <updated>2020-05-10T11:33:49.714Z</updated>
    
    <content type="html">&lt;h3 id=&quot;微信红包的架构设计简介&quot;&gt;&lt;a href=&quot;#微信红包的架构设计简介&quot; class=&quot;headerlink&quot; title=&quot;微信红包的架构设计简介&quot;&gt;&lt;/a&gt;微信红包的架构设计简介&lt;/h3&gt;&lt;p&gt;概况：2014年微信红包使用数据库硬抗整个流量，2015年使用cache抗流量。&lt;/p&gt;
&lt;h5 id=&quot;微信的金额什么时候算？&quot;&gt;&lt;a href=&quot;#微信的金额什么时候算？&quot; class=&quot;headerlink&quot; title=&quot;微信的金额什么时候算？&quot;&gt;&lt;/a&gt;微信的金额什么时候算？&lt;/h5&gt;&lt;p&gt;答：微信金额是拆的时候实时算出来，不是预先分配的，采用的是纯内存计算，不需要预算空间存储。。&lt;br&gt;采取实时计算金额的考虑：预算需要占存储，实时效率很高，预算才效率低。&lt;/p&gt;
&lt;h5 id=&quot;实时性：为什么明明抢到红包，点开后发现没有？&quot;&gt;&lt;a href=&quot;#实时性：为什么明明抢到红包，点开后发现没有？&quot; class=&quot;headerlink&quot; title=&quot;实时性：为什么明明抢到红包，点开后发现没有？&quot;&gt;&lt;/a&gt;实时性：为什么明明抢到红包，点开后发现没有？&lt;/h5&gt;&lt;p&gt;答：2014年的红包一点开就知道金额，分两次操作，先抢到金额，然后再转账。&lt;br&gt;2015年的红包的拆和抢是分离的，需要点两次，因此会出现抢到红包了，但点开后告知红包已经被领完的状况。进入到第一个页面不代表抢到，只表示当时红包还有。&lt;/p&gt;
&lt;h5 id=&quot;分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&quot;&gt;&lt;a href=&quot;#分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&quot; class=&quot;headerlink&quot; title=&quot;分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&quot;&gt;&lt;/a&gt;分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&lt;/h5&gt;&lt;p&gt;答：随机，额度在0.01和剩余平均值×2之间。&lt;br&gt;例如：发100块钱，总共10个红包，那么平均值是10块钱一个，那么发出来的红包的额度在0.01元～20元之间波动。&lt;br&gt;当前面3个红包总共被领了40块钱时，剩下60块钱，总共7个红包，那么这7个红包的额度在：0.01～（60/7×2）=17.14之间。&lt;br&gt;注意：这里的算法是每被抢一个后，剩下的会再次执行上面的这样的算法（Tim老师也觉得上述算法太复杂，不知基于什么样的考虑）。&lt;/p&gt;
&lt;p&gt;这样算下去，会超过最开始的全部金额，因此到了最后面如果不够这么算，那么会采取如下算法：保证剩余用户能拿到最低1分钱即可。&lt;/p&gt;
&lt;p&gt;如果前面的人手气不好，那么后面的余额越多，红包额度也就越多，因此实际概率一样的。&lt;/p&gt;
&lt;h5 id=&quot;红包的设计&quot;&gt;&lt;a href=&quot;#红包的设计&quot; class=&quot;headerlink&quot; title=&quot;红包的设计&quot;&gt;&lt;/a&gt;红包的设计&lt;/h5&gt;&lt;p&gt;答：微信从财付通拉取金额数据郭莱，生成个数/红包类型/金额放到redis集群里，app端将红包ID的请求放入请求队列中，如果发现超过红包的个数，直接返回。根据红包的裸祭处理成功得到令牌请求，则由财付通进行一致性调用，通过像比特币一样，两边保存交易记录，交易后交给第三方服务审计，如果交易过程中出现不一致就强制回归。&lt;/p&gt;
&lt;h5 id=&quot;发性处理：红包如何计算被抢完？&quot;&gt;&lt;a href=&quot;#发性处理：红包如何计算被抢完？&quot; class=&quot;headerlink&quot; title=&quot;发性处理：红包如何计算被抢完？&quot;&gt;&lt;/a&gt;发性处理：红包如何计算被抢完？&lt;/h5&gt;&lt;p&gt;答：cache会抵抗无效请求，将无效的请求过滤掉，实际进入到后台的量不大。cache记录红包个数，原子操作进行个数递减，到0表示被抢光。财付通按照20万笔每秒入账准备，但实际还不到8万每秒。&lt;/p&gt;
&lt;h5 id=&quot;通如何保持8w每秒的写入？&quot;&gt;&lt;a href=&quot;#通如何保持8w每秒的写入？&quot; class=&quot;headerlink&quot; title=&quot;通如何保持8w每秒的写入？&quot;&gt;&lt;/a&gt;通如何保持8w每秒的写入？&lt;/h5&gt;&lt;p&gt;答：多主sharding，水平扩展机器。&lt;/p&gt;
&lt;h5 id=&quot;数据容量多少？&quot;&gt;&lt;a href=&quot;#数据容量多少？&quot; class=&quot;headerlink&quot; title=&quot;数据容量多少？&quot;&gt;&lt;/a&gt;数据容量多少？&lt;/h5&gt;&lt;p&gt;答：一个红包只占一条记录，有效期只有几天，因此不需要太多空间。&lt;/p&gt;
&lt;h5 id=&quot;查询红包分配，压力大不？&quot;&gt;&lt;a href=&quot;#查询红包分配，压力大不？&quot; class=&quot;headerlink&quot; title=&quot;查询红包分配，压力大不？&quot;&gt;&lt;/a&gt;查询红包分配，压力大不？&lt;/h5&gt;&lt;p&gt;答：抢到红包的人数和红包都在一条cache记录上，没有太大的查询压力。&lt;/p&gt;
&lt;h5 id=&quot;一个红包一个队列？&quot;&gt;&lt;a href=&quot;#一个红包一个队列？&quot; class=&quot;headerlink&quot; title=&quot;一个红包一个队列？&quot;&gt;&lt;/a&gt;一个红包一个队列？&lt;/h5&gt;&lt;p&gt;答：没有队列，一个红包一条数据，数据上有一个计数器字段。&lt;/p&gt;
&lt;h5 id=&quot;有没有从数据上证明每个红包的概率是不是均等？&quot;&gt;&lt;a href=&quot;#有没有从数据上证明每个红包的概率是不是均等？&quot; class=&quot;headerlink&quot; title=&quot;有没有从数据上证明每个红包的概率是不是均等？&quot;&gt;&lt;/a&gt;有没有从数据上证明每个红包的概率是不是均等？&lt;/h5&gt;&lt;p&gt;答：不是绝对均等，就是一个简单的拍脑袋算法。&lt;/p&gt;
&lt;h5 id=&quot;拍脑袋算法，会不会出现两个最佳？&quot;&gt;&lt;a href=&quot;#拍脑袋算法，会不会出现两个最佳？&quot; class=&quot;headerlink&quot; title=&quot;拍脑袋算法，会不会出现两个最佳？&quot;&gt;&lt;/a&gt;拍脑袋算法，会不会出现两个最佳？&lt;/h5&gt;&lt;p&gt;答：会出现金额一样的，但是手气最佳只有一个，先抢到的那个最佳。&lt;/p&gt;
&lt;h5 id=&quot;每领一个红包就更新数据么？&quot;&gt;&lt;a href=&quot;#每领一个红包就更新数据么？&quot; class=&quot;headerlink&quot; title=&quot;每领一个红包就更新数据么？&quot;&gt;&lt;/a&gt;每领一个红包就更新数据么？&lt;/h5&gt;&lt;p&gt;答：每抢到一个红包，就cas更新剩余金额和红包个数。&lt;/p&gt;
&lt;h5 id=&quot;红包如何入库入账？&quot;&gt;&lt;a href=&quot;#红包如何入库入账？&quot; class=&quot;headerlink&quot; title=&quot;红包如何入库入账？&quot;&gt;&lt;/a&gt;红包如何入库入账？&lt;/h5&gt;&lt;p&gt;数据库会累加已经领取的个数与金额，插入一条领取记录。入账则是后台异步操作。&lt;/p&gt;
&lt;h5 id=&quot;入帐出错怎么办？比如红包个数没了，但余额还有？&quot;&gt;&lt;a href=&quot;#入帐出错怎么办？比如红包个数没了，但余额还有？&quot; class=&quot;headerlink&quot; title=&quot;入帐出错怎么办？比如红包个数没了，但余额还有？&quot;&gt;&lt;/a&gt;入帐出错怎么办？比如红包个数没了，但余额还有？&lt;/h5&gt;&lt;p&gt;答：最后会有一个take all操作。另外还有一个对账来保障。&lt;/p&gt;
&lt;h3 id=&quot;算法实现java版&quot;&gt;&lt;a href=&quot;#算法实现java版&quot; class=&quot;headerlink&quot; title=&quot;算法实现java版&quot;&gt;&lt;/a&gt;算法实现java版&lt;/h3&gt;&lt;p&gt;算法很简单，不是提前算好，而是抢红包时计算&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static double getRandomMoney(RedPackage _redPackage) {
// remainSize 剩余的红包数量
// remainMoney 剩余的钱
if (_redPackage.remainSize == 1) {
    _redPackage.remainSize--;
    return (double) Math.round(_redPackage.remainMoney * 100) / 100;
}
Random r     = new Random();
double min   = 0.01; //
double max   = _redPackage.remainMoney / _redPackage.remainSize * 2;
double money = r.nextDouble() * max;
money = money &amp;lt;= min ? 0.01: money;
money = Math.floor(money * 100) / 100;
_redPackage.remainSize--;
_redPackage.remainMoney -= money;
return money;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;LeftMoneyPackage&lt;/code&gt;数据结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class RedPackage {
int    remainSize;
double remainMoney;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试时初始化相关数据是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static void init() {
redPackage.remainSize  = 20;
redPackage.remainMoney = 200;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;算法实现PHP版&quot;&gt;&lt;a href=&quot;#算法实现PHP版&quot; class=&quot;headerlink&quot; title=&quot;算法实现PHP版&quot;&gt;&lt;/a&gt;算法实现PHP版&lt;/h3&gt;&lt;p&gt;关键就是定义核心函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getrandommoney($remainmoney,$remainpacket,$moneymax = 0){
if($remainpacket &amp;lt; 1 || $remainmoney &amp;lt;= 0){
    return 0;
}
if($remainpacket == 1){
    return     $remainmoney;
}

$min = 1;//注意倍数
$max = $remainmoney / $remainpacket * 2;
$money = rand($min,$max) ;
$money = $money &amp;lt;= $min ? $min : $money;
//每一次领取时的最大值
if($moneymax &amp;amp;&amp;amp; $money &amp;gt; $moneymax){
    $money = $moneymax;
}

return $money;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$lmremainingtotal = 200.00;//总金额
$lmremainingtimes = 20;//总个数
$lmmoneymax = 0;
$lmremainingtotaltemp = $lmremainingtotal * 100;
$getonelm = getrandommoney($lmremainingtotaltemp,$lmremainingtimes);
$getonelm = round($getonelm/100,2);    
echo $getonelm;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;1、注意函数内部实现时使用的整数，传参进去时需要扩大100倍，最后得到的本次随机数需要在缩小至1%。&lt;/p&gt;
&lt;p&gt;2、增加了每一次调用的随机最大数限额这个参数，默认为0表示不限。&lt;/p&gt;
&lt;p&gt;3、更改剩余的红包总额度与红包个数，是在函数外实现的（必须步骤）。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;上述方法都是每次计算一个红包的额度。如果需要一次性计算所有的红包，并分配完成，则需要循环执行。注意数据并发量的大小。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;微信红包的架构设计简介&quot;&gt;&lt;a href=&quot;#微信红包的架构设计简介&quot; class=&quot;headerlink&quot; title=&quot;微信红包的架构设计简介&quot;&gt;&lt;/a&gt;微信红包的架构设计简介&lt;/h3&gt;&lt;p&gt;概况：2014年微信红包使用数据库硬抗整个流量，2015年使用cac
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
      <category term="微信" scheme="http://isunman.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>自定义iPhone的铃声</title>
    <link href="http://isunman.com/2018/09/08/customize-your-iPhones-ringtone/"/>
    <id>http://isunman.com/2018/09/08/customize-your-iPhones-ringtone/</id>
    <published>2018-09-07T19:31:00.000Z</published>
    <updated>2020-05-10T11:33:32.630Z</updated>
    
    <content type="html">&lt;h3 id=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;a href=&quot;#需使用Mac电脑上的itunes进行设置。&quot; class=&quot;headerlink&quot; title=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;/a&gt;需使用Mac电脑上的itunes进行设置。&lt;/h3&gt;&lt;p&gt;具体方法如下：&lt;/p&gt;
&lt;p&gt;1、将手机和苹果电脑连接，打开iTunes切换到资料库看“xxx”的iphone这一栏有没有铃声菜单，没有的话点击编辑菜单勾选铃声。&lt;/p&gt;
&lt;p&gt;2、下载你喜欢的歌曲点击歌曲-&amp;gt;文件-&amp;gt;添加到资料库，选取要自定义铃声的歌曲之后选择打开。&lt;/p&gt;
&lt;p&gt;3、选定歌曲右击-&amp;gt;显示简介-&amp;gt;选项，选择开始停止时间，记得打钩 ( 这里注意的是苹果的铃声只能在40s内 ),然后点击好。&lt;/p&gt;
&lt;p&gt;4、选定歌曲文件-&amp;gt;转换-&amp;gt;创建ACC版本，出现两个同名文件。&lt;/p&gt;
&lt;p&gt;5、右击刚刚新生成同名文件选择在Finder打开，修改该文件的扩展名为m4r。为了后续操作方便把该文件拖到桌面。&lt;/p&gt;
&lt;p&gt;6、返回资料库删除刚刚生成的同名文件。点击音乐-&amp;gt;铃声把刚刚拖到桌面的m4r文件,拖放到列表&lt;/p&gt;
&lt;p&gt;7、点击手机按钮进入手机管理。打开手机 设置-&amp;gt;声音与触感-&amp;gt;电话铃声 就可以自定义铃声了。&lt;/p&gt;
&lt;p&gt;其中，第2-4步的扩展可以参考如下：&lt;/p&gt;
&lt;h3 id=&quot;mp3文件到acc文件的剪切与格式转换&quot;&gt;&lt;a href=&quot;#mp3文件到acc文件的剪切与格式转换&quot; class=&quot;headerlink&quot; title=&quot;mp3文件到acc文件的剪切与格式转换&quot;&gt;&lt;/a&gt;mp3文件到acc文件的剪切与格式转换&lt;/h3&gt;&lt;p&gt;当先打开访达，在访达点击左侧的音乐。&lt;/p&gt;
&lt;p&gt;在音乐里面选择一个需要剪切的音频文件，然后右键打开方式为图二的软件即可。&lt;/p&gt;
&lt;p&gt;打开软件后点击这个音乐文件，然后看到出现在下方点击名字上的右侧三个小点。并在菜单上选择歌曲信息。&lt;/p&gt;
&lt;p&gt;然后在这个信息框点击选项，把开始结束这里勾上。&lt;/p&gt;
&lt;p&gt;输入一个需要的时间，即音乐的时长。而后看到这个音乐已经被修改了时长了。例如这里设置为10秒钟，则输入10即可。&lt;/p&gt;
&lt;p&gt;然后点击菜单栏上的文件转换，选择创建ACC版本。&lt;/p&gt;
&lt;p&gt;这个时候看到在原来的名字下面多个版本，就是创建后的文件，把文件拖到桌面。接着桌面多个剪切后的音频文件了。一个音频文件至此就剪切剪辑完毕了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;a href=&quot;#需使用Mac电脑上的itunes进行设置。&quot; class=&quot;headerlink&quot; title=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;/a&gt;需使用Mac电脑上的itunes进行设置。&lt;/
    
    </summary>
    
      <category term="Mac使用" scheme="http://isunman.com/categories/mac%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>如何下载知乎视频</title>
    <link href="http://isunman.com/2018/08/29/how-to-download-zhihu-video/"/>
    <id>http://isunman.com/2018/08/29/how-to-download-zhihu-video/</id>
    <published>2018-08-29T12:16:00.000Z</published>
    <updated>2020-05-10T11:33:14.179Z</updated>
    
    <content type="html">&lt;p&gt;知乎视频缓存是分段每一段几秒，不可能有完整文件可以一次下载完成的。大部分浏览器视频探测下载插件也不管用。&lt;/p&gt;
&lt;p&gt;下面说一种亲测实用的方法。&lt;/p&gt;
&lt;h3 id=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;a href=&quot;#1、先找到视频的真正地址，一般都是m3u8格式。&quot; class=&quot;headerlink&quot; title=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;/a&gt;1、先找到视频的真正地址，一般都是m3u8格式。&lt;/h3&gt;&lt;p&gt;方法有许多种。暂时介绍2种。&lt;/p&gt;
&lt;p&gt;第1种：&lt;br&gt;如果已经获取到形如&lt;a href=&quot;https://v.vzuu.com/video/1018150775008034816格式的知乎视频地址，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://v.vzuu.com/video/1018150775008034816格式的知乎视频地址，&lt;/a&gt;&lt;br&gt;则使用&lt;a href=&quot;https://lens.zhihu.com/api/videos/1018150775008034816来获取视频的真实地址；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lens.zhihu.com/api/videos/1018150775008034816来获取视频的真实地址；&lt;/a&gt;&lt;br&gt;最后的数字是视频网页的地址中的参数，返回的json 里有 m3u8 地址。&lt;/p&gt;
&lt;p&gt;第2种：&lt;br&gt;实用浏览器工具“代码检查”或者“查看源码”或者“firebug”，查找到视频的真实地址。&lt;/p&gt;
&lt;h3 id=&quot;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot;&gt;&lt;a href=&quot;#2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot; class=&quot;headerlink&quot; title=&quot;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot;&gt;&lt;/a&gt;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&lt;/h3&gt;&lt;p&gt;需要注意的是，需要提前本地安装好ffmpeg；使用命令时，如不识别ffmpeg则需要使用ffmpeg的绝对路径。&lt;/p&gt;
&lt;p&gt;ffmpeg -i “视频真实地址URL” -c copy m.mp4&lt;/p&gt;
&lt;p&gt;执行完成之后，在执行命令行切换的当前目录下就是生成m.mp4的文件。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;知乎视频缓存是分段每一段几秒，不可能有完整文件可以一次下载完成的。大部分浏览器视频探测下载插件也不管用。&lt;/p&gt;
&lt;p&gt;下面说一种亲测实用的方法。&lt;/p&gt;
&lt;h3 id=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;a href=&quot;#1、先找到视频的真正地址，一般
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工作" scheme="http://isunman.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
</feed>
