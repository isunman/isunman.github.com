<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳侠</title>
  <subtitle>我是一颗恒星</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://isunman.com/"/>
  <updated>2021-04-24T21:40:44.765Z</updated>
  <id>http://isunman.com/</id>
  
  <author>
    <name>isunman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器管理血的教训</title>
    <link href="http://isunman.com/2021/04/25/Server-management-blood-lessons/"/>
    <id>http://isunman.com/2021/04/25/Server-management-blood-lessons/</id>
    <published>2021-04-24T21:38:00.000Z</published>
    <updated>2021-04-24T21:40:44.765Z</updated>
    
    <content type="html">&lt;p&gt;服务器管理血的教训&lt;/p&gt;
&lt;p&gt;服务器管理，尤其是Linux服务器管理，必须注意以下几项原则，并做到。&lt;/p&gt;
&lt;p&gt;###1、绝对不能随便使用&lt;code&gt;rm -rf&lt;/code&gt;命令&lt;br&gt;因为会递归强制删除文件，几乎都不会可恢复。【影响响程度太深】&lt;/p&gt;
&lt;h4 id=&quot;挽救措施：&quot;&gt;&lt;a href=&quot;#挽救措施：&quot; class=&quot;headerlink&quot; title=&quot;挽救措施：&quot;&gt;&lt;/a&gt;挽救措施：&lt;/h4&gt;&lt;p&gt;1、马上停止数据继续写入，将系统挂起。使用一些恢复数据的方法进行磁盘数据数据恢复操作。一般不能全部恢复；而且还会影响线上的业务的停止。&lt;/p&gt;
&lt;p&gt;2、把快照的数据恢复到一个其他不是生产环境的阿里云服务器实例上，然后恢复到那个快照中的数据，再把误删除而需要的数据拷贝过来。原线上生产环境的业务不用停止。&lt;/p&gt;
&lt;p&gt;###2、绝对不能使用 &lt;code&gt;yum update&lt;/code&gt;命令&lt;br&gt;因为会升级Linux 内核，而这个升级后的内核可能会引起各种问题。【影响范围太大】&lt;/p&gt;
&lt;h4 id=&quot;挽救措施：-1&quot;&gt;&lt;a href=&quot;#挽救措施：-1&quot; class=&quot;headerlink&quot; title=&quot;挽救措施：&quot;&gt;&lt;/a&gt;挽救措施：&lt;/h4&gt;&lt;p&gt;如果之前的系统内核还在，重启启动那个内核；&lt;br&gt;如果没问题的话，设置开机启动的内核为这个正常可用的内核。&lt;/p&gt;
&lt;p&gt;###3、关键操作开始之前必须备份数据+快照&lt;/p&gt;
&lt;p&gt;既不能因为精神不好产生错误的指令输入，或者粗心大意没有在意造成严重的后果；&lt;br&gt;又不能怕操作错误而什么都不敢做了。&lt;/p&gt;
&lt;p&gt;有一个宗旨【稳定第一】【宁愿冗余，也不的丢失数据】。&lt;/p&gt;
&lt;p&gt;不明确知道命令输入执行的后果的，就绝不执行。&lt;/p&gt;
&lt;p&gt;——————于2021年04月25日 凌晨5：35——必须记下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;服务器管理血的教训&lt;/p&gt;
&lt;p&gt;服务器管理，尤其是Linux服务器管理，必须注意以下几项原则，并做到。&lt;/p&gt;
&lt;p&gt;###1、绝对不能随便使用&lt;code&gt;rm -rf&lt;/code&gt;命令&lt;br&gt;因为会递归强制删除文件，几乎都不会可恢复。【影响响程度太深】&lt;/p&gt;
&lt;h4 
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>DiscuzX3.1使用Composer安装第三方类库</title>
    <link href="http://isunman.com/2021/04/23/Discuz-X3.1-uses-Composer-to-install-third-party-libraries/"/>
    <id>http://isunman.com/2021/04/23/Discuz-X3.1-uses-Composer-to-install-third-party-libraries/</id>
    <published>2021-04-23T09:48:00.000Z</published>
    <updated>2021-04-23T10:01:10.112Z</updated>
    
    <content type="html">&lt;p&gt;Discuz X3.1 是一个成熟的基于PHP开发的社区系统（广义上来讲是一个建站系统），自从被企鹅收购后悄无声息的被遗弃了，伤感啊。如今要在Discuz上加什么功能，改bug什么的只能依靠自力更生了；好在有各种开源社区，开发好的功能、类库你可以无偿的直接拿来用。&lt;/p&gt;
&lt;p&gt;Composer 是一个PHP类库管理器（官网&lt;a href=&quot;http://docs.phpcomposer.com）。Composer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.phpcomposer.com）。Composer&lt;/a&gt; 优雅的解决了PHP项目中第三方类库的安装及依赖关系。很多成熟的项目（如 Laravel ）已经把Composer作为首选的安装方式；&lt;/p&gt;
&lt;p&gt;所以，在Discuz X3.1 上安装第三方类库使用Composer后，会很大提高生产力。&lt;/p&gt;
&lt;p&gt;下面我来说说如何在 Discuz X3.1中使用 Composer 安装并使用第三方类库 ；&lt;/p&gt;
&lt;h3 id=&quot;先说安装Composer到Discuz-X3-1框架下&quot;&gt;&lt;a href=&quot;#先说安装Composer到Discuz-X3-1框架下&quot; class=&quot;headerlink&quot; title=&quot;先说安装Composer到Discuz X3.1框架下&quot;&gt;&lt;/a&gt;先说安装Composer到Discuz X3.1框架下&lt;/h3&gt;&lt;h4 id=&quot;一-修改-class-core-php-source-class-class-core-php-如下&quot;&gt;&lt;a href=&quot;#一-修改-class-core-php-source-class-class-core-php-如下&quot; class=&quot;headerlink&quot; title=&quot;一. 修改 class_core.php (\source\class\class_core.php) 如下&quot;&gt;&lt;/a&gt;一. 修改 &lt;code&gt;class_core.php (\source\class\class_core.php)&lt;/code&gt; 如下&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$autoloadfile=DISCUZ_ROOT.&amp;apos;/vendor/autoload.php&amp;apos;;
if(!file_exists($autoloadfile)){  
    if(function_exists(&amp;apos;spl_autoload_register&amp;apos;)) {
        spl_autoload_register(array(&amp;apos;core&amp;apos;, &amp;apos;autoload&amp;apos;));
    } else {
           function __autoload($class) {
            return core::autoload($class);
        }
       }
}else{
    require_once  $autoloadfile;//如果存在Composer 加载器 ，则使用 ；
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;二-在-Discuz-目录下，新建一个-composer-json-内容如下：&quot;&gt;&lt;a href=&quot;#二-在-Discuz-目录下，新建一个-composer-json-内容如下：&quot; class=&quot;headerlink&quot; title=&quot;二. 在 Discuz 目录下，新建一个 composer.json 内容如下：&quot;&gt;&lt;/a&gt;二. 在 Discuz 目录下，新建一个 composer.json 内容如下：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;{

    &amp;quot;require&amp;quot;: {
         &amp;quot;guzzlehttp/guzzle&amp;quot;: &amp;quot;~6.0&amp;quot;
    },

    &amp;quot;autoload&amp;quot;:{
        &amp;quot;classmap&amp;quot;: [&amp;quot;source/class/&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;三-终端上执行命令-composer-install&quot;&gt;&lt;a href=&quot;#三-终端上执行命令-composer-install&quot; class=&quot;headerlink&quot; title=&quot;三. 终端上执行命令 composer install&quot;&gt;&lt;/a&gt;三. 终端上执行命令 &lt;code&gt;composer install&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;看到类似这样的执行结果，表示已经安装成功了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 10 installs, 0 updates, 0 removals
  - Installing ralouphie/getallheaders (3.0.3): Loading from cache
  - Installing psr/http-message (1.0.1): Loading from cache
  - Installing guzzlehttp/psr7 (1.8.1): Loading from cache
  - Installing guzzlehttp/promises (1.4.1): Loading from cache
  - Installing symfony/polyfill-php72 (v1.19.0): Loading from cache
  - Installing symfony/polyfill-intl-normalizer (v1.19.0): Loading from cache
  - Installing paragonie/random_compat (v2.0.20): Loading from cache
  - Installing symfony/polyfill-php70 (v1.19.0): Loading from cache
  - Installing symfony/polyfill-intl-idn (v1.19.0): Loading from cache
  - Installing guzzlehttp/guzzle (6.5.5): Loading from cache
guzzlehttp/psr7 suggests installing laminas/laminas-httphandlerrunner (Emit PSR-   7 responses)
symfony/polyfill-intl-normalizer suggests installing ext-intl (For best performa   nce)
paragonie/random_compat suggests installing ext-libsodium (Provides a modern cry   pto API that can be used to generate random bytes.)
symfony/polyfill-intl-idn suggests installing ext-intl (For best performance)
guzzlehttp/guzzle suggests installing psr/log (Required for using the Log middle   ware)
Writing lock file
Generating autoload files
4 packages you are using are looking for funding.
Use the `composer fund` command to find out more!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外，也可以查看项目根目录下的vendor下面的文件，核验新引入的类库是否下载更新成功。&lt;/p&gt;
&lt;p&gt;具体如何安装及使用 Composer 请参阅 &lt;a href=&quot;http://docs.phpcomposer.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.phpcomposer.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;再说在Discuz程序中如何使用-“composer安装”的第三方类库&quot;&gt;&lt;a href=&quot;#再说在Discuz程序中如何使用-“composer安装”的第三方类库&quot; class=&quot;headerlink&quot; title=&quot;再说在Discuz程序中如何使用 “composer安装”的第三方类库&quot;&gt;&lt;/a&gt;再说在Discuz程序中如何使用 “composer安装”的第三方类库&lt;/h3&gt;&lt;p&gt;通过Composer autoload 加载器会把这些第三方库自动加载进来，这些第三方类库程序中的类、方法(函数)等等 在Discuz 程序中你想怎么用都可以。&lt;/p&gt;
&lt;p&gt;例如，以使用guzzle为例。在任何一个Discuz X3.1框架下的PHP文件中，直接使用下面代码即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use GuzzleHttp\Client;

$client = new Client([
    // Base URI is used with relative requests
    &amp;apos;base_uri&amp;apos; =&amp;gt; &amp;apos;http://httpbin.org&amp;apos;,
    // You can set any number of default request options.
    &amp;apos;timeout&amp;apos;  =&amp;gt; 2.0,
]);

$response = $client-&amp;gt;get(&amp;apos;http://httpbin.org/get&amp;apos;);

$code = $response-&amp;gt;getStatusCode(); // 200
$reason = $response-&amp;gt;getReasonPhrase(); // OK

// Check if a header exists.
if ($response-&amp;gt;hasHeader(&amp;apos;Content-Length&amp;apos;)) {
    echo &amp;quot;It exists&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外，Discuz X3.2 也适用上述方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Discuz X3.1 是一个成熟的基于PHP开发的社区系统（广义上来讲是一个建站系统），自从被企鹅收购后悄无声息的被遗弃了，伤感啊。如今要在Discuz上加什么功能，改bug什么的只能依靠自力更生了；好在有各种开源社区，开发好的功能、类库你可以无偿的直接拿来用。&lt;/p&gt;

    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Discuz" scheme="http://isunman.com/tags/discuz/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>DiscuzX二次开发之目录结构和运行逻辑</title>
    <link href="http://isunman.com/2021/04/23/DiscuzX-secondary-development-directory-structure-and-operational-logic/"/>
    <id>http://isunman.com/2021/04/23/DiscuzX-secondary-development-directory-structure-and-operational-logic/</id>
    <published>2021-04-22T19:15:00.000Z</published>
    <updated>2021-04-22T19:17:22.602Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-目录结构&quot;&gt;&lt;a href=&quot;#1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1.目录结构&quot;&gt;&lt;/a&gt;1.目录结构&lt;/h2&gt;&lt;p&gt;DISCUZ使用自己的框架，与现在主流的web框架不同，DISCUZ没有路由表，他的路由是由入口文件来实现的。&lt;/p&gt;
&lt;h3 id=&quot;api&quot;&gt;&lt;a href=&quot;#api&quot; class=&quot;headerlink&quot; title=&quot;api&quot;&gt;&lt;/a&gt;api&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;uc.php UCenter 通信文件&lt;/li&gt;
&lt;li&gt;/api/addons 应用中心&lt;/li&gt;
&lt;li&gt;/api/connect 通讯互联&lt;/li&gt;
&lt;li&gt;/api/google Google引擎结构处理&lt;/li&gt;
&lt;li&gt;/api/javascript 数据和广告的js调用&lt;/li&gt;
&lt;li&gt;/api/manyou manyou应用及搜索等相关服务&lt;/li&gt;
&lt;li&gt;/api/remote 远程更新&lt;/li&gt;
&lt;li&gt;/api/trade 支付宝、财付通等交易接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;archiver-论坛Archiver静态化目录&quot;&gt;&lt;a href=&quot;#archiver-论坛Archiver静态化目录&quot; class=&quot;headerlink&quot; title=&quot;archiver (论坛Archiver静态化目录)&quot;&gt;&lt;/a&gt;archiver (论坛Archiver静态化目录)&lt;/h3&gt;&lt;h3 id=&quot;config&quot;&gt;&lt;a href=&quot;#config&quot; class=&quot;headerlink&quot; title=&quot;config&quot;&gt;&lt;/a&gt;config&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;config_global.php 论坛核心参数配置文件&lt;/li&gt;
&lt;li&gt;config_ucenter.php UCenter核心参数配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;data-论坛数据缓存目录&quot;&gt;&lt;a href=&quot;#data-论坛数据缓存目录&quot; class=&quot;headerlink&quot; title=&quot;data (论坛数据缓存目录)&quot;&gt;&lt;/a&gt;data (论坛数据缓存目录)&lt;/h3&gt;&lt;h3 id=&quot;install-论坛安装目录-初始化运行时直接请求到此处将重新安装论坛&quot;&gt;&lt;a href=&quot;#install-论坛安装目录-初始化运行时直接请求到此处将重新安装论坛&quot; class=&quot;headerlink&quot; title=&quot;install (论坛安装目录(初始化运行时直接请求到此处将重新安装论坛))&quot;&gt;&lt;/a&gt;install (论坛安装目录(初始化运行时直接请求到此处将重新安装论坛))&lt;/h3&gt;&lt;h3 id=&quot;source-程序后端功能处理目录&quot;&gt;&lt;a href=&quot;#source-程序后端功能处理目录&quot; class=&quot;headerlink&quot; title=&quot;source (程序后端功能处理目录)&quot;&gt;&lt;/a&gt;source (程序后端功能处理目录)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;discuz_version.php 程序版本号文件&lt;/li&gt;
&lt;li&gt;/source/admincp 后台管理&lt;/li&gt;
&lt;li&gt;/source/archiver 论坛archiver静态化程序目录&lt;/li&gt;
&lt;li&gt;/source/class 核心类库&lt;/li&gt;
&lt;li&gt;/source/function discuzX自定义函数库&lt;/li&gt;
&lt;li&gt;/source/include 程序功能组件目录&lt;/li&gt;
&lt;li&gt;/source/language 程序语言包(kv结构)&lt;/li&gt;
&lt;li&gt;/source/module 程序功能模块程序包&lt;/li&gt;
&lt;li&gt;/source/plugins 插件扩展目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;static-程序资源目录-头像、图片、下载文件、js文件等等&quot;&gt;&lt;a href=&quot;#static-程序资源目录-头像、图片、下载文件、js文件等等&quot; class=&quot;headerlink&quot; title=&quot;static (程序资源目录(头像、图片、下载文件、js文件等等))&quot;&gt;&lt;/a&gt;static (程序资源目录(头像、图片、下载文件、js文件等等))&lt;/h3&gt;&lt;h3 id=&quot;template-前端模板目录&quot;&gt;&lt;a href=&quot;#template-前端模板目录&quot; class=&quot;headerlink&quot; title=&quot;template (前端模板目录)&quot;&gt;&lt;/a&gt;template (前端模板目录)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;/default/common 基础css文件、header、footer等公共引入文件&lt;/li&gt;
&lt;li&gt;/default/collage 大学计划页面&lt;/li&gt;
&lt;li&gt;/default/dige dige专区页面&lt;/li&gt;
&lt;li&gt;/default/forum 首页、帖子页面&lt;/li&gt;
&lt;li&gt;/default/member 会员页面&lt;/li&gt;
&lt;li&gt;/default/home 家园页面&lt;/li&gt;
&lt;li&gt;/default/group 群组页面&lt;/li&gt;
&lt;li&gt;/default/mobile 移动端页面&lt;/li&gt;
&lt;li&gt;/default/portal 文章页面&lt;/li&gt;
&lt;li&gt;/default/search 搜索页面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;uc-client-UCenter客户端&quot;&gt;&lt;a href=&quot;#uc-client-UCenter客户端&quot; class=&quot;headerlink&quot; title=&quot;uc_client (UCenter客户端)&quot;&gt;&lt;/a&gt;uc_client (UCenter客户端)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;/uc_client/control UC业务处理操作类&lt;/li&gt;
&lt;li&gt;/uc_client/data 缓存文件目录&lt;/li&gt;
&lt;li&gt;/uc_client/lib 类库目录(包括数据库操作类,XML类,UCCODE类,邮件发送类)&lt;/li&gt;
&lt;li&gt;/uc_client/model UC业务模型类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;uc-server-UCenter服务端-后台ucenter功能实现目录&quot;&gt;&lt;a href=&quot;#uc-server-UCenter服务端-后台ucenter功能实现目录&quot; class=&quot;headerlink&quot; title=&quot;uc_server (UCenter服务端 后台ucenter功能实现目录)&quot;&gt;&lt;/a&gt;uc_server (UCenter服务端 后台ucenter功能实现目录)&lt;/h3&gt;&lt;h3 id=&quot;根目录文件&quot;&gt;&lt;a href=&quot;#根目录文件&quot; class=&quot;headerlink&quot; title=&quot;根目录文件&quot;&gt;&lt;/a&gt;根目录文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;admin.php 后台入口文件&lt;/li&gt;
&lt;li&gt;api.php API输出 入口文件&lt;/li&gt;
&lt;li&gt;collage.php 大学计划入口文件&lt;/li&gt;
&lt;li&gt;composer.json composer依赖版本记录文件&lt;/li&gt;
&lt;li&gt;composer.lock composer依赖版本控制文件&lt;/li&gt;
&lt;li&gt;connect.php 云平台接口文件&lt;/li&gt;
&lt;li&gt;dige.php dige专区入口文件&lt;/li&gt;
&lt;li&gt;forum.php 帖子信息入口文件&lt;/li&gt;
&lt;li&gt;group.php 群组入口文件&lt;/li&gt;
&lt;li&gt;home.php 家园入口文件&lt;/li&gt;
&lt;li&gt;index.php 首页&lt;/li&gt;
&lt;li&gt;member.php 用户入口文件（登录、注册、退出等）&lt;/li&gt;
&lt;li&gt;misc.php 程序杂项扩展入口&lt;/li&gt;
&lt;li&gt;plugin.php 插件入口文件&lt;/li&gt;
&lt;li&gt;portal.php 门户入口文件&lt;/li&gt;
&lt;li&gt;robots.txt 搜索引擎限制文件&lt;/li&gt;
&lt;li&gt;search.php 搜索频道入口文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-运行逻辑&quot;&gt;&lt;a href=&quot;#2-运行逻辑&quot; class=&quot;headerlink&quot; title=&quot;2. 运行逻辑&quot;&gt;&lt;/a&gt;2. 运行逻辑&lt;/h2&gt;&lt;p&gt;discuz的入口文件起到了路由的作用。一个标准的discuz请求如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/home.php?mod=space&amp;amp;uid=1&amp;amp;do=profile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当在浏览器输入以上url时，首先执行的是跟目录下的 home.php 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

define(&amp;apos;APPTYPEID&amp;apos;, 1);
define(&amp;apos;CURSCRIPT&amp;apos;, &amp;apos;home&amp;apos;);

if(!empty($_GET[&amp;apos;mod&amp;apos;]) &amp;amp;&amp;amp; ($_GET[&amp;apos;mod&amp;apos;] == &amp;apos;misc&amp;apos; || $_GET[&amp;apos;mod&amp;apos;] == &amp;apos;invite&amp;apos;)) {
    define(&amp;apos;ALLOWGUEST&amp;apos;, 1);
}

require_once &amp;apos;./source/class/class_core.php&amp;apos;;  //引入核心类文件，作用为：自动引入类规则，错误和异常处理，单例创建discuz_application类实例，引入默认函数库function.core.php
require_once &amp;apos;./source/function/function_home.php&amp;apos;;  //引入discuzX函数库

$discuz = C::app();  //实例化discuz_application类
$cachelist = array(&amp;apos;magic&amp;apos;,&amp;apos;usergroups&amp;apos;, &amp;apos;diytemplatenamehome&amp;apos;,&amp;apos;forumlinks&amp;apos;,&amp;apos;identity&amp;apos;); //加身份组缓存
$discuz-&amp;gt;cachelist = $cachelist; //设置缓存列表
$discuz-&amp;gt;init();  //初始化应用:数据库、系统设置、用户、session、任务、等(discuz_appication类里面)
$space = array();

$mod = getgpc(&amp;apos;mod&amp;apos;); //接收$_GET[&amp;apos;mod&amp;apos;]数据
if(!in_array($mod, array(&amp;apos;space&amp;apos;, &amp;apos;spacecp&amp;apos;, &amp;apos;misc&amp;apos;, &amp;apos;magic&amp;apos;, &amp;apos;editor&amp;apos;, &amp;apos;invite&amp;apos;, &amp;apos;task&amp;apos;, &amp;apos;medal&amp;apos;, &amp;apos;rss&amp;apos;, &amp;apos;follow&amp;apos;))) {
    $mod = &amp;apos;space&amp;apos;;
    $_GET[&amp;apos;do&amp;apos;] = &amp;apos;home&amp;apos;;
}

if($mod == &amp;apos;space&amp;apos; &amp;amp;&amp;amp; ((empty($_GET[&amp;apos;do&amp;apos;]) || $_GET[&amp;apos;do&amp;apos;] == &amp;apos;index&amp;apos;) &amp;amp;&amp;amp; ($_G[&amp;apos;inajax&amp;apos;]))) {
    $_GET[&amp;apos;do&amp;apos;] = &amp;apos;profile&amp;apos;;
}
$curmod = !empty($_G[&amp;apos;setting&amp;apos;][&amp;apos;followstatus&amp;apos;]) &amp;amp;&amp;amp; (empty($_GET[&amp;apos;diy&amp;apos;]) &amp;amp;&amp;amp; empty($_GET[&amp;apos;do&amp;apos;]) &amp;amp;&amp;amp; $mod == &amp;apos;space&amp;apos; || $_GET[&amp;apos;do&amp;apos;] == &amp;apos;follow&amp;apos;) ? &amp;apos;follow&amp;apos; : $mod;
define(&amp;apos;CURMODULE&amp;apos;, $curmod);
runhooks($_GET[&amp;apos;do&amp;apos;] == &amp;apos;profile&amp;apos; &amp;amp;&amp;amp; $_G[&amp;apos;inajax&amp;apos;] ? &amp;apos;card&amp;apos; : $_GET[&amp;apos;do&amp;apos;]);
require_once libfile(&amp;apos;home/&amp;apos;.$mod, &amp;apos;module&amp;apos;);  //根据请求时传的mod参数经由上方判断确定加载对应文件

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注: libfile()函数在会将对应的模块字符串替换为模块的实际url。&lt;br&gt;&lt;code&gt;libfile(&amp;#39;home/&amp;#39;.$mod, &amp;#39;module&amp;#39;)&lt;/code&gt;的实际访问地址是 &lt;code&gt;/source/module/home/$mod.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入到&lt;code&gt;/source/module/home/home_space.php&lt;/code&gt; 文件中 根据请求参数 uid和do的值判断具体的执行过程，有些时候会直接引入响应的程序组件完成逻辑处理(这里引入了 &lt;code&gt;/include/space/space_profile.php&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;space_profile.php&lt;/code&gt;中判断运行之后输出到模板文件&lt;code&gt;/template/default/home/space_profile.htm&lt;/code&gt;中。&lt;br&gt;注：&lt;code&gt;template()&lt;/code&gt;函数在 核心函数库 &lt;code&gt;function_core.php&lt;/code&gt; 中 用于加载当前使用模板的模板文件 。根据传参此时加载了 &lt;code&gt;/template/default/home/space_profile.htm&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;在模板文件&lt;code&gt;space_profile.htm&lt;/code&gt;中 可以直接使用php文件中的数据变量进行赋值渲染输出到浏览器。&lt;br&gt;注：template模板语法不赘述 详见 &lt;a href=&quot;https://open.dismall.com/?ac=document&amp;amp;page=dev_template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模板语法&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-目录结构&quot;&gt;&lt;a href=&quot;#1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1.目录结构&quot;&gt;&lt;/a&gt;1.目录结构&lt;/h2&gt;&lt;p&gt;DISCUZ使用自己的框架，与现在主流的web框架不同，DISCUZ没有路由表，他的路由是由入口文件来实现的
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Discuz" scheme="http://isunman.com/tags/discuz/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP实现中文字符串的长度计算和截取无乱码</title>
    <link href="http://isunman.com/2021/04/12/PHP-to-achieve-the-length-of-Chinese-string-calculation-and-interception-without-garbled-code/"/>
    <id>http://isunman.com/2021/04/12/PHP-to-achieve-the-length-of-Chinese-string-calculation-and-interception-without-garbled-code/</id>
    <published>2021-04-12T07:42:00.000Z</published>
    <updated>2021-04-12T07:43:44.928Z</updated>
    
    <content type="html">&lt;p&gt;在我们学习PHP知识的过程中，PHP截取字符串应该是一个非常常见的字符串基础操作了，想必大家都比较熟悉这方面知识点。&lt;/p&gt;
&lt;p&gt;但是有些新手朋友们可能遇到过，当待截取的字符串出现中英文混合时，计算字符串的长度，会出现不准确和截取出现乱码的情况，其实这个也是非常容易解决的。&lt;/p&gt;
&lt;h3 id=&quot;首先，要了解关于中英文占多少字节的问题。&quot;&gt;&lt;a href=&quot;#首先，要了解关于中英文占多少字节的问题。&quot; class=&quot;headerlink&quot; title=&quot;首先，要了解关于中英文占多少字节的问题。&quot;&gt;&lt;/a&gt;首先，要了解关于中英文占多少字节的问题。&lt;/h3&gt;&lt;p&gt;ASCII码：一个中文汉字占两个字节的空间。&lt;/p&gt;
&lt;p&gt;UTF-8编码：一个中文（含繁体）等于三个字节。&lt;/p&gt;
&lt;p&gt;Unicode编码：一个中文（含繁体）等于两个字节。&lt;/p&gt;
&lt;h3 id=&quot;其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&quot;&gt;&lt;a href=&quot;#其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&quot; class=&quot;headerlink&quot; title=&quot;其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&quot;&gt;&lt;/a&gt;其次，如果是需要计算字符串的长度，需要明确是“字符”的长度还是“字节”的长度。&lt;/h3&gt;&lt;p&gt;例如，是不是中英文数字符号等1个都算1个，还是按实际占用的字节计算。&lt;br&gt;这个需要看具体的使用场景，需要存储导数据时，需要按字节计算实际的长度，和数据库字段的长度匹配。需要前端显示时，可能需要按字符计算。&lt;/p&gt;
&lt;h3 id=&quot;第三，实际处理用到的两个函数mb-substr-和mb-strlen&quot;&gt;&lt;a href=&quot;#第三，实际处理用到的两个函数mb-substr-和mb-strlen&quot; class=&quot;headerlink&quot; title=&quot;第三，实际处理用到的两个函数mb_substr()和mb_strlen()&quot;&gt;&lt;/a&gt;第三，实际处理用到的两个函数&lt;code&gt;mb_substr()&lt;/code&gt;和&lt;code&gt;mb_strlen()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;mb_substr($str,$start,$len,$encoding)&lt;/code&gt;，用于中文字符串的截取,在相应的编码页面输入相应的$encoding&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_strlen($str,$encodding)&lt;/code&gt;，用于获取中文字符串的长度，包含多字节的字符算成一个。&lt;/p&gt;
&lt;p&gt;GBK编码截取示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$str = &amp;apos;我是谁&amp;apos;;  //gbk编码的字符串
echo mb_substr($str, 0, 1, &amp;apos;gbk&amp;apos;); //输出 我
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;utf-8编码截取示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$str = &amp;apos;我abc是谁&amp;apos;;  //utf-8编码的字符串
echo mb_substr($str, 0, 2, &amp;apos;utf-8&amp;apos;); //输出 我a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中英混合也完全没有问题。&lt;/p&gt;
&lt;p&gt;【但是，一定要住编码需要明确指定，否则可能还是会出现乱码】&lt;/p&gt;
&lt;h3 id=&quot;第四，关于mb-strcut按字节来切分字符串，截取中文都不会产生半个字符的现象&quot;&gt;&lt;a href=&quot;#第四，关于mb-strcut按字节来切分字符串，截取中文都不会产生半个字符的现象&quot; class=&quot;headerlink&quot; title=&quot;第四，关于mb_strcut按字节来切分字符串，截取中文都不会产生半个字符的现象&quot;&gt;&lt;/a&gt;第四，关于&lt;code&gt;mb_strcut&lt;/code&gt;按字节来切分字符串，截取中文都不会产生半个字符的现象&lt;/h3&gt;&lt;p&gt;&lt;code&gt;substr&lt;/code&gt;、&lt;code&gt;mb_substr&lt;/code&gt;、&lt;code&gt;mb_strcut&lt;/code&gt;这三个函数都用来截取字符串，所不同的是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;substr&lt;/code&gt;是最简单的截取，无法适应中文；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_substr&lt;/code&gt;是按字来切分字符串，&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;mb_strcut&lt;/code&gt;是按字节来切分字符串，截取中文都不会产生半个字符的现象。&lt;/p&gt;
&lt;p&gt;这三个函数的前三个参数完全一致，即：&lt;/p&gt;
&lt;p&gt;第一个参数是操作对象&lt;/p&gt;
&lt;p&gt;第二个参数是截取的起始位置&lt;/p&gt;
&lt;p&gt;第三个参数是截取的数量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_substr&lt;/code&gt;和&lt;code&gt;mb_strcut&lt;/code&gt;还有第四个参数：第四个参数可以根据不同的字符集进行设置。&lt;/p&gt;
&lt;h4 id=&quot;友情提示&quot;&gt;&lt;a href=&quot;#友情提示&quot; class=&quot;headerlink&quot; title=&quot;友情提示&quot;&gt;&lt;/a&gt;友情提示&lt;/h4&gt;&lt;p&gt;使用的时候要注意php文件的编码，和网页显示时的编码。&lt;/p&gt;
&lt;p&gt;使用这两个&lt;code&gt;mb_substr&lt;/code&gt; 和 &lt;code&gt;mb_strcut&lt;/code&gt;方法要事先知道字符串的编码，如果不知道编码，就需要判，mbstring库还提供了&lt;code&gt;mb_check_encoding&lt;/code&gt;来检验字符串编码，但还不完善。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mb_check_encoding($str,$encoding)&lt;/code&gt;;成功是返回true,失败时返回false;&lt;/p&gt;
&lt;p&gt;php中文字符串的截取  其中ord($str)&amp;gt;127(因为中文字符的acsii码的范围是128(即0x80-0xfe)-254)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在我们学习PHP知识的过程中，PHP截取字符串应该是一个非常常见的字符串基础操作了，想必大家都比较熟悉这方面知识点。&lt;/p&gt;
&lt;p&gt;但是有些新手朋友们可能遇到过，当待截取的字符串出现中英文混合时，计算字符串的长度，会出现不准确和截取出现乱码的情况，其实这个也是非常容易解决的
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>苹果键盘的清洁</title>
    <link href="http://isunman.com/2021/02/18/apple-keyboard-cleaning/"/>
    <id>http://isunman.com/2021/02/18/apple-keyboard-cleaning/</id>
    <published>2021-02-18T14:28:00.000Z</published>
    <updated>2021-02-18T14:30:29.537Z</updated>
    
    <content type="html">&lt;p&gt;苹果键盘的清洁&lt;/p&gt;
&lt;p&gt;这里说的苹果键盘是：Mac 配件——妙控键盘 - 中文 (拼音)。带数字键和不带数字键的应该是类似的逻辑，本人实际使用的是不带数字键的。&lt;/p&gt;
&lt;p&gt;使用时间长了之后，键盘上面有一层脏东西，灰尘或者油污等。不带好清理，之前试过其他的方法，都不是太简单有效。今天突然试了一种新方法，简单直接有效。&lt;/p&gt;
&lt;p&gt;那就是，&lt;strong&gt;直接使用毛巾蘸清水，拧干水分之后，直接对键盘进行擦拭&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面这个图片是按这个方法擦拭之后的键盘效果。&lt;br&gt;&lt;img src=&quot;http://fusihan.com/isunmanfiles/MagicKeyboard.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;苹果键盘的清洁&lt;/p&gt;
&lt;p&gt;这里说的苹果键盘是：Mac 配件——妙控键盘 - 中文 (拼音)。带数字键和不带数字键的应该是类似的逻辑，本人实际使用的是不带数字键的。&lt;/p&gt;
&lt;p&gt;使用时间长了之后，键盘上面有一层脏东西，灰尘或者油污等。不带好清理，之前试过其他的方法，都不
    
    </summary>
    
      <category term="Mac使用" scheme="http://isunman.com/categories/mac%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="工作" scheme="http://isunman.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="效率" scheme="http://isunman.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>PHP fsockopen 异步调用接口在nginx上偶尔实效的情况</title>
    <link href="http://isunman.com/2020/12/26/php-function-psockopen-asynchronous-call-interface-is-occasionally-useful-on-nginx/"/>
    <id>http://isunman.com/2020/12/26/php-function-psockopen-asynchronous-call-interface-is-occasionally-useful-on-nginx/</id>
    <published>2020-12-26T04:55:00.000Z</published>
    <updated>2020-12-26T04:56:25.717Z</updated>
    
    <content type="html">&lt;p&gt;在下面这段代码里面，调用后忽略执行结果直接返回，可用于php异步执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private function fsock_asy_do($get){
    $fp = fsockopen(&amp;quot;ssl://www.xxx.com&amp;quot;, 443, $errno, $errstr, 30);
    if (!$fp) {
        echo &amp;quot;$errstr ($errno)&amp;lt;br /&amp;gt;\n&amp;quot;;
    } else {
        stream_set_blocking($fp,0);//开启非阻塞模式
        $out = &amp;quot;GET /&amp;quot;.$get.&amp;quot; HTTP/1.1\r\n&amp;quot;;
        $out .= &amp;quot;Host: www.xxxx.com\r\n&amp;quot;;
        $out .= &amp;quot;Connection: Close\r\n\r\n&amp;quot;;

        fwrite($fp, $out);
        /*忽略执行结果
        while (!feof($fp)) {
            echo fgets($fp, 128);
        }*/
        usleep(1000);
        fclose($fp);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在nginx服务器上有一个比较诡异的情况就是有时候无法调用异步的脚本。&lt;/p&gt;
&lt;p&gt;查阅相关资料后，是nginx 499 的问题。&lt;/p&gt;
&lt;p&gt;其中解决方案有以下，经过对每一个方案的验证最终得出结果：&lt;/p&gt;
&lt;h3 id=&quot;1、NGINX-499&quot;&gt;&lt;a href=&quot;#1、NGINX-499&quot; class=&quot;headerlink&quot; title=&quot;1、NGINX 499&quot;&gt;&lt;/a&gt;1、NGINX 499&lt;/h3&gt;&lt;p&gt;查看 NGINX access log，发现这样的请求会以 499（Client Closed Request）记录。确定问题是因为：客户端主动端口请求连接时，NGINX 不会将该请求代理给上游服务（FastCGI PHP 进程），这个时候 access log 中会以 499 记录这个请求。&lt;/p&gt;
&lt;p&gt;要解决这个问题需要将 NGINX FastCGI 忽略客户端中断配置打开：&lt;/p&gt;
&lt;p&gt;fastcgi_ignore_client_abort on;&lt;br&gt;这样无论客户端是否断开，都会将这个请求代理给上游，并且会记录上游服务处理后的返回状态。&lt;/p&gt;
&lt;h3 id=&quot;2、NGINX-线程原因&quot;&gt;&lt;a href=&quot;#2、NGINX-线程原因&quot; class=&quot;headerlink&quot; title=&quot;2、NGINX 线程原因&quot;&gt;&lt;/a&gt;2、NGINX 线程原因&lt;/h3&gt;&lt;p&gt;将nginx的worker_processes 由之前的auto修改为2（我的是单核服务器）&lt;/p&gt;
&lt;h3 id=&quot;3、NGINX-499&quot;&gt;&lt;a href=&quot;#3、NGINX-499&quot; class=&quot;headerlink&quot; title=&quot;3、NGINX 499&quot;&gt;&lt;/a&gt;3、NGINX 499&lt;/h3&gt;&lt;p&gt;nginx对499的定义是”client has closed connection”，并且在这些情况下会返回这个状态码：&lt;/p&gt;
&lt;p&gt;upstream 在收到读写事件处理之前时发现连接不可用。&lt;br&gt;server处理请求未结束，而client提前关闭了连接。&lt;br&gt;upstream出错，执行next_upstream时发现连接不可用。&lt;br&gt;一个不安全的做法是在fclose之前，让当前的进程先睡眠一段时间；我这里设置为10毫秒，这10毫秒的延迟对我完成整个请求的影响不大，同时我也认为nginx一定能在10毫米内把请求转到fastcgi去执行。这个时间间隔很难把握，不能保证php一定有执行到。&lt;/p&gt;
&lt;p&gt;这种方式并不是真正的异步，只是很取巧的强制关闭连接而不等待服务器端响应。所以在Laruence的那2篇文章中，有2个问题：&lt;/p&gt;
&lt;p&gt;①PHP使用fsock不能叫做异步，只是伪异步。&lt;/p&gt;
&lt;p&gt;②fwrite之后马上执行fclose，nginx会直接返回499&lt;/p&gt;
&lt;p&gt;由于我的代码上面usleep为1000，初步估计是时间不够导致没发出去就close了，所以调整为20000。并进行最后测试。&lt;br&gt;测试2天结果显示正常，的确是usleep数值过小的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在下面这段代码里面，调用后忽略执行结果直接返回，可用于php异步执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private function fsock_asy_do($get){
    $fp = fsockopen(&amp;quot;ssl://www.xxx.com&amp;quot;
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>win7下Apache突然启动失败</title>
    <link href="http://isunman.com/2020/12/18/win7-apache-suddenly-failed-to-start/"/>
    <id>http://isunman.com/2020/12/18/win7-apache-suddenly-failed-to-start/</id>
    <published>2020-12-18T04:45:00.000Z</published>
    <updated>2020-12-18T04:48:03.379Z</updated>
    
    <content type="html">&lt;p&gt;win7下Apache突然启动失败&lt;/p&gt;
&lt;p&gt;前段时间有一次重启了电脑（win7）之后，发现Apache服务并未随系统自动启动，结果在手动启动的时候也无法启动。&lt;/p&gt;
&lt;p&gt;报错为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 不能在本地计算机启动apache2.4。有关更多信息，查阅系统事件日志。如果这是非Microsoft服务，请与服务厂商联系，并参考特定服务错误代码1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分析后发现最大可能是80端口被占用，于是win+r 运行cmd&lt;/p&gt;
&lt;p&gt;输入&lt;code&gt;netstat -ano&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到80端口被PID4占用，于是打开任务管理器-进程-查看，选择列，勾选PID&lt;/p&gt;
&lt;p&gt;可以看到pid 4 的被NT kernel &amp;amp; System 占用&lt;/p&gt;
&lt;p&gt;该进程是Http.sys。它是http API的驱动组件，Http栈服务器。如果该端口被Http.sys占用，说明一些正在使用http.sys的应用程序在运行。这就是阻止Apache运行的原因，因为Http.sys占用着80端口。我们提供了一种应用程序的机制来帮助控制端口共享，但是我需要调查导致你遇到这种困难的是什么特殊应用程序。如果你能提供给我们“netsh http show servicestate”这条命令的输出结果，我就能找出是哪个应用程序在使用Http.sys。&lt;/p&gt;
&lt;p&gt;你可以按照下面步骤禁用http.sys：&lt;/p&gt;
&lt;p&gt;第一步： net stop http&lt;/p&gt;
&lt;p&gt;第二步：Sc config http start= disabled&lt;/p&gt;
&lt;p&gt;【正式操作步骤】&lt;/p&gt;
&lt;p&gt;于是运行&lt;code&gt;net stop http&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按“Y”确定&lt;/p&gt;
&lt;p&gt;再运行 &lt;code&gt;Sc config http start= disabled&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好了，现在启动Apache，发现可以正常启动了。&lt;/p&gt;
&lt;p&gt;再查看一下netstat -ano&lt;/p&gt;
&lt;p&gt;发现pid 4占用了445端口（不再是80端口）。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;win7下Apache突然启动失败&lt;/p&gt;
&lt;p&gt;前段时间有一次重启了电脑（win7）之后，发现Apache服务并未随系统自动启动，结果在手动启动的时候也无法启动。&lt;/p&gt;
&lt;p&gt;报错为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 不能在本地计算机启动apac
    
    </summary>
    
      <category term="Web构建" scheme="http://isunman.com/categories/web%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="wamp" scheme="http://isunman.com/tags/wamp/"/>
    
  </entry>
  
  <entry>
    <title>项目的服务器迁移的问题的总结</title>
    <link href="http://isunman.com/2020/11/22/summary-of-server-migration-issues-for-the-project/"/>
    <id>http://isunman.com/2020/11/22/summary-of-server-migration-issues-for-the-project/</id>
    <published>2020-11-22T13:27:00.000Z</published>
    <updated>2020-11-23T18:22:42.127Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;a href=&quot;#一、一个具体项目的服务器迁移和升级的问题总结&quot; class=&quot;headerlink&quot; title=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;/a&gt;一、一个具体项目的服务器迁移和升级的问题总结&lt;/h3&gt;&lt;p&gt;注意以下关键点：&lt;/p&gt;
&lt;p&gt;1、数据库备份，不能再使用Discuz自带的备份功能，会丢失数据（不足够安全）。可以使用mysqldump直接从数据库导出sql文件，然后再目标主机导入。&lt;/p&gt;
&lt;p&gt;2、数据库备份导出时，注意对emoji表情的兼容性，需要增加–default-character-set=utf8mb4参数。&lt;/p&gt;
&lt;p&gt;3、新安装的项目中的字符集需要设置为utf8mb4而不是utf8，否则某些字段表情不显示（或者显示问号）。&lt;/p&gt;
&lt;p&gt;4、新安装的项目不能使用MySQL总管理员账号，需要每个项目新建一个数据库，并配置一个项目数据库专用管理员，只授权管理这一个数据库。&lt;/p&gt;
&lt;p&gt;5、一定要保证UCenter的应用“通信成功”，且几个项目之间必须互相隔离开（尤其是整个项目复制的，注意配置文件里的设置区分）。&lt;/p&gt;
&lt;p&gt;6、迁移之前，在源主机和目标主机上都做好备份和快照。&lt;/p&gt;
&lt;p&gt;7、迁移之后，测试没问题之后，及时备份和快照。&lt;/p&gt;
&lt;p&gt;8、整个过程中，注意关闭站点，方式中途的数据写入。&lt;/p&gt;
&lt;p&gt;9、域名的解析，可以临时域名作为过渡，最好不要让线上正式环境的域名来回更换指向IP。&lt;/p&gt;
&lt;p&gt;10、域名相关的，如果使用了临时域名，尤其涉及第三方的：要么先不改；要么及时改回来。&lt;/p&gt;
&lt;p&gt;11、用户资源文件的迁移，可以稍微后置。注意UCenter的用户头像文件。&lt;/p&gt;
&lt;p&gt;12、迁移之后，必须要首先测试的功能：用户注册、消息推送（IP白名单）、crontab自动执行、短信发送。&lt;/p&gt;
&lt;p&gt;13、注意后来添加的目录或者第三方相关目录的读写权限的设置。&lt;/p&gt;
&lt;p&gt;14、本次对PHP7.2环境的支持，稍微后置。注意观察不兼容性，尤其是不常用到的接口。&lt;/p&gt;
&lt;p&gt;15、注意修改php.ini的配置，支持上传大文件（建议64M），需重启生效。&lt;/p&gt;
&lt;p&gt;16、注意修改nginx.conf的配置，支持上传大文件（建议64M），需重启生效。&lt;/p&gt;
&lt;p&gt;17、刚迁移完后的近一段时间，注意观察是否出现异常，保持高度警惕。&lt;/p&gt;
&lt;p&gt;18、【注意】Nginx服务必须设置为开机自启动，否则从阿里云控制台重启之后，Nginx服务是未启动状态。&lt;/p&gt;
&lt;h3 id=&quot;二、迁移服务器的通用操作流程&quot;&gt;&lt;a href=&quot;#二、迁移服务器的通用操作流程&quot; class=&quot;headerlink&quot; title=&quot;二、迁移服务器的通用操作流程&quot;&gt;&lt;/a&gt;二、迁移服务器的通用操作流程&lt;/h3&gt;&lt;p&gt;1、购买一套配置更高的阿里云ECS服务器（最好有热扩展性）。&lt;/p&gt;
&lt;p&gt;2、配置相同的LNMP环境。&lt;/p&gt;
&lt;p&gt;3、配置视频处理程序ffmpeg，并测试可用。&lt;/p&gt;
&lt;p&gt;4、添加消息推送的白名单IP地址。（涉及多个App）&lt;/p&gt;
&lt;p&gt;5、安装程序初步可用。&lt;/p&gt;
&lt;p&gt;6、备份数据恢复数据。（数据库MySQL数据）&lt;/p&gt;
&lt;p&gt;7、测试数据没有问题PC端（用户注册登录等）。&lt;/p&gt;
&lt;p&gt;8、测试接口可用性（App和微信小程序）。&lt;/p&gt;
&lt;p&gt;9、计划任务crontab的配置。（注意有脚本执行文件，可成功执行之后需删除掉原服务器的crontab的相关任务）&lt;/p&gt;
&lt;p&gt;10、迁移其他非数据库MySQL数据的data资源文件（需分批处理，影响图片和视频等的显示，不影响数据处理）。&lt;/p&gt;
&lt;p&gt;11、整体基本可用之后，再密切追踪至少一周，看是否有因为迁移造成的BUG或者需要修复的问题。&lt;/p&gt;
&lt;p&gt;12、注意一些目录的可读权限，尤其是后来API中自定义或者第三方专用的目录。&lt;/p&gt;
&lt;p&gt;13、注意服务器级别的安全组特定端口的设置。&lt;/p&gt;
&lt;p&gt;14、注意SSL证书的迁移&lt;/p&gt;
&lt;h3 id=&quot;三、几点要求&quot;&gt;&lt;a href=&quot;#三、几点要求&quot; class=&quot;headerlink&quot; title=&quot;三、几点要求&quot;&gt;&lt;/a&gt;三、几点要求&lt;/h3&gt;&lt;p&gt;0、完美，服务器迁移几乎不影响前端访问，不需App停用。&lt;/p&gt;
&lt;p&gt;1、最好，App可以平滑过渡，对服务器的迁移无感。除了迁移过程中无法使用，不影响用户的登录状态，账号和密码的可用性。&lt;/p&gt;
&lt;p&gt;2、其次，让用户重新登录一次，但是账号和密码继续保持可用性。&lt;/p&gt;
&lt;p&gt;3、再次，用户的账号不变，密码失效，需要重置密码才可以继续登录账号。&lt;/p&gt;
&lt;p&gt;以上4种情况。至少做到1，争取做到0，绝不能出现2和3的情况。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;a href=&quot;#一、一个具体项目的服务器迁移和升级的问题总结&quot; class=&quot;headerlink&quot; title=&quot;一、一个具体项目的服务器迁移和升级的问题总结&quot;&gt;&lt;/a&gt;一、一个具体项目的服务器迁移和升级的问题
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>phpMyAdmin的安装</title>
    <link href="http://isunman.com/2020/11/21/the-installation-of-the-phpmyadmin/"/>
    <id>http://isunman.com/2020/11/21/the-installation-of-the-phpmyadmin/</id>
    <published>2020-11-21T09:36:00.000Z</published>
    <updated>2020-11-21T09:38:11.306Z</updated>
    
    <content type="html">&lt;p&gt;phpMyAdmin的安装&lt;/p&gt;
&lt;h4 id=&quot;一、本次的服务器运行环境&quot;&gt;&lt;a href=&quot;#一、本次的服务器运行环境&quot; class=&quot;headerlink&quot; title=&quot;一、本次的服务器运行环境&quot;&gt;&lt;/a&gt;一、本次的服务器运行环境&lt;/h4&gt;&lt;p&gt;Linux-CentOS版本：8.1.1911&lt;/p&gt;
&lt;p&gt;Nginx版本：1.14.1&lt;/p&gt;
&lt;p&gt;MySQL版本：5.7.32&lt;/p&gt;
&lt;p&gt;PHP版本： 7.2.24&lt;/p&gt;
&lt;h3 id=&quot;二、安装过程&quot;&gt;&lt;a href=&quot;#二、安装过程&quot; class=&quot;headerlink&quot; title=&quot;二、安装过程&quot;&gt;&lt;/a&gt;二、安装过程&lt;/h3&gt;&lt;p&gt;1、在LNMP环境已经安装好，且可以正常运行的情况下。从&lt;a href=&quot;https://www.phpmyadmin.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;phpMyAdmin的官网&lt;/a&gt;上下载最新的版本。现在2020年11月21日是5.0.4版本。&lt;/p&gt;
&lt;p&gt;2、下载完zip的文案压缩包，直接解压缩到目标目录（可通过http远程访问的目录）。&lt;/p&gt;
&lt;p&gt;3、把phpMyAdmin根目录下的config.sample.inc.php复制为config.inc.php，作为其正式的配置文件使用。&lt;/p&gt;
&lt;p&gt;4、然后在nginx的conf配置文件中给phpmyadmin配置一个虚拟主机文件。如果不想使用域名访问，可以使用localhost和指定的端口（例如8080，8000等），然后使用IP+端口来访问。&lt;/p&gt;
&lt;p&gt;5、重启Nginx服务，让虚拟主机配置文件生效。通过浏览器访问测试效果。&lt;/p&gt;
&lt;h3 id=&quot;三、可通过浏览器访问之后的两个问题&quot;&gt;&lt;a href=&quot;#三、可通过浏览器访问之后的两个问题&quot; class=&quot;headerlink&quot; title=&quot;三、可通过浏览器访问之后的两个问题&quot;&gt;&lt;/a&gt;三、可通过浏览器访问之后的两个问题&lt;/h3&gt;&lt;p&gt;1、提示把配置文件的配置生成到phpmyadmin数据中存储。&lt;/p&gt;
&lt;p&gt;2、提示“ 配置文件现在需要一个短语密码。 ”，则打开上述的config.inc.php文件，找到“blowfish_secret”，把它的值设置为一个至少32位长度的字符串。&lt;/p&gt;
&lt;p&gt;再之后，刷新浏览器页面，重新登录。OK。&lt;/p&gt;
&lt;p&gt;以上过程所有步骤，由本人亲测有效。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;phpMyAdmin的安装&lt;/p&gt;
&lt;h4 id=&quot;一、本次的服务器运行环境&quot;&gt;&lt;a href=&quot;#一、本次的服务器运行环境&quot; class=&quot;headerlink&quot; title=&quot;一、本次的服务器运行环境&quot;&gt;&lt;/a&gt;一、本次的服务器运行环境&lt;/h4&gt;&lt;p&gt;Linux-Cen
    
    </summary>
    
      <category term="Web构建" scheme="http://isunman.com/categories/web%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>阿里云内网打包传输较大文件的方法</title>
    <link href="http://isunman.com/2020/11/13/aliyun-internal-network-package-transfer-method-of-large-files/"/>
    <id>http://isunman.com/2020/11/13/aliyun-internal-network-package-transfer-method-of-large-files/</id>
    <published>2020-11-13T07:15:00.000Z</published>
    <updated>2020-11-22T13:35:09.089Z</updated>
    
    <content type="html">&lt;p&gt;今天老夫遇到一个将其一台阿里云ECS服务器某个目录下的所有文件迁移到另外一台服务器，原本以为是一个普通的操作，熟料到一看数据有10GB左右，打包压缩之后基本没有小多少，所以正常的常规wget下载肯定是不行的，效率太低，最快只有500KB/s左右。因此，在这里我准备采用阿里云自带的内网IP地址，然后直接内网SCP拖过去。&lt;/p&gt;
&lt;p&gt;第一、准备工作&lt;/p&gt;
&lt;p&gt;1、登录阿里云账户看到ECS服务器对应的内网IP地址。（打包文件的服务器内网IP）&lt;/p&gt;
&lt;p&gt;2、打包压缩需要备份的网站目录，因为这里我开始打包过了，其实我不应该打包的，直接SCP，因为数据较大，打包时间也很长，后面还要解压也需要时间。&lt;/p&gt;
&lt;p&gt;第二、SCP命令传输&lt;/p&gt;
&lt;p&gt;1、复制目录到本地&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp -r root@网站所在内网IP地址:/home/wwwroot/拷贝网站目录 /当前拷贝过来的网站目录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、复制打包文件到本地&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp root@网站所在的内网IP:/home/wwwroot/拷贝网站目录/laozuo.tar.gz /当前拷贝过来的网站目录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个执行是在我们转入进来的服务器SSH执行，然后会要求我们同意和输入转出服务器的密码后开始传输。看来速度比直接wget快很多了，达到46MB/s。&lt;/p&gt;
&lt;p&gt;最后，稍等几分钟（这里10G大概不到5分钟)，传输完毕之后我们再到服务器中解压和数据拷贝（移动）即可。&lt;/p&gt;
&lt;p&gt;【注意】&lt;/p&gt;
&lt;p&gt;如果当前用户登录在【目标主机】，从【源主机】拷贝到【目标主机】时，有问题的话（需要输入【源主机】用户SSH密码），&lt;/p&gt;
&lt;p&gt;也可以反过来操作，即：用户登录到【源主机】，然后再从【源主机】拷贝到【目标主机】，需要输入【目标主机】的用户SSH密码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp /root/yasm-1.3.0.tar.gz root@111.66.66.888:/root/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上为一条具体的示例。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天老夫遇到一个将其一台阿里云ECS服务器某个目录下的所有文件迁移到另外一台服务器，原本以为是一个普通的操作，熟料到一看数据有10GB左右，打包压缩之后基本没有小多少，所以正常的常规wget下载肯定是不行的，效率太低，最快只有500KB/s左右。因此，在这里我准备采用阿里云
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="远程控制" scheme="http://isunman.com/tags/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8解决SSHSecureShellClient连接Linux报错Algorithm negotiation failes</title>
    <link href="http://isunman.com/2020/11/01/centos8-ssh-reported-error-for-algorithm-negotiation-failes/"/>
    <id>http://isunman.com/2020/11/01/centos8-ssh-reported-error-for-algorithm-negotiation-failes/</id>
    <published>2020-11-01T08:05:00.000Z</published>
    <updated>2020-11-01T08:10:17.063Z</updated>
    
    <content type="html">&lt;p&gt;解决SSHSecureShellClient连接Linux报错Algorithm negotiation failes&lt;/p&gt;
&lt;p&gt;今天新服务器版本已经到了CentOS8，但是SSH Secure Shell还是多年前的3.2.9，所以在连服务器时遇到标题中的报错。这个问题很悲剧，浪费了我很多时间。&lt;/p&gt;
&lt;p&gt;网上解决这个问题的博文非常非常多，都是这样的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开/etc/ssh文件目录下的文件sshd_config  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo vim /etc/ssh/sshd_config&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在文件末尾添加以下信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Ciphers aes128-cbc,aes192-cbc,aes256-cbc,aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,arcfour128,arcfour256,arcfour,blowfish-cbc,cast128-cbc

MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-sha1-96,hmac-md5-96  

KexAlgorithms diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group1-sha1,curve25519-sha256@libssh.org
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;保存后重启ssh服务&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo /etc/init.d/ssh restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家都说好用，但是我试了之后悲剧了，增加了配置后重启ssh就启动不了了，会报错。&lt;/p&gt;
&lt;p&gt;但是我依然没能解决问题，最终决定弃用落后的SSH Secure Shell Client了，换成【FileZilla】解决问题：FileZilla也支持ssh协议传输文件，而且操作稍微比SSH Secure Shell Client人性化。&lt;/p&gt;
&lt;p&gt;还有一种方案是把CentOS8退回到CentOS6,这还有什么用呢？&lt;/p&gt;
&lt;p&gt;因此，应该是CentOS8和SSH Secure File Transfer Client之前的冲突解决不了的问题。
　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;解决SSHSecureShellClient连接Linux报错Algorithm negotiation failes&lt;/p&gt;
&lt;p&gt;今天新服务器版本已经到了CentOS8，但是SSH Secure Shell还是多年前的3.2.9，所以在连服务器时遇到标题中的报错。这个问
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>能写出来的河南话，你会写几个?</title>
    <link href="http://isunman.com/2020/07/29/can-you-write-the-Henan-dialect_P1/"/>
    <id>http://isunman.com/2020/07/29/can-you-write-the-Henan-dialect_P1/</id>
    <published>2020-07-29T08:32:00.000Z</published>
    <updated>2020-07-29T08:33:10.126Z</updated>
    
    <content type="html">&lt;h4 id=&quot;熰&quot;&gt;&lt;a href=&quot;#熰&quot; class=&quot;headerlink&quot; title=&quot;熰&quot;&gt;&lt;/a&gt;熰&lt;/h4&gt;&lt;p&gt;[读音]ǒu&lt;/p&gt;
&lt;p&gt;[释义]烤过度的东西出现碳化的迹象&lt;/p&gt;
&lt;p&gt;[引自]《管子?侈靡篇》古之祭有时而熰。《注》熰，热甚也。&lt;/p&gt;
&lt;p&gt;[举例]火上的东西快拿起来，都烤熰了。&lt;/p&gt;
&lt;h4 id=&quot;熥&quot;&gt;&lt;a href=&quot;#熥&quot; class=&quot;headerlink&quot; title=&quot;熥&quot;&gt;&lt;/a&gt;熥&lt;/h4&gt;&lt;p&gt;[读音]tēng&lt;/p&gt;
&lt;p&gt;[释义]把凉了的物体再加热或烤热&lt;/p&gt;
&lt;p&gt;[引自]《集韻》他東切，音通。以火煖物也。&lt;/p&gt;
&lt;p&gt;[举例]你的衣服湿了，脱下来在火上熥熥。&lt;/p&gt;
&lt;h4 id=&quot;缏&quot;&gt;&lt;a href=&quot;#缏&quot; class=&quot;headerlink&quot; title=&quot;缏&quot;&gt;&lt;/a&gt;缏&lt;/h4&gt;&lt;p&gt;[读音]biǎn&lt;/p&gt;
&lt;p&gt;[释义]卷起衣袖&lt;/p&gt;
&lt;p&gt;[引自]《说文通训定声》缏,缝缉其边曰缏。这里用引申义，因为袖子或裤子挽起的部分很像衣服被缝纫形成的缏。&lt;/p&gt;
&lt;p&gt;[举例]干活就把袖子缏起来，省的弄脏。&lt;/p&gt;
&lt;h4 id=&quot;癔症&quot;&gt;&lt;a href=&quot;#癔症&quot; class=&quot;headerlink&quot; title=&quot;癔症&quot;&gt;&lt;/a&gt;癔症&lt;/h4&gt;&lt;p&gt;[读音]yi zheng&lt;/p&gt;
&lt;p&gt;[释义]走神，发呆，说梦话&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]晚上开车看着点，别发癔症。&lt;/p&gt;
&lt;h4 id=&quot;撧&quot;&gt;&lt;a href=&quot;#撧&quot; class=&quot;headerlink&quot; title=&quot;撧&quot;&gt;&lt;/a&gt;撧&lt;/h4&gt;&lt;p&gt;[读音]字典里读音juē，方言里变音quē&lt;/p&gt;
&lt;p&gt;[释义]古同“绝”，折断；断绝。&lt;/p&gt;
&lt;p&gt;[引自]元?佚名《盆儿鬼》：我待撧枝在头上插。&lt;/p&gt;
&lt;p&gt;[举例]过来把这个树枝撧断了。&lt;/p&gt;
&lt;h4 id=&quot;爒&quot;&gt;&lt;a href=&quot;#爒&quot; class=&quot;headerlink&quot; title=&quot;爒&quot;&gt;&lt;/a&gt;爒&lt;/h4&gt;&lt;p&gt;[读音]liǎo&lt;/p&gt;
&lt;p&gt;[释义]古同「燎」。火烧&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]别靠火那么近，小心把衣服爒了。&lt;/p&gt;
&lt;h4 id=&quot;吃起来可艮gen（食物坚硬而不松脆）&quot;&gt;&lt;a href=&quot;#吃起来可艮gen（食物坚硬而不松脆）&quot; class=&quot;headerlink&quot; title=&quot;吃起来可艮gen（食物坚硬而不松脆）&quot;&gt;&lt;/a&gt;吃起来可艮gen（食物坚硬而不松脆）&lt;/h4&gt;&lt;p&gt;[读音]&lt;/p&gt;
&lt;p&gt;[释义]食物坚硬而不松脆。也指为人特别执拗，过于认真或者行动缓慢。&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]这个萝卜吃起来可艮。你这孩子怎么这么艮不听话。&lt;/p&gt;
&lt;h4 id=&quot;薅&quot;&gt;&lt;a href=&quot;#薅&quot; class=&quot;headerlink&quot; title=&quot;薅&quot;&gt;&lt;/a&gt;薅&lt;/h4&gt;&lt;p&gt;[读音]hāo&lt;/p&gt;
&lt;p&gt;[释义]揪&lt;/p&gt;
&lt;p&gt;[引自]《说文解字》拔去田艸也。&lt;/p&gt;
&lt;p&gt;[举例]你俩打架不要薅头发。&lt;/p&gt;
&lt;h4 id=&quot;冇&quot;&gt;&lt;a href=&quot;#冇&quot; class=&quot;headerlink&quot; title=&quot;冇&quot;&gt;&lt;/a&gt;冇&lt;/h4&gt;&lt;p&gt;[读音]māo（河南地区发音：māo mōu mō mù 均有）&lt;/p&gt;
&lt;p&gt;[释义]没有&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]（粤语中的冇也来自河南话）&lt;/p&gt;
&lt;h4 id=&quot;抪拉&quot;&gt;&lt;a href=&quot;#抪拉&quot; class=&quot;headerlink&quot; title=&quot;抪拉&quot;&gt;&lt;/a&gt;抪拉&lt;/h4&gt;&lt;p&gt;[读音]bu la&lt;/p&gt;
&lt;p&gt;[释义]用手来回拨弄；用手擦。&lt;/p&gt;
&lt;p&gt;[引自]&lt;/p&gt;
&lt;p&gt;[举例]他在朋友进屋前赶紧抪拉了一下桌子上的灰。&lt;/p&gt;
&lt;h4 id=&quot;哕&quot;&gt;&lt;a href=&quot;#哕&quot; class=&quot;headerlink&quot; title=&quot;哕&quot;&gt;&lt;/a&gt;哕&lt;/h4&gt;&lt;p&gt;[读音]yuě&lt;/p&gt;
&lt;p&gt;[释义]呕吐，或要吐而吐不出东西来。&lt;/p&gt;
&lt;p&gt;[引自]明?张自烈《正字通》：方书有物无声曰吐，有声无物曰哕，有声有物曰呕。&lt;/p&gt;
&lt;p&gt;[举例]吃得不舒服，想干哕。&lt;/p&gt;
&lt;h4 id=&quot;搲&quot;&gt;&lt;a href=&quot;#搲&quot; class=&quot;headerlink&quot; title=&quot;搲&quot;&gt;&lt;/a&gt;搲&lt;/h4&gt;&lt;p&gt;[读音]wǎ&lt;/p&gt;
&lt;p&gt;[释义]以手或瓢状舀取。&lt;/p&gt;
&lt;p&gt;[引自]宋?司马光《类篇》：吴俗谓手爬物曰搲。元人杂剧《陈州粜米》第一折：他那边又搲了些米去了。&lt;/p&gt;
&lt;p&gt;[举例]没吃饱，再给我搲点儿米饭。&lt;/p&gt;
&lt;h4 id=&quot;扽&quot;&gt;&lt;a href=&quot;#扽&quot; class=&quot;headerlink&quot; title=&quot;扽&quot;&gt;&lt;/a&gt;扽&lt;/h4&gt;&lt;p&gt;[读音]dèn&lt;/p&gt;
&lt;p&gt;[释义]拉，猛拉，使伸直或平整。&lt;/p&gt;
&lt;p&gt;[引自]清?《康熙字典》：《唐韵》《集韵》都困切，音顿。撼也。又《博雅》引也。一曰摩也。&lt;/p&gt;
&lt;p&gt;[举例]刚洗好的床单太皱，来，跟我一起扽平整。&lt;/p&gt;
&lt;h4 id=&quot;鬻&quot;&gt;&lt;a href=&quot;#鬻&quot; class=&quot;headerlink&quot; title=&quot;鬻&quot;&gt;&lt;/a&gt;鬻&lt;/h4&gt;&lt;p&gt;[读音]yū&lt;/p&gt;
&lt;p&gt;[释义]液体沸腾溢出。&lt;/p&gt;
&lt;p&gt;[引自]宋?《广韵》：鬻，薄没切：说文吹釜溢也。清?《说文解字》段玉裁注：今江苏俗谓火盛水鬻溢出为铺出，鬻之转语也，正当作鬻字。&lt;/p&gt;
&lt;p&gt;[举例]米汤煮得快鬻出来了。&lt;/p&gt;
&lt;h4 id=&quot;醭&quot;&gt;&lt;a href=&quot;#醭&quot; class=&quot;headerlink&quot; title=&quot;醭&quot;&gt;&lt;/a&gt;醭&lt;/h4&gt;&lt;p&gt;[读音]bú&lt;/p&gt;
&lt;p&gt;[释义]酒﹑酱﹑醋等因败坏而生的白霉。亦泛指一切东西受潮而表面出现霉斑。&lt;/p&gt;
&lt;p&gt;[引自]杨万里《风雨》：梅天笔墨都生醭，棐几文书懒拂尘。&lt;/p&gt;
&lt;p&gt;[举例]这个菜赶快放冰箱里面，要不明天就出醭。&lt;/p&gt;
&lt;h4 id=&quot;敹&quot;&gt;&lt;a href=&quot;#敹&quot; class=&quot;headerlink&quot; title=&quot;敹&quot;&gt;&lt;/a&gt;敹&lt;/h4&gt;&lt;p&gt;[读音]liáo&lt;/p&gt;
&lt;p&gt;[释义]粗线缝缀。&lt;/p&gt;
&lt;p&gt;[引自]民国章炳麟《新方言》：凡非绽裂而粗率缝之曰敹。&lt;/p&gt;
&lt;p&gt;[举例]袖口炸线了，给它敹几针就好了。&lt;/p&gt;
&lt;h4 id=&quot;嬎&quot;&gt;&lt;a href=&quot;#嬎&quot; class=&quot;headerlink&quot; title=&quot;嬎&quot;&gt;&lt;/a&gt;嬎&lt;/h4&gt;&lt;p&gt;[读音]fàn&lt;/p&gt;
&lt;p&gt;[释义]禽类下蛋；生子多而整齐划一，也是繁殖的意思。&lt;/p&gt;
&lt;p&gt;[引自]清?《康熙字典》：同娩。息也。清?《说文解字》段玉裁注：谓生子多而如一也。&lt;/p&gt;
&lt;p&gt;[举例]昨晚，他家的老母鸡又嬎了三个鸡蛋。&lt;/p&gt;
&lt;h4 id=&quot;拌&quot;&gt;&lt;a href=&quot;#拌&quot; class=&quot;headerlink&quot; title=&quot;拌&quot;&gt;&lt;/a&gt;拌&lt;/h4&gt;&lt;p&gt;[读音]bǎn&lt;/p&gt;
&lt;p&gt;[释义]扔，丢弃。&lt;/p&gt;
&lt;p&gt;[引自]西汉?杨雄《方言》卷十：拌，弃也。楚凡挥弃物谓之拌。&lt;/p&gt;
&lt;p&gt;[举例]把这些垃圾拌出去。&lt;/p&gt;
&lt;h4 id=&quot;谝&quot;&gt;&lt;a href=&quot;#谝&quot; class=&quot;headerlink&quot; title=&quot;谝&quot;&gt;&lt;/a&gt;谝&lt;/h4&gt;&lt;p&gt;[读音]piǎn&lt;/p&gt;
&lt;p&gt;[释义]炫耀、夸耀或骄傲地显示。&lt;/p&gt;
&lt;p&gt;[引自]东汉?许慎《说文解字》：谝，便巧言也。清?蒲松龄《增补幸云曲》第十六回：这奴才不弹琵琶，光谝他的汗巾子，望我夸他。&lt;/p&gt;
&lt;p&gt;[举例]他买了个戒指，老在我面前谝。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;熰&quot;&gt;&lt;a href=&quot;#熰&quot; class=&quot;headerlink&quot; title=&quot;熰&quot;&gt;&lt;/a&gt;熰&lt;/h4&gt;&lt;p&gt;[读音]ǒu&lt;/p&gt;
&lt;p&gt;[释义]烤过度的东西出现碳化的迹象&lt;/p&gt;
&lt;p&gt;[引自]《管子?侈靡篇》古之祭有时而熰。《注》熰，热甚也。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="文学" scheme="http://isunman.com/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="家乡" scheme="http://isunman.com/tags/%E5%AE%B6%E4%B9%A1/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中文按首字母排序</title>
    <link href="http://isunman.com/2020/07/23/mysql-Chinese-is-sorted-alphabetically/"/>
    <id>http://isunman.com/2020/07/23/mysql-Chinese-is-sorted-alphabetically/</id>
    <published>2020-07-23T03:28:00.000Z</published>
    <updated>2020-07-23T03:33:42.801Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一种分析&quot;&gt;&lt;a href=&quot;#一种分析&quot; class=&quot;headerlink&quot; title=&quot;一种分析&quot;&gt;&lt;/a&gt;一种分析&lt;/h3&gt;&lt;p&gt;项目中有时候会遇到需要按照汉字拼音排序的需求。&lt;/p&gt;
&lt;p&gt;如果要排序的字段编码使用的是GBK字符集，那就可以直接按照拼音排序。因为GBK内码编码时本身就采用了拼音排序的方法（常用一级汉字3755个采用拼音排序，二级汉字就不是了），直接在查询语句后面添加ORDER BY name ASC，查询结果将按照姓氏的升序排序。&lt;/p&gt;
&lt;p&gt;如果存储姓名的字段采用的是utf-8字符集，需要在排序的时候对字段进行转码，对应的代码是ORDER BY convert(name using gbk) ASC，同样，查询的结果也是按照汉字拼音的升序排序。&lt;/p&gt;
&lt;p&gt;怎样才能将编码转化为GBK呢？在MySQL中提供了函数CONVERT() ，该函数可用来获取一个类型的值。该函数的使用方式为 CONVERT(字段 USING GBK)。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table ORDER BY CONVERT(field USING GBK) ASC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果字段的值中包含数字和字母也可以排序，因为数字和字母在gbk字符集中本身就是能排序的，数字&amp;lt;字母&amp;lt;汉字。&lt;/p&gt;
&lt;p&gt;以上亲测有效。&lt;/p&gt;
&lt;h3 id=&quot;另一种分析：&quot;&gt;&lt;a href=&quot;#另一种分析：&quot; class=&quot;headerlink&quot; title=&quot;另一种分析：&quot;&gt;&lt;/a&gt;另一种分析：&lt;/h3&gt;&lt;p&gt;使用MySQL过程中，我们经常会对一个字段进行排序查询，我们一般都是想要按照中文拼音首字母进行依次排序，但mysql中进行中文排序的时候，对汉字的排序结果往往都是错误的。 这种情况在MySQL的很多版本中都存在。&lt;/p&gt;
&lt;p&gt;如果这个问题不解决，那么MySQL将无法实际处理中文。 出现这个问题的原因是因为MySQL在查询字符串时是大小写不敏感的，在编绎MySQL时一般以ISO-8859字符集作为默认的字符集，因此在比较过程中中文编码字符大小写转换造成了这种现象。&lt;/p&gt;
&lt;p&gt;查了资料有两种解决方法：&lt;br&gt;1.对于包含中文的字段加上”binary”属性，使之作为二进制比较，例如将”name varchar(10)”改成”name varchar(10)binary”。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果不想对表结构进行修改或者重新编译MySQL，也可以在查询语句的 order by 部分使用 CONVERT 函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如 name字段为中文，需要按其排序，则可以写select * from mytable order by CONVERT(name USING gbk);
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一种分析&quot;&gt;&lt;a href=&quot;#一种分析&quot; class=&quot;headerlink&quot; title=&quot;一种分析&quot;&gt;&lt;/a&gt;一种分析&lt;/h3&gt;&lt;p&gt;项目中有时候会遇到需要按照汉字拼音排序的需求。&lt;/p&gt;
&lt;p&gt;如果要排序的字段编码使用的是GBK字符集，那就可以直接按照拼音
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="http://isunman.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CA根证书过期的问题</title>
    <link href="http://isunman.com/2020/06/11/issue-of-ca-root-certificate-expiration/"/>
    <id>http://isunman.com/2020/06/11/issue-of-ca-root-certificate-expiration/</id>
    <published>2020-06-11T07:38:00.000Z</published>
    <updated>2020-06-11T07:46:40.323Z</updated>
    
    <content type="html">&lt;p&gt;上一篇文章提到过PHP的curl函数的证书错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用已知的CA证书进行身份验证”。&lt;/p&gt;
&lt;p&gt;后来采用了在curl函数中不验证证书的临时解决方法。&lt;/p&gt;
&lt;p&gt;虽然问题暂时解决了，但是并没有找到出问题的根本原因，当然也就没有从根本上解决问题。&lt;/p&gt;
&lt;h4 id=&quot;紧接着，后续又出大问题了。&quot;&gt;&lt;a href=&quot;#紧接着，后续又出大问题了。&quot; class=&quot;headerlink&quot; title=&quot;紧接着，后续又出大问题了。&quot;&gt;&lt;/a&gt;紧接着，后续又出大问题了。&lt;/h4&gt;&lt;p&gt;在linux服务器上的crontab中设置的计划任务也不执行了。里面都是使用的wget加https的URL执行的。&lt;br&gt;经核查发现：&lt;/p&gt;
&lt;p&gt;1、crontab的计划任务是在定期执行的，只是没有执行wget+https的URL请求。&lt;/p&gt;
&lt;p&gt;2、上述计划任务中https的URL请求，如果在浏览器执行或postman中执行，都是可以正常执行出结果的。&lt;/p&gt;
&lt;p&gt;所以证明是wget在执行https的请求时出问题了。&lt;/p&gt;
&lt;p&gt;联系亚狐科技的客服，询问他们的SSL证书是不是出问题了。&lt;/p&gt;
&lt;p&gt;回复是，SSL证书本身没有过期，但是颁发SSL证书的CA机构的【根证书】过期了。&lt;/p&gt;
&lt;p&gt;回复原话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是CA证书过期了, 您更新下CA证书即可。证书没问题，有问题的是COMODO的上级证书链。浏览器访问都没问题。我可以发您最新的根证书，您替换旧可以。4月30日后签发的证书就没这个问题了。这个问题是历史问题，没办法避免。这样，我全部更新下，您重新下载可以吧。这个我们会注意这个问题，如果再有类似，我通知您。应该不会再发生了。一般如果只是使用浏览器，不会存在问题。是的，我们接收意见，以后避免再发生此类问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然中间有我的提问没有写出来，这是QQ聊天记录的对方回复的部分内容的合并。&lt;/p&gt;
&lt;p&gt;之后重新颁发了新的SSL证书，然后更新到所有使用该SSL证书的Nginx服务器之后（重启Nginx），crontab的计划任务可以正常执行了。&lt;/p&gt;
&lt;h4 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h4&gt;&lt;p&gt;1、CA的根证书快过期本应该提前处理好的，这个根证书时间应该不是每一年一次的。5年或10年吧，还不确定。&lt;/p&gt;
&lt;p&gt;2、这个CA根证书过期导致的是一些程序的执行命令和系统方法出问题，在浏览器中使用并不会表现出BUG和错误。（目前已发现明显会受影响的就是PHP的CURL函数和Linux的crontab中的wget命令）&lt;/p&gt;
&lt;p&gt;3、当一个问题出现时，必须及时准确地定位到问题的真正和根本原因，并迅速彻底解决；否则，可能会出现更严重的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章提到过PHP的curl函数的证书错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP的curl函数的证书错误 Peer certificate cannot be authenticated</title>
    <link href="http://isunman.com/2020/06/01/peer-certificate-of-php-curl-function-cannot-be-authenticated/"/>
    <id>http://isunman.com/2020/06/01/peer-certificate-of-php-curl-function-cannot-be-authenticated/</id>
    <published>2020-06-01T09:14:00.000Z</published>
    <updated>2020-06-01T09:18:34.390Z</updated>
    
    <content type="html">&lt;p&gt;系统的短信发送突然全部失败了。使用postman工具测试阿里云云通信的短信API可以正常发送。&lt;/p&gt;
&lt;p&gt;经过一番仔细核查，原因已找到，是PHP系统自带的CURL函数中的证书验证问题。&lt;/p&gt;
&lt;p&gt;错误提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certificate cannot be authenticated with known CA certificates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中文的意思“对等证书不能使用已知的CA证书进行身份验证”。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;curl的设置中加入这样一项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即在请求中“信任任何证书”，不再进行CA证书验证。&lt;/p&gt;
&lt;p&gt;但是至少耽误了一天半的短信发送，只是因为周末和月底，没被发现而已。从2020年05月30日 19:36之后到2020年06月01日10:30之前，都是失败的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;奇怪的就是&lt;/strong&gt;：为什么之前可以用，突然在2020年05月30日晚上失败了，而且是在没有更改任何服务器配置和项目相关代码的情况。后来检测，其他项目中使用相同方法的也失败了。不得不逐一修复。&lt;/p&gt;
&lt;p&gt;关于CURL函数可以参考官网说明&lt;br&gt;&lt;a href=&quot;https://www.php.net/manual/en/function.curl-setopt.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.php.net/manual/en/function.curl-setopt.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下为php curl https ssl 证书相关的设置汇总：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$curl = curl_init();
curl_setopt($curl,CURLOPT_URL,$url);
curl_setopt($curl, CURLOPT_PORT, 443);
curl_setopt($curl, CURLOPT_SSLVERSION, 3);
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); //信任任何证书
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0); // 检查证书中是否设置域名,0不验证
curl_setopt($curl, CURLOPT_VERBOSE, 1); //debug模式
curl_setopt($curl, CURLOPT_SSLCERT, &amp;quot;./keys/client.crt&amp;quot;); //client.crt文件路径
curl_setopt($curl, CURLOPT_SSLCERTPASSWD, &amp;quot;112358&amp;quot;); //client证书密码
curl_setopt($curl, CURLOPT_SSLKEY, &amp;quot;./keys/client.key&amp;quot;);
curl_setopt($curl, CURLOPT_POST, 1);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;所以，在最后总结三点：&lt;/p&gt;
&lt;p&gt;1、怎么能及时地发现问题；（有没有报警机制）&lt;/p&gt;
&lt;p&gt;2、怎么能快速地解决问题；（核查问题的能力）&lt;/p&gt;
&lt;p&gt;3、怎么能避免问题不再发生。（预防可能遇到的坑）
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;系统的短信发送突然全部失败了。使用postman工具测试阿里云云通信的短信API可以正常发送。&lt;/p&gt;
&lt;p&gt;经过一番仔细核查，原因已找到，是PHP系统自带的CURL函数中的证书验证问题。&lt;/p&gt;
&lt;p&gt;错误提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Peer certifica
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="第三方API" scheme="http://isunman.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9api/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统inodes资源耗尽问题</title>
    <link href="http://isunman.com/2020/05/10/linux-system-inodes-resource-depletion-problem/"/>
    <id>http://isunman.com/2020/05/10/linux-system-inodes-resource-depletion-problem/</id>
    <published>2020-05-10T10:33:00.000Z</published>
    <updated>2020-05-10T11:39:51.290Z</updated>
    
    <content type="html">&lt;p&gt;Linux系统inodes资源耗尽问题&lt;/p&gt;
&lt;h3 id=&quot;1-inodes介绍&quot;&gt;&lt;a href=&quot;#1-inodes介绍&quot; class=&quot;headerlink&quot; title=&quot;1 inodes介绍&quot;&gt;&lt;/a&gt;1 inodes介绍&lt;/h3&gt;&lt;p&gt;Linux系统下文件数据储存在”块”中，文件的元信息，例如文件的创建者、文件的创建日期、文件的大小等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。&lt;/p&gt;
&lt;p&gt;inode也占用硬盘空间，硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。&lt;/p&gt;
&lt;p&gt;每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。&lt;/p&gt;
&lt;h3 id=&quot;2-inodes资源耗尽&quot;&gt;&lt;a href=&quot;#2-inodes资源耗尽&quot; class=&quot;headerlink&quot; title=&quot;2 inodes资源耗尽&quot;&gt;&lt;/a&gt;2 inodes资源耗尽&lt;/h3&gt;&lt;p&gt;inodes使用完与存储空间使用完相似，都是创建不了文件或无法正常执行一些命令。inodes使用完，存储空间可能还有，这种情况一般是生成了大量的小文件，把inode table占满。&lt;/p&gt;
&lt;p&gt;一般情况下存储空间使用完，inodes往往才使用百分之几，所以容易忽视对inodes使用情况的监控。&lt;/p&gt;
&lt;p&gt;借用网图来说明inodes用尽，而磁盘空间还未用完的情况：&lt;/p&gt;
&lt;p&gt;查看磁盘空间使用情况，使用df命令&lt;/p&gt;
&lt;p&gt;查看inodess使用情况，使用df -i命令&lt;/p&gt;
&lt;p&gt;上述两个命令可以使用-h参数，命令为df -h和df -hi。从图中看见磁盘空间使用71%，但是inodes使用100%。&lt;/p&gt;
&lt;h3 id=&quot;3-inodes耗尽解决&quot;&gt;&lt;a href=&quot;#3-inodes耗尽解决&quot; class=&quot;headerlink&quot; title=&quot;3 inodes耗尽解决&quot;&gt;&lt;/a&gt;3 inodes耗尽解决&lt;/h3&gt;&lt;p&gt;inodes的大小在磁盘格式化分区时确定，跟分区的大小相关，分区越大，inodes越大，反之亦然。&lt;/p&gt;
&lt;p&gt;linux操作系统根目录一般分区比较小，如果有定时性的小文件产生而又未及时清理，则很容易造成inodes占满。&lt;/p&gt;
&lt;p&gt;inodes占满解决步骤：&lt;/p&gt;
&lt;h4 id=&quot;（1）查看文件最多的目录&quot;&gt;&lt;a href=&quot;#（1）查看文件最多的目录&quot; class=&quot;headerlink&quot; title=&quot;（1）查看文件最多的目录&quot;&gt;&lt;/a&gt;（1）查看文件最多的目录&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;for i in /*; do echo $i; find $i | wc -l; done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果确定目录范围，把/*写的具体点&lt;/p&gt;
&lt;p&gt;最终发现是/var/spool/postfix/maildrop目录下小文件过多，原因如下：&lt;/p&gt;
&lt;p&gt;由于linux在执行cron时，会将cron执行脚本中的output和warning信息，都会以邮件的形式发送给cron所有者。由于客户环境中的sendmail和postfix没有正常运行，邮件发送不成功，导致全部小文件都堆积在maildrop目录下，另由于缺乏自动清理的机制，故此目录下堆积了大量的文件。&lt;/p&gt;
&lt;p&gt;经过排查root用户下发现有个每分钟进行一次时钟同步的定时任务，该定时任务每分钟产生一个小文件。&lt;/p&gt;
&lt;h4 id=&quot;（2）删除大量文件&quot;&gt;&lt;a href=&quot;#（2）删除大量文件&quot; class=&quot;headerlink&quot; title=&quot;（2）删除大量文件&quot;&gt;&lt;/a&gt;（2）删除大量文件&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ls | xargs -n 1000 rm -rf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;需要使用xargs命令，不然会删除失败。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-总结&quot;&gt;&lt;a href=&quot;#4-总结&quot; class=&quot;headerlink&quot; title=&quot;4 总结&quot;&gt;&lt;/a&gt;4 总结&lt;/h3&gt;&lt;h4 id=&quot;（1）设置方面&quot;&gt;&lt;a href=&quot;#（1）设置方面&quot; class=&quot;headerlink&quot; title=&quot;（1）设置方面&quot;&gt;&lt;/a&gt;（1）设置方面&lt;/h4&gt;&lt;p&gt;在crontab -e 第一行增加MAILTO=”” ，就没有文件产生啦&lt;/p&gt;
&lt;h4 id=&quot;（2）重定向&quot;&gt;&lt;a href=&quot;#（2）重定向&quot; class=&quot;headerlink&quot; title=&quot;（2）重定向&quot;&gt;&lt;/a&gt;（2）重定向&lt;/h4&gt;&lt;p&gt;对定时任务设置定向输出文件，不需要日志输出的定时任务可以将日志重定向到/dev/null，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*/10 * * * * /tmp/test.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（3）定时清理文件&quot;&gt;&lt;a href=&quot;#（3）定时清理文件&quot; class=&quot;headerlink&quot; title=&quot;（3）定时清理文件&quot;&gt;&lt;/a&gt;（3）定时清理文件&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;find 目录 -type f -mtime +30 | xargs -n 1000 rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（4）监控inodes的使用&quot;&gt;&lt;a href=&quot;#（4）监控inodes的使用&quot; class=&quot;headerlink&quot; title=&quot;（4）监控inodes的使用&quot;&gt;&lt;/a&gt;（4）监控inodes的使用&lt;/h4&gt;&lt;p&gt;备注：应注意crontab的写法和产生的文件的定时清理&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下来自另一篇文章《查找和删除占用较多Inodes的目录》&lt;/p&gt;
&lt;p&gt;1.df -h 显示磁盘使用未到52%，但 df -i 显示 100%，站点程序提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning: session_start(): open(/tmp/sess_24q39g3sh8viclu4ok8nkl7nt7, O_RDWR) failed: No space left on device
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.先尝试删除/tmp目录的一个或多个临时文件&lt;/p&gt;
&lt;p&gt;3.从少到多，显示目录占用的inodes数量【实测此条实用】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find / -xdev -printf &amp;apos;%h\n&amp;apos; | sort | uniq -c | sort -k 1 -n
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.本例是 /var/spool/clientmqueue/ 目录占用的inodes数量最多&lt;/p&gt;
&lt;p&gt;5.转到相应的目录，且删除该目录下的文件，请谨慎操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/spool/clientmqueue &amp;amp;&amp;amp; ls | xargs rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.再次查看inodes占用情况，降到10%了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统inodes资源耗尽问题&lt;/p&gt;
&lt;h3 id=&quot;1-inodes介绍&quot;&gt;&lt;a href=&quot;#1-inodes介绍&quot; class=&quot;headerlink&quot; title=&quot;1 inodes介绍&quot;&gt;&lt;/a&gt;1 inodes介绍&lt;/h3&gt;&lt;p&gt;Linux系统下文件数
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>Nginx access.log文件太大，自动释放清理</title>
    <link href="http://isunman.com/2020/05/10/the-nginx-accesslog-file-is-too-large-to-clean-up/"/>
    <id>http://isunman.com/2020/05/10/the-nginx-accesslog-file-is-too-large-to-clean-up/</id>
    <published>2020-05-10T10:30:00.000Z</published>
    <updated>2020-05-10T11:39:40.753Z</updated>
    
    <content type="html">&lt;p&gt;Nginx access.log文件太大，自动释放清理&lt;/p&gt;
&lt;p&gt;Nginx在涉及大流量时，会发生非常庞大的日志文件，包含access.log和error.log，日志会随着连接不断增加，到无限大。如果日志文件太大，会导致Nginx运行缓慢，卡顿，也是存储资源的浪费。&lt;/p&gt;
&lt;p&gt;该文件为nginx的访问日志文件可以删除,删除后nginx启动还会产生&lt;br&gt;如果要关闭日志功能,在nginx配置文件中找到access_log一行,改为access_log off;&lt;/p&gt;
&lt;h3 id=&quot;手动释放清理Nginx日志文件access-log&quot;&gt;&lt;a href=&quot;#手动释放清理Nginx日志文件access-log&quot; class=&quot;headerlink&quot; title=&quot;手动释放清理Nginx日志文件access.log&quot;&gt;&lt;/a&gt;手动释放清理Nginx日志文件access.log&lt;/h3&gt;&lt;p&gt;查看并查找相关信息及路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看空间占用
$ df -h

# 定位Nginx
$ which nginx
/usr/local/nginx/logs

# 列出日志文件
$ cd /usr/local/nginx/logs
ls

# 查看日志文件大小
$ du -sh ./*

# 暂停Nginx并删除日志文件
# nginx -s stop
rm -rf *.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意的是，看到网上有人说重启Nginx可以清除日志文件，这是错误的。重启并不会清空日志文件，你需要手动清理。&lt;/p&gt;
&lt;p&gt;另外，你也可以使用覆盖日志的方法清理Nginx日志文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;&amp;quot; &amp;gt; /usr/local/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不需要日志文件就直接关闭（不建议），nginx.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;access_log off; 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;对Nginx-access-log进行分割&quot;&gt;&lt;a href=&quot;#对Nginx-access-log进行分割&quot; class=&quot;headerlink&quot; title=&quot;对Nginx access.log进行分割&quot;&gt;&lt;/a&gt;对Nginx access.log进行分割&lt;/h3&gt;&lt;p&gt;通过shell脚本+linux的定时任务进行的一个平滑切分。不需要重启nginx进程。代码cut_logs.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
log_path=/usr/local/nginx/logs/access.log
save_path=/usr/local/nginx/logs/bak/access_$(date +%Y%m%d -d &amp;apos;yesterday&amp;apos;).log
cp $log_path $save_path &amp;amp;&amp;amp; echo &amp;gt; $log_path
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置定时任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ crontab -e
#输入
0 0  * * * /usr/bin/sh cut_logs.sh #每天的00:00执行日志切分

$ crontab -l #查看定时任务是否添加成功
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx access.log文件太大，自动释放清理&lt;/p&gt;
&lt;p&gt;Nginx在涉及大流量时，会发生非常庞大的日志文件，包含access.log和error.log，日志会随着连接不断增加，到无限大。如果日志文件太大，会导致Nginx运行缓慢，卡顿，也是存储资源的浪费。&lt;
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>梁宁演讲：在产品里修行</title>
    <link href="http://isunman.com/2020/03/25/liang-ning-speech-practice-in-the-product/"/>
    <id>http://isunman.com/2020/03/25/liang-ning-speech-practice-in-the-product/</id>
    <published>2020-03-25T05:39:00.000Z</published>
    <updated>2020-05-10T11:39:19.833Z</updated>
    
    <content type="html">&lt;p&gt;梁宁演讲：在产品里修行&lt;/p&gt;
&lt;p&gt;大家好，我是梁宁，今天我演讲的题目叫做《在产品里修行》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做一个产品就是你的修行，因为在这个过程里，你需要认识这个世界，你需要认识人的弱点。你需要认识你的本性，并且不去挑战它。你需要认识你的合作伙伴的本性，并且知道怎么去做跨文化的交流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##你需要洞察人性并且不去挑战它&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做产品和做运营是两种人格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们在讨论这次课程的时候，说到一个现象：为什么现在优秀的产品经理里面女性很少?&lt;/p&gt;
&lt;p&gt;一个很重要的原因就是大多数女性是容忍度非常高的人。容忍度高的人，其实是做不了好产品的。她很难把别人逼到角落里还要坚持自己主张。&lt;/p&gt;
&lt;p&gt;产品经理最重要的是有创造力。而创造力是自我的延伸，所以创造力强的人都是极端以自我为中心的人，很难照顾别人的感受。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他的自我造就了他对产品的敏感和决不妥协的态度，以及推到一切的创造力。所以我们看到乔布斯其实就是一个绝对自我的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;腾讯里面关于产品还有另外一个岗位，叫做运营经理。运营经理最重要的是控制，控制节奏，控制资源，控制结果。控制其实是自制力的延伸。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你会发现，作为一个人类，你不可能同时具备超强的自我和超强的自制。所以你如果是一个非常好的营销人员，一定不是一个好产品经理，因为他太爱迎合别人，太懂得体贴别人的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##最大的成本就是用错人&lt;/p&gt;
&lt;p&gt;作为一个创业的公司，很重要的一件事就是，你需要和优秀的人建立重度关系，你不能把时间都放在不优秀的人身上。&lt;/p&gt;
&lt;p&gt;如何去发现优秀的人?他们有三个特点，第一个是敏感度高，第二个特点是容忍度低，第三个特点是主动优化。&lt;/p&gt;
&lt;p&gt;1，&lt;strong&gt;敏感度高&lt;/strong&gt;，其实和每个人的天分有关。有的人一眼就看出有问题，而有的人却很难觉察。这个在面试的时候就应该果断判断，因为让一个人做他不擅长的事情，只能带来双方的痛苦和时间浪费。&lt;/p&gt;
&lt;p&gt;2，&lt;strong&gt;容忍度低&lt;/strong&gt;，从某种程度上来件，其实是一种文化的塑造。比如我们的父母，他们都是在一个完全集体主义的环境中成长起来的，所以他们的成长环境决定了他们势必要学会妥协、容忍，差不多就行了。中国制造、中国产品的特征，同样也是这种高容忍度的产物。&lt;/p&gt;
&lt;p&gt;3，&lt;strong&gt;主动优化&lt;/strong&gt;。一个人发现了问题，他是在不停抱怨还是主动优化?这个取决于你和他的沟通和鼓励。&lt;/p&gt;
&lt;p&gt;比如我家很乱，我请了一个阿姨来打扫，但是她第一次来，她肯定得不停地和我沟通，哪些可以扔哪些不能动。但是时间长了以后，你不用多说，她也可以自动优化了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以我们在搭建团队的时候，首先就是你必须快速地察觉他是不是有足够的敏感度，其次，用你的沟通和鼓励让他从一个敏感，容忍度低的人变成一个能够主动优化的人，这是我们搭建一个好的创业团队的关键。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##你对世界的洞察在你的产品之中&lt;/p&gt;
&lt;p&gt;你对于世界的洞察，对于产业的掌控力，其实都在你自己的产品当中。接下来我们说一说对产品的洞察。&lt;/p&gt;
&lt;p&gt;我想分为产品、用户、场景三点来分析。&lt;/p&gt;
&lt;p&gt;你要提供的产品，是你能够持续驾驭的产业链的长度、力度和精准度。&lt;/p&gt;
&lt;h2 id=&quot;产品是你提供服务的能力&quot;&gt;&lt;a href=&quot;#产品是你提供服务的能力&quot; class=&quot;headerlink&quot; title=&quot;产品是你提供服务的能力&quot;&gt;&lt;/a&gt;产品是你提供服务的能力&lt;/h2&gt;&lt;p&gt;先看产品。&lt;strong&gt;产品不是简单的APP界面，而是你提供服务的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我之前做过一个旅游网站，后来被腾讯全资收购，于是有了在腾讯学习工作的三年。在腾讯的内部交流里，没有人谈产品和功能，大家谈的是服务和特性。&lt;/p&gt;
&lt;p&gt;为什么?因为你在谈产品，有可能一个功能扩展起来就是一个产品，比如说评论，对于很多人来讲是一个功能，但是你把它整个运营好，它就是微博。&lt;/p&gt;
&lt;p&gt;所以不谈产品，谈服务，我们关心你提供的到底是一个什么样的服务?&lt;/p&gt;
&lt;p&gt;这种思路就解决了不是以产品经理的个人认知为中心，而是以服务对象的需求和满意度为中心去优化产品、设计服务的问题。&lt;/p&gt;
&lt;h3 id=&quot;真正关键的是产品的隐性特征&quot;&gt;&lt;a href=&quot;#真正关键的是产品的隐性特征&quot; class=&quot;headerlink&quot; title=&quot;真正关键的是产品的隐性特征&quot;&gt;&lt;/a&gt;真正关键的是产品的隐性特征&lt;/h3&gt;&lt;p&gt;我在腾讯学会的第一节产品课是一台ATM机。&lt;/p&gt;
&lt;p&gt;第一个问题，ATM机提供什么服务?取现。第二个问题，ATM机有什么特性?&lt;/p&gt;
&lt;p&gt;一堆的产品控可能跳出来说：屏幕是什么颜色的?是先出卡还是先出钞?能否支持手机扫码取现?&lt;/p&gt;
&lt;p&gt;其实这些都是ATM机的显性特征。那么ATM机的隐性特征是什么?&lt;/p&gt;
&lt;p&gt;大家知道在一台ATM机里面会放现金?一台ATM机基本四个钞箱，一个钞箱是20万现金，四个都装满了是80万。但大多数ATM机会放50万现金在里面。为什么?因为这些放在ATM机的现金是不能产生利息的。&lt;/p&gt;
&lt;p&gt;也就是说，当ATM提供为柜台分流取现压力的同时，它同时也分流了这个企业的核心资源。&lt;/p&gt;
&lt;p&gt;所以如何通过数据统计支持决策，既能为用户提供充足的取现服务，又能避免过多的资金闲置，成为ATM机的隐性特征。&lt;/p&gt;
&lt;p&gt;第三个问题，ATM服务的全流程是什么?&lt;/p&gt;
&lt;p&gt;表面上来看，用户只需要插卡、输入密码，就可以取现。但是从企业角度来看，它至少需要这些流程去支持一台ATM机的正常运转。&lt;/p&gt;
&lt;p&gt;战略部门。它来确定我们为什么需要一台ATM机。&lt;/p&gt;
&lt;p&gt;战略价值分两个：分流柜台窗口的取现压力;在人流多的商场设置ATM机，可以向用户传达品牌亲近感和安心感。&lt;/p&gt;
&lt;p&gt;运营部。用数据分析支持决策：在哪些网点设置ATM机以及放置多少现金。&lt;/p&gt;
&lt;p&gt;运营部四个功能：第一个增撤网点;第二个现金管理，包括现金的回收和放置;此外还需要两个人，一个人管硬件，一个人拿钥匙。&lt;/p&gt;
&lt;p&gt;硬件维护。ATM机的无法打印凭条，断电等等问题的处理。&lt;/p&gt;
&lt;p&gt;客服。取钱吞卡，出钱有误等等问题处理。&lt;/p&gt;
&lt;p&gt;就是说这么一台最简单的产品，它的背后需要至少7个岗位来围绕它工作。&lt;/p&gt;
&lt;p&gt;###结论&lt;/p&gt;
&lt;p&gt;当我们谈起产品，绝大多数人想到的只是APP的界面，但实际上对产品的定义是完整的服务流程，和总体的服务成本。你要提供的产品，是你能够持续驾驭的产业链的长度、力度和精准度。&lt;/p&gt;
&lt;p&gt;什么叫长度?京东的供应链和物流控制能力。&lt;/p&gt;
&lt;p&gt;什么叫力度?比如双十一大战时，天猫向供应商要求，你只能向我供货，我是你的唯一分销商。这就是力度。&lt;/p&gt;
&lt;p&gt;什么是精准度?我重仓压一个什么东西，结果搞错了，这就是精准度的问题。首先去搞清楚，自己要提供的到底是什么服务?&lt;/p&gt;
&lt;p&gt;最后再去想怎么展现，是用APP还是网站还是实体店，这些都只是产品的显性特征和外化模式而已。&lt;/p&gt;
&lt;p&gt;不管是小闲还是笨笨，最后都会转化为笨笨，这里面是一个情绪触发的过程。&lt;/p&gt;
&lt;p&gt;好的产品从精细的用户画像开始&lt;/p&gt;
&lt;h2 id=&quot;第二个，用户。&quot;&gt;&lt;a href=&quot;#第二个，用户。&quot; class=&quot;headerlink&quot; title=&quot;第二个，用户。&quot;&gt;&lt;/a&gt;第二个，用户。&lt;/h2&gt;&lt;p&gt;刚刚我们举的一台ATM机的例子，我们说它是最简答的产品。为什么，因为它是唯一一个不用考虑用户细分的产品。&lt;/p&gt;
&lt;p&gt;但是除了钱之外的任何一个产品，你都需要做用户细分，去研究用户画像。所以大家记住，我们做的东西是一定是远比一台ATM机复杂的产品。&lt;/p&gt;
&lt;p&gt;###三类最简单的用户画像&lt;/p&gt;
&lt;p&gt;关于用户画像，我们从最简单的三个用户说起：&lt;/p&gt;
&lt;p&gt;第一个用户叫“大明“。大明的特点是什么呢?他决定暑假的某一段确定的时间带小孩去新加坡旅游。他要做什么，什么时间做，他非常清楚。&lt;/p&gt;
&lt;p&gt;他对自己所要的东西已经非常清晰了，所以给我硬货，好的配置和好的价格，最快的效率，这就是大明需要的。&lt;/p&gt;
&lt;p&gt;中国最早的电子商务网站，都是服务于大明的。这些网站的共同特点就是大大的搜索框，强大的检索功能，非常快地找到自己要的东西，这对大明来说，就是最好的服务。&lt;/p&gt;
&lt;p&gt;还有一类叫“笨笨”。笨笨什么特点呢?暑假我想出去玩，但是去哪儿呢?欧洲没去过，巴厘岛也没去过，听说新加坡也挺好的，好多人都去日本…然后我去哪儿玩呢，有可能她最后去了漓江，或者她哪儿也没去，就在北京怀柔延庆溜达了一下。&lt;/p&gt;
&lt;p&gt;笨笨的特点就是不知道自己要什么。你给我搜索框，可是我还不知道自己要什么?我需要浏览，我需要逛，可能我花了8个小时逛街，本来要买的裙子没有买，而是买了一把雨伞和几双袜子。&lt;/p&gt;
&lt;p&gt;所以互联网崛起的第二类电商其实是服务于笨笨的。蘑菇街，小红书都是这样的模式，给你充分的浏览，在你的浏览过程中，设计促进购物决策的环节。&lt;/p&gt;
&lt;p&gt;还有一类叫“小闲”。我没有想去旅游，我就是无聊来网上瞎逛。小闲其实就是你我的常态，就是我们的需求没有被触发之前，其实人人都是小闲。&lt;/p&gt;
&lt;p&gt;其实腾讯是一个非常经典的服务小闲的公司，为什么呢?QQ聊天是因为闲，刷微信朋友圈也是因为闲，你在任何一个闲的时候，你只要打开腾讯的产品，都可以足够让你打发时间。&lt;/p&gt;
&lt;p&gt;所以从腾讯的小闲延伸出来，到游戏和视频的转化率就非常高，为什么?因为游戏也好、视频也好，它本质上都是沿着小闲的行为路径，让大家继续打发时间的一个行动。&lt;/p&gt;
&lt;p&gt;这是三种用户的不同的状态。&lt;/p&gt;
&lt;p&gt;不管是“小闲”还是“笨笨”&lt;/p&gt;
&lt;p&gt;最后都会变成“大明”&lt;/p&gt;
&lt;p&gt;从小闲到笨笨到大明，其实这是一个连续的情绪触发的过程。怎么解释，其实当用户的情绪被触发，锁定了他要做什么事情的时候，小闲和笨笨就变成了大明。&lt;/p&gt;
&lt;p&gt;你要服务小闲，你就需要提供一个打发时间的东西，豆瓣、天涯、猫扑、这些社区网站就是这类产品。但是我们看到这类产品向交易导流的效果都不太好，其实就是因为从小闲到大明的转化流程过长。&lt;/p&gt;
&lt;p&gt;笨笨的产品就很典型，比如说美丽说，蘑菇街，我先收藏，收藏了很多以后，我到淘宝上去搜同类，搜到最喜欢的款式以后，我再去比价，找到最便宜的那家，然后购买。&lt;/p&gt;
&lt;p&gt;上面就是一个比较经典的用户从小闲到笨笨到大明的转化过程，其实我们每个人都会有一个情绪被激发和需求变明确的过程。&lt;/p&gt;
&lt;p&gt;但是不管这个用户之前是小闲还是笨笨，是男是女，最后购买的一瞬间一定是变成大明。而搞定大明的唯一的办法就是提供硬货。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景是通过情绪触发和意见挟裹引导用户决策的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;场景是引导用户决策的过程&lt;/p&gt;
&lt;p&gt;##第三个是场景。&lt;/p&gt;
&lt;p&gt;从小闲到笨笨再到大明这个过程中，其实有非常多的具体和建设场景的工作要做。&lt;/p&gt;
&lt;p&gt;场景是什么?“场”是停留时间和消费时间，而“景”是情绪触发和意见挟裹。&lt;/p&gt;
&lt;p&gt;如果你只提供了一个广告，但是你没有给用户提供停留空间，然后在这个停留时间里面去激发用户的消费情绪，那么这个广告转化成购买的距离还是非常遥远。&lt;/p&gt;
&lt;p&gt;情绪是最支持人做决策的一个动力。下一件事情是互动，那互动的本质其实是你对用户行为的影响。&lt;/p&gt;
&lt;p&gt;营销活动就是这么一个场景，让用户停留在我搭建的场景里，花时间了解，酝酿情绪，然后他被周围的意见挟裹，被你引导，这就是营销的核心。它的核心不在于你提供一个功能，而在于你搭建了一个场景。&lt;/p&gt;
&lt;p&gt;举个例子，罗辑思维&lt;/p&gt;
&lt;p&gt;罗辑思维有一次打包卖书，就是这个套装里面有6本书，但是你不知道你们都有哪些书，而且限量8000套来销售。&lt;/p&gt;
&lt;p&gt;一个淘宝店主就觉得这个套装一定有价值，因为限量必须要抢购。所以他在开卖的第一时间就抢购了10套，在紧接着的1个小时内8000套书就售罄了。&lt;/p&gt;
&lt;p&gt;罗辑思维的群里还有人在问，怎么没了，还能到哪儿买?于是这位淘宝店主就把他买的10套书上架销售。&lt;/p&gt;
&lt;p&gt;他就想说，大家都想买买不到，我怎么着也得加点价吧。于是他加了点价450开卖，放了两天没人来问，降到400，还是没人问，然后打折，还是没有人问。最后这套书在淘宝是零交易。&lt;/p&gt;
&lt;p&gt;为什么同样一套书，在罗辑思维上是1小时8000套一抢而空，但是在淘宝店主这里是打了对折，放了10天还是零交易呢?&lt;/p&gt;
&lt;p&gt;原因就在于罗辑思维其实搭建了一个场景，对消费者进行意见挟裹。这里面最核心的是什么?如果你架构的场景，不能影响别人的情绪，不能对别人造成情绪触动的，那它就不是一个场景。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;梁宁演讲：在产品里修行&lt;/p&gt;
&lt;p&gt;大家好，我是梁宁，今天我演讲的题目叫做《在产品里修行》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做一个产品就是你的修行，因为在这个过程里，你需要认识这个世界，你需要认识人的弱点。你需要认识你的本性，并且不去挑战它。你需要认识你的合作伙伴的本性，
    
    </summary>
    
      <category term="生活感悟" scheme="http://isunman.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="思考" scheme="http://isunman.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>手机App扫码登录Web端，技术上是怎么实现的？</title>
    <link href="http://isunman.com/2020/02/15/mobile-phone-app-scan-code-login-web-terminal-how-to-achieve-technically/"/>
    <id>http://isunman.com/2020/02/15/mobile-phone-app-scan-code-login-web-terminal-how-to-achieve-technically/</id>
    <published>2020-02-15T03:38:00.000Z</published>
    <updated>2020-06-01T09:18:24.369Z</updated>
    
    <content type="html">&lt;p&gt;手机App扫码登录Web端，技术上是怎么实现的？&lt;/p&gt;
&lt;p&gt;##1、引言&lt;/p&gt;
&lt;p&gt;扫码登录这个功能，最早应该是微信的PC端开始搞，虽然有点反人类的功能（不扫码也没别的方式登录），但不得不说还是很酷的。&lt;/p&gt;
&lt;p&gt;下面这张图，不管是IM开发者还是普通用户，应该很熟悉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/202655hhi73ezfei7icd88.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;于是，搞IM产品的老板和产品经理们，从此又多了一个要抛给程序员们的需求——“为什么微信有扫一扫登录，而我们的没有？”。&lt;/p&gt;
&lt;p&gt;好吧，每次只要是微信有的功能，IM程序员们想甩锅，难度就有点大了，毕竟老板们都都会想当然认为，微信有的“我”的IM产品里也得有。&lt;/p&gt;
&lt;p&gt;既然无法回避，那就只能老老实实搞懂技术原理，然后自已使劲撸吧。&lt;/p&gt;
&lt;p&gt;本文将简要的介绍扫码登录功能的技术实现逻辑，并实际结合淘宝、微信的扫码登录功能，学习和研究大厂主流应用的技术实现思路。&lt;/p&gt;
&lt;p&gt;##2、基本技术原理&lt;/p&gt;
&lt;p&gt;###2.1 扫码登录功能到底是什么样的？&lt;/p&gt;
&lt;p&gt;首先介绍下什么是扫码登录。现在大部分同学手机上都装有微信、qq和淘宝这一类的软件。而这些app都有他们相对应的网页端。为了让用户在使用他们的网页时登录更加方便和安全，使用手机扫一扫就可以登录的服务，就显得自然而然了。&lt;/p&gt;
&lt;p&gt;几个主流大厂应用扫码登录时的界面效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/203056dycwfmmpcpoh6m8e.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有很多小伙伴可能会感到很神奇，网页上只是显示了个二维码，它怎么就知道是哪个手机扫到了二维码，并且进行登录的呢？而且，登录完成以后，还能直接把用户信息显示给用户，真的是很神奇啊。&lt;/p&gt;
&lt;p&gt;###2.2 扫码登录功能的完整技术逻辑&lt;/p&gt;
&lt;p&gt;####1）网页端与服务器的配合逻辑：&lt;/p&gt;
&lt;p&gt;接下来就是对于这个服务的详细实现。&lt;/p&gt;
&lt;p&gt;首先用户打开网站的登录页面的时候，向浏览器的服务器发送获取登录二维码的请求。服务器收到请求后，随机生成一个uuid，将这个id作为key值存入redis服务器，同时设置一个过期时间，再过期后，用户登录二维码需要进行刷新重新获取。&lt;/p&gt;
&lt;p&gt;同时，将这个key值和本公司的验证字符串合在一起，通过二维码生成接口，生成一个二维码的图片（二维码生成，网上有很多现成的接口和源码，这里不再介绍）。然后，将二维码图片和uuid一起返回给用户浏览器。&lt;/p&gt;
&lt;p&gt;浏览器拿到二维码和uuid后，会每隔一秒向浏览器发送一次，登录是否成功的请求。请求中携带有uuid作为当前页面的标识符。这里有的同学就会奇怪了，服务器只存了个uuid在redis中作为key值，怎么会有用户的id信息呢？&lt;/p&gt;
&lt;p&gt;这里确实会有用户的id信息，这个id信息是由手机服务器存入redis中的。具体请继续阅读“手机端与服务器的配合逻辑”。&lt;/p&gt;
&lt;p&gt;####2）手机端与服务器的配合逻辑：&lt;/p&gt;
&lt;p&gt;话说，浏览器拿到二维码后，将二维码展示到网页上，并给用户一个提示：请掏出您的手机，打开扫一扫进行登录。&lt;/p&gt;
&lt;p&gt;用户拿出手机扫描二维码，就可以得到一个验证信息和一个uuid（扫描二维码获取字符串的功能在网上同样有很多demo，这里就不详细介绍了）。&lt;/p&gt;
&lt;p&gt;由于手机端已经进行过了登录，在访问手机端的服务器的时候，参数中都会携带一个用户的token，手机端服务器可以从中解析到用户的userId（这里从token中取值而不是手机端直接传userid是为了安全，直接传userid可能会被截获和修改，token是加密的，被修改的风险会小很多）。手机端将解析到的数据和用户token一起作为参数，向服务器发送验证登录请求（这里的服务器是手机服务器，手机端的服务器跟网页端服务器不是同一台服务器）。&lt;/p&gt;
&lt;p&gt;服务器收到请求后，首先对比参数中的验证信息，确定是否为用户登录请求接口。如果是，返回一个确认信息给手机端。&lt;/p&gt;
&lt;p&gt;手机端收到返回后，将登录确认框显示给用户（防止用户误操作，同时使登录更加人性化）。用户确认是进行的登录操作后，手机再次发送请求。服务器拿到uuId和userId后，将用户的userid作为value值存入redis中以uuid作为key的键值对中。&lt;/p&gt;
&lt;p&gt;####3）登录成功时的逻辑：&lt;/p&gt;
&lt;p&gt;然后，浏览器再次发送请求的时候，浏览器端的服务器就可以得到一个用户Id，并调用登录的方法，生成一个浏览器端的token，再浏览器再次发送请求的时候，将用户信息返回给浏览器，登录成功。这里存储用户id而不是直接存储用户信息是因为，手机端的用户信息，不一定是和浏览器端的用户信息完全一致。&lt;/p&gt;
&lt;p&gt;####4）详细的技术原理总结如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/210751e2bz7c27qcbq7ugo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;###3、淘宝的扫码登录技术实现&lt;/p&gt;
&lt;p&gt;本节我们以淘宝的扫码登录为例，来实际研究分析一下淘宝的扫码登录实现逻辑。&lt;/p&gt;
&lt;p&gt;登录界面 &lt;a href=&quot;https://login.taobao.com/member/login.jhtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://login.taobao.com/member/login.jhtml&lt;/a&gt; 传回来的参数为：&lt;/p&gt;
&lt;p&gt;然后请求(GET)报文是这样的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://qrlogin.taobao.com/qrcodelogin/qrcodeLoginCheck.do?
lgToken=2c3b4d53ef0513787bf4ce711ea5ba53&amp;amp;defaulturl=&amp;amp;_ksTS=1540106757739_2804&amp;amp;callback=jsonp2805
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关键的就是lgToken，是网页的唯一ID，当打开了二维码登录的时候，网页在轮询(应该是长轮询long polling)调用接口去请求服务器。扩展：彻底理解cookie，session，token&lt;/p&gt;
&lt;p&gt;如果没有扫码，返回的为：&lt;/p&gt;
&lt;p&gt;如果扫了的话则会返回：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{

    &amp;quot;code&amp;quot;: &amp;quot;10001&amp;quot;,

    &amp;quot;message&amp;quot;: &amp;quot;mobile scan QRCode success&amp;quot;,

    &amp;quot;success&amp;quot;: true

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;长时间没有扫码的话，网页端会停止轮询，二维码失效！&lt;/p&gt;
&lt;p&gt;当手机端确认登录后，接口返回的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ 
&amp;quot;code&amp;quot;: &amp;quot;10006&amp;quot;, 
&amp;quot;success&amp;quot;: true,
 &amp;quot;url&amp;quot;: &amp;quot;https://login.taobao.com/member/loginByIm.do?uid=cntaobaoxxx&amp;amp;token=ff82fc0d1d395a33d3b38ec5a4981336&amp;amp;time=1530179143250&amp;amp;asker=qrcodelogin&amp;amp;ask_version=1.0.0&amp;amp;defaulturl=https://www.taobao.com&amp;amp;webpas=0b7aed2d43f01825183e4a49c6cae47d1479929926&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;表示登录成功，当然手机端与服务端在点击”确认登录”之间的交互可能就是这样：网页端生成的lgToken去请求服务端，服务端记住了这个lgToken并认为登录了，当网页端再次轮询请求接口时，就返回真正的登录态Token，网页端此时就可以凭着这个Token来登录了。&lt;/p&gt;
&lt;p&gt;详细的技术逻辑如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/212653o685grmsmldylv36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##4、微信的扫码登录技术实现&lt;/p&gt;
&lt;p&gt;###4.1 技术原理流程图&lt;br&gt;&lt;img src=&quot;http://www.52im.net/data/attachment/forum/202001/06/213927pve6vavng8iavy4v.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;微信的网页版访问地址是：&lt;a href=&quot;https://wx.qq.com/，有兴趣也可以自行深入研究。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wx.qq.com/，有兴趣也可以自行深入研究。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###4.2 实际的技术实现逻辑&lt;/p&gt;
&lt;p&gt;####1）获取唯一的uuid, 以及包含uid信息的二维码：&lt;/p&gt;
&lt;p&gt;// 获取uuid&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getUUID: function() {

    vare = t.defer();

    returnwindow.QRLogin = {},

    $.ajax({

        url: i.API_jsLogin,

        dataType: &amp;quot;script&amp;quot;

    }).done(function() {

        200 == window.QRLogin.code ? e.resolve(window.QRLogin.uuid) : e.reject(window.QRLogin.code)

    }).fail(function() {

        e.reject()

    }),

    e.promise

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####2）浏览器轮询服务器，获取扫码状态：&lt;/p&gt;
&lt;p&gt;// 查看扫码状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;checkLogin: function(e, a) {

    varn = t.defer()

        , a = a || 0;

    returnwindow.code = 0,

    window.checkLoginPromise = $.ajax({

        url: i.API_login + &amp;quot;?loginicon=true&amp;amp;uuid=&amp;quot;+ e + &amp;quot;&amp;amp;tip=&amp;quot;+ a + &amp;quot;&amp;amp;r=&amp;quot;+ ~newDate,

        dataType: &amp;quot;script&amp;quot;,

        timeout: 35e3

    }).done(function() {

        newRegExp(&amp;quot;/&amp;quot;+ location.host + &amp;quot;/&amp;quot;);

        if(window.redirect_uri &amp;amp;&amp;amp; window.redirect_uri.indexOf(&amp;quot;/&amp;quot;+ location.host + &amp;quot;/&amp;quot;) &amp;lt; 0)

            returnvoid (location.href = window.redirect_uri);

        vare = {

            code: window.code,

            redirect_uri: window.redirect_uri,

            userAvatar: window.userAvatar

        };

        n.resolve(e)

    }).fail(function() {

        n.reject()

    }),

    n.promise

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####3）根据服务器返回的扫码状态，进行相应的操作：&lt;/p&gt;
&lt;p&gt;408 扫码超时：如果手机没有扫码或没有授权登录，服务器会阻塞约25s，然后返回状态码 408 -&amp;gt; 前端继续轮询&lt;/p&gt;
&lt;p&gt;400 二维码失效：大约5分钟的时间内不扫码，二维码失效&lt;/p&gt;
&lt;p&gt;201 已扫码：如果手机已经扫码，服务器立即返回状态码和用户的基本信息 （window.code=201,window.code.userAvator=”…”），-&amp;gt; 前端继续轮询&lt;/p&gt;
&lt;p&gt;200 已授权：如果手机点击了确认登录，服务器返回200及token -&amp;gt; 前端停止轮询, 获取到token，重定向到目标页&lt;/p&gt;
&lt;p&gt;具体的代码示例如下：&lt;/p&gt;
&lt;p&gt;// 根据服务器返回的扫码状态，进行相应的操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;functiono(c) {
    switch(c.code) {
    case200:
        t.newLoginPage(c.redirect_uri).then(function(t) {
            varo = t.match(/&amp;lt;ret&amp;gt;(.*)&amp;lt;\/ret&amp;gt;/)
                , r = t.match(/&amp;lt;script&amp;gt;(.*)&amp;lt;\/script&amp;gt;/)
                , c = t.match(/&amp;lt;skey&amp;gt;(.*)&amp;lt;\/skey&amp;gt;/)
                , s = t.match(/&amp;lt;wxsid&amp;gt;(.*)&amp;lt;\/wxsid&amp;gt;/)
                , l = t.match(/&amp;lt;wxuin&amp;gt;(.*)&amp;lt;\/wxuin&amp;gt;/)
                , d = t.match(/&amp;lt;pass_ticket&amp;gt;(.*)&amp;lt;\/pass_ticket&amp;gt;/)
                , f = t.match(/&amp;lt;message&amp;gt;(.*)&amp;lt;\/message&amp;gt;/)
                , u = t.match(/&amp;lt;redirecturl&amp;gt;(.*)&amp;lt;\/redirecturl&amp;gt;/);
            returnu ? void (window.location.href = u[1]) : o &amp;amp;&amp;amp; &amp;quot;0&amp;quot;!= o[1] ? (alert(f &amp;amp;&amp;amp; f[1] || &amp;quot;登录失败&amp;quot;),
            i.report(i.AUTH_FAIL_COUNT, 1),
            void location.reload()) : (e.$emit(&amp;quot;newLoginPage&amp;quot;, {
                Ret: o &amp;amp;&amp;amp; o[1],
                SKey: c &amp;amp;&amp;amp; c[1],
                Sid: s &amp;amp;&amp;amp; s[1],
                Uin: l &amp;amp;&amp;amp; l[1],
                Passticket: d &amp;amp;&amp;amp; d[1],
                Code: r
            }),

            void (a.getCookie(&amp;quot;webwx_data_ticket&amp;quot;) || n.report(n.ReportType.cookieError, {
                text: &amp;quot;webwx_data_ticket 票据丢失&amp;quot;,
                cookie: document.cookie
            })))
        });
        break;

    case201:
        e.isScan = !0,
        n.report(n.ReportType.timing, {
            timing: {
                scan: Date.now()
            }
        }),
        t.checkLogin(e.uuid).then(o, function(t) {
            !t &amp;amp;&amp;amp; window.checkLoginPromise &amp;amp;&amp;amp; (e.isBrokenNetwork = !0)
        });
        break;

    case408:
        t.checkLogin(e.uuid).then(o, function(t) {
            !t &amp;amp;&amp;amp; window.checkLoginPromise &amp;amp;&amp;amp; (e.isBrokenNetwork = !0)
        });
        break;

    case400:

    case500:

    case0:
        vars = a.getCookie(&amp;quot;refreshTimes&amp;quot;) || 0;
        s &amp;lt; 5 ? (s++,
        a.setCookie(&amp;quot;refreshTimes&amp;quot;, s, .5),
        document.location.reload()) : e.isNeedRefresh = !0;
        break;

    case202:
        e.isScan = !1,
        e.isAssociationLogin = !1,
        a.setCookie(&amp;quot;login_frequency&amp;quot;, 0, 2),
        window.checkLoginPromise &amp;amp;&amp;amp; (window.checkLoginPromise.abort(),
        window.checkLoginPromise = null),
        r()
    }

    e.code = c.code,
    e.userAvatar = c.userAvatar,
    a.log(&amp;quot;get code&amp;quot;, c.code)

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###4.3 小结&lt;/p&gt;
&lt;p&gt;微信网页端扫码登录时，轮询的数据返回采用的是JSONP的形式，这是为了解决跨域问题。如对JSONP不了解的，可以参考：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://www.52im.net/thread-1038-1-1.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;微信网页端扫码登录时，轮询采用了后台根据扫码情况阻塞前台请求，优化轮询及减少前端的无效轮询。这种技术，请详见：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://www.52im.net/thread-338-1-1.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##5、本文小结&lt;/p&gt;
&lt;p&gt;扫码登录这个功能，现在已经不只出现有IM应用里，各种带有移动端的线上网站也都有了这个功能，所以本文中介绍的技术原理并不局限于只用于实现IM应用中的扫码登录。&lt;/p&gt;
&lt;p&gt;另外，为了方便抓取真实的数据进行分析研究，本文中的PC端案例分析是针对的是网页端，但实际上如果你的PC端是富客户端（也就是.exe、.dmg这样的安装版），原理也是一样的，而且还不需要考虑浏览器里的跨域问题等。&lt;/p&gt;
&lt;p&gt;阅读本文时，可能涉及到传统的Web端即时通讯技术（为了扫码登录的实时性），比如长轮询等，如果您对这些技术还不太了解的话，可以系统学习一下即时通讯网整理的有关Web端即时通讯方面的资料。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文参考链接1：&lt;a href=&quot;https://mp.weixin.qq.com/s/ND6vF_HAueH8GuQJzPkiBg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来源微信公众号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文参考链接2：&lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2892&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;即时通讯网&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;手机App扫码登录Web端，技术上是怎么实现的？&lt;/p&gt;
&lt;p&gt;##1、引言&lt;/p&gt;
&lt;p&gt;扫码登录这个功能，最早应该是微信的PC端开始搞，虽然有点反人类的功能（不扫码也没别的方式登录），但不得不说还是很酷的。&lt;/p&gt;
&lt;p&gt;下面这张图，不管是IM开发者还是普通用户，应该很
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="即时通讯" scheme="http://isunman.com/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
      <category term="微信" scheme="http://isunman.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>PHP5.6通过CURL上传图片@符无效的兼容问题</title>
    <link href="http://isunman.com/2020/01/10/php56-an-invalid-compatibility-problem-with-the-sign-of-an-image-uploaded-via-curl/"/>
    <id>http://isunman.com/2020/01/10/php56-an-invalid-compatibility-problem-with-the-sign-of-an-image-uploaded-via-curl/</id>
    <published>2020-01-10T12:26:00.000Z</published>
    <updated>2020-05-10T11:38:34.686Z</updated>
    
    <content type="html">&lt;p&gt;今天本来想试试一个图片云的API，于是本地做了个上传图片的测试，结果灰常郁闷的发现以前一直用的好好的CURL上传图片居然死活不起作用，本来几分钟搞定的事情，结果折腾了大半天才终于找到原因，居然是兼容性问题，真是无语。。&lt;/p&gt;
&lt;p&gt;网上搜索PHP通过CURL上传图片几乎都是类似下面的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&amp;apos;Content-type:text/html; charset=utf-8&amp;apos;); //声明编码
$ch = curl_init();
$url = &amp;apos;https://xxx.com/api/mobile/auto_upload.php?uid=9705459&amp;apos;;

//post数据，使用@符号，curl就会认为是有文件上传
$curlPost = array(&amp;apos;Filedata&amp;apos;=&amp;gt;&amp;apos;@/Users/finup/Documents/11.png&amp;apos;);


curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_HEADER, 1);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1); //POST提交
curl_setopt($ch, CURLOPT_POSTFIELDS,$curlPost);
$data =curl_exec($ch);
curl_close($ch);
echo &amp;apos;&amp;lt;pre&amp;gt;&amp;apos;;
var_dump($data);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以前上传图片都是在图片路径前面增加一个 @符号，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. $file);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就行了，但现在这种情况一般只适用于 PHP5.6以下的版本。&lt;br&gt;对5.6来说，直接加@是木有用的啦。&lt;/p&gt;
&lt;p&gt;解决办法有两个：一种是兼容；二是使用新的方法。&lt;/p&gt;
&lt;p&gt;1 . 兼容方法：&lt;br&gt;主要用到 CURL 的一个配置参数 CURLOPT_SAFE_UPLOAD&lt;br&gt;CURLOPT_SAFE_UPLOAD 在 PHP5.5中默认值是 false&lt;br&gt;而在 PHP5.6中已经默认为 true 了。&lt;br&gt;所以只需要增加一行强制设置为 false 就行，如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：该参数的设置顺序，必须在设置 CURLOPT_POSTFIELDS 参数之前才有效哦！！！&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$url = &amp;apos;http://127.0.0.1/test3.php&amp;apos;;
$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. $file);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_SAFE_UPLOAD, false);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
$content = curl_exec($curl);
curl_close($curl);
print_r($content);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2 . 新的图片上传方法：&lt;br&gt;使用 CURLFile 类来处理文件，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$url = &amp;apos;http://127.0.0.1/test3.php&amp;apos;;
$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;new CURLFile($file));
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
$content = curl_exec($curl);
curl_close($curl);
print_r($content);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我这里只是最简单的应用，具体可参考下面官方文档：&lt;br&gt;&lt;a href=&quot;http://php.net/manual/en/class.curlfile.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://php.net/manual/en/class.curlfile.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这下终于上传成功了。。。太坑爹了，一天时间又被折腾完了。&lt;/p&gt;
&lt;p&gt;最后，注意使用CURLFile类时的一个问题：&lt;/p&gt;
&lt;p&gt;CURLFile的第三个参数，如果使用的话，要么带上后缀的文件全名；要么整个空着。不能有值又不带后缀，否则DZ系统默认上传失败，因为获取文件扩展名为空。&lt;/p&gt;
&lt;p&gt;当然，如果像上面示例一样只有一个文件路径本身，其他全都是缺省值（默认值），服务器会自动获取其他文件属相参数，反而是一个更好的方案。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天本来想试试一个图片云的API，于是本地做了个上传图片的测试，结果灰常郁闷的发现以前一直用的好好的CURL上传图片居然死活不起作用，本来几分钟搞定的事情，结果折腾了大半天才终于找到原因，居然是兼容性问题，真是无语。。&lt;/p&gt;
&lt;p&gt;网上搜索PHP通过CURL上传图片几乎都
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
