<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳侠</title>
  <subtitle>我是一颗恒星</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://isunman.com/"/>
  <updated>2020-01-10T12:29:30.719Z</updated>
  <id>http://isunman.com/</id>
  
  <author>
    <name>isunman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP5.6通过CURL上传图片@符无效的兼容问题</title>
    <link href="http://isunman.com/2020/01/10/php56-an-invalid-compatibility-problem-with-the-sign-of-an-image-uploaded-via-curl/"/>
    <id>http://isunman.com/2020/01/10/php56-an-invalid-compatibility-problem-with-the-sign-of-an-image-uploaded-via-curl/</id>
    <published>2020-01-10T12:29:30.786Z</published>
    <updated>2020-01-10T12:29:30.719Z</updated>
    
    <content type="html">&lt;p&gt;今天本来想试试一个图片云的API，于是本地做了个上传图片的测试，结果灰常郁闷的发现以前一直用的好好的CURL上传图片居然死活不起作用，本来几分钟搞定的事情，结果折腾了大半天才终于找到原因，居然是兼容性问题，真是无语。。&lt;/p&gt;
&lt;p&gt;网上搜索PHP通过CURL上传图片几乎都是类似下面的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&amp;apos;Content-type:text/html; charset=utf-8&amp;apos;); //声明编码
$ch = curl_init();
$url = &amp;apos;https://xxx.com/api/mobile/auto_upload.php?uid=9705459&amp;apos;;

//post数据，使用@符号，curl就会认为是有文件上传
$curlPost = array(&amp;apos;Filedata&amp;apos;=&amp;gt;&amp;apos;@/Users/finup/Documents/11.png&amp;apos;);


curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_HEADER, 1);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1); //POST提交
curl_setopt($ch, CURLOPT_POSTFIELDS,$curlPost);
$data =curl_exec($ch);
curl_close($ch);
echo &amp;apos;&amp;lt;pre&amp;gt;&amp;apos;;
var_dump($data);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以前上传图片都是在图片路径前面增加一个 @符号，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. $file);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就行了，但现在这种情况一般只适用于 PHP5.6以下的版本。&lt;br&gt;对5.6来说，直接加@是木有用的啦。&lt;/p&gt;
&lt;p&gt;解决办法有两个：一种是兼容；二是使用新的方法。&lt;/p&gt;
&lt;p&gt;1 . 兼容方法：&lt;br&gt;主要用到 CURL 的一个配置参数 CURLOPT_SAFE_UPLOAD&lt;br&gt;CURLOPT_SAFE_UPLOAD 在 PHP5.5中默认值是 false&lt;br&gt;而在 PHP5.6中已经默认为 true 了。&lt;br&gt;所以只需要增加一行强制设置为 false 就行，如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：该参数的设置顺序，必须在设置 CURLOPT_POSTFIELDS 参数之前才有效哦！！！&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$url = &amp;apos;http://127.0.0.1/test3.php&amp;apos;;
$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. $file);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_SAFE_UPLOAD, false);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
$content = curl_exec($curl);
curl_close($curl);
print_r($content);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2 . 新的图片上传方法：&lt;br&gt;使用 CURLFile 类来处理文件，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$url = &amp;apos;http://127.0.0.1/test3.php&amp;apos;;
$file = __DIR__ .&amp;apos;/0634134726bc5b8b.jpg&amp;apos;;
$data = array(&amp;apos;mypic&amp;apos;=&amp;gt;new CURLFile($file));
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
$content = curl_exec($curl);
curl_close($curl);
print_r($content);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我这里只是最简单的应用，具体可参考下面官方文档：&lt;br&gt;&lt;a href=&quot;http://php.net/manual/en/class.curlfile.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://php.net/manual/en/class.curlfile.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这下终于上传成功了。。。太坑爹了，一天时间又被折腾完了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天本来想试试一个图片云的API，于是本地做了个上传图片的测试，结果灰常郁闷的发现以前一直用的好好的CURL上传图片居然死活不起作用，本来几分钟搞定的事情，结果折腾了大半天才终于找到原因，居然是兼容性问题，真是无语。。&lt;/p&gt;
&lt;p&gt;网上搜索PHP通过CURL上传图片几乎都
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>iOS 支持通用链接UniversalLinks</title>
    <link href="http://isunman.com/2019/12/28/ios-support-universal-links/"/>
    <id>http://isunman.com/2019/12/28/ios-support-universal-links/</id>
    <published>2019-12-28T09:04:26.642Z</published>
    <updated>2019-12-28T09:04:26.585Z</updated>
    
    <content type="html">&lt;p&gt;iOS 支持通用链接UniversalLinks&lt;/p&gt;
&lt;p&gt;关于iOS中的Universal Links（通用链接）分三部分讲解一下。&lt;br&gt;这个功能是从 iOS 9 之后开始支持的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一部分：一篇文章《iOS微信里打开app，Universal-Links》&quot;&gt;&lt;a href=&quot;#第一部分：一篇文章《iOS微信里打开app，Universal-Links》&quot; class=&quot;headerlink&quot; title=&quot;第一部分：一篇文章《iOS微信里打开app，Universal Links》&quot;&gt;&lt;/a&gt;第一部分：一篇文章《iOS微信里打开app，Universal Links》&lt;/h3&gt;&lt;p&gt;从第三方应用或者浏览器打开自己app的东西&lt;/p&gt;
&lt;p&gt;传统的方式是通过URL Scheme的方式，但是iOS9以后又出了新的更完美的方式Universal Links。&lt;/p&gt;
&lt;p&gt;传统的URL Scheme方式微信内置的浏览器都是封锁了所有它投资的公司之外的，只有白名单的才可以（比如京东，B站，等）。Universal Links也不能算是完美的实现，但是已经是目前为止最好的了。&lt;/p&gt;
&lt;p&gt;就说一下这个东西的介绍，就像在windows里面为某一类型的文件添加了默认的打开方式。只不过这个文件类型变成了某一个“域名”（并非完全是某个域名，或者可以称之为某段有特殊意义的URL）的URL。这个东西只能在iOS9以后才有。&lt;/p&gt;
&lt;p&gt;具体的表现在在iOS系统中，当你邮件或者短信或者其他方式收到含有某段“特定标示”的URL的时候如果安装有你的app，就可以直接默认调用app去打开，否则只能调用你的Safari去打开。具体到微信里面就是打开了分享的H5，右上角更多－在Safari中打开，可以直接调用你的app去打开这个URL。具体在app的中怎么展示相关的逻辑就看你的了。&lt;/p&gt;
&lt;h4 id=&quot;具体介绍的相关文章：&quot;&gt;&lt;a href=&quot;#具体介绍的相关文章：&quot; class=&quot;headerlink&quot; title=&quot;具体介绍的相关文章：&quot;&gt;&lt;/a&gt;具体介绍的相关文章：&lt;/h4&gt;&lt;p&gt;苹果文档：&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;苹果检测链接有效性：&lt;br&gt;&lt;a href=&quot;https://search.developer.apple.com/appsearch-validation-tool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://search.developer.apple.com/appsearch-validation-tool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很棒的一个英文的步骤文章：&lt;br&gt;&lt;a href=&quot;https://blog.branch.io/how-to-setup-universal-links-to-deep-link-on-apple-ios-9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.branch.io/how-to-setup-universal-links-to-deep-link-on-apple-ios-9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关的文章：&lt;a href=&quot;http://www.jackivers.me/blog/2015/9/17/list-of-universal-link-ios-9-apps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jackivers.me/blog/2015/9/17/list-of-universal-link-ios-9-apps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.glowing.com/cn/deferred-deep-linking-and-branch-sdk-in-ios/（URL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tech.glowing.com/cn/deferred-deep-linking-and-branch-sdk-in-ios/（URL&lt;/a&gt; Scheme和Universal Links优缺点介绍的很棒，这个团队的技术博客也很不错哦）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20150911/13321.html（里面的那个运行流程的总结图很不错）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/ios/20150911/13321.html（里面的那个运行流程的总结图很不错）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体的步骤就不再赘述了，因为无论是官方文档，还是其他人写的文章都很棒了，我就说一下实际开发中可能遇到的的坑。&lt;/p&gt;
&lt;p&gt;1.注意拼写那个json文件的时候，应该是你的开发者中心，Identifiers—App IDs— 应用的证书名字（bundle id所有对应的那个）—Prefix&lt;br&gt;.英文的点号，再跟上你的bundle id。并且文件的名字必须为“apple-app-site-association”，不能自己私自定义。用浏览器打开https://&lt;domain&gt;/apple-app-site-association文件，看一下成功否就可以了。&lt;/domain&gt;&lt;/p&gt;
&lt;p&gt;2.生成后的json文件一定是要放到你的那些网页所在的站点的目录下面的HTTPS web server根目录下面。比如你的网站是&lt;a href=&quot;https://www.google.com（所有的网页都是以这个开头的），然后你应用的地址baseurl是https://api.google.com，其实你应该放在www的那个HTTPS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.google.com（所有的网页都是以这个开头的），然后你应用的地址baseurl是https://api.google.com，其实你应该放在www的那个HTTPS&lt;/a&gt; web server根目录下面。然后过两三分钟吧，就用苹果有效性检测工具的那个去试一下，找一个你要分享出去的h5链接试一下，只要不出错，出来很多的相关信息就可以了（就跟用这个URL测试出来的结果一样就可以了&lt;a href=&quot;https://www.yelp.com/biz/michael-winnetka）。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.yelp.com/biz/michael-winnetka）。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.在工程的设置Associated Domains的时候，一定先要去苹果的开发者中心打开你的应用证书Associated Domains Enabled。然后记得更新你的证书关联的东西，然后更新本地的证书。才可以打开工程的Associated Domains。记住填写链接的时候是applinks:&lt;domain&gt;。这个&lt;domain&gt;就是第1点中调试通的那个（如果你的应用的api的和页面的不区分服务器就一样了）。&lt;/domain&gt;&lt;/domain&gt;&lt;/p&gt;
&lt;p&gt;4.然后编译你的应用。如果你在短信中含有类似的https://&lt;domain&gt;?a=1&amp;amp;b=2 已经通过了后，直接长按会出来“在“XXX”中打开”就说明成功了。可以去微信微博等其他的地方去看看了。&lt;/domain&gt;&lt;/p&gt;
&lt;p&gt;这一段内容来源链接（版权归属原作者）：&lt;a href=&quot;https://www.cnblogs.com/ysk-china/p/5777299.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/ysk-china/p/5777299.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第二部分：一篇文章《iOS-9-通用链接（Universal-Links）》&quot;&gt;&lt;a href=&quot;#第二部分：一篇文章《iOS-9-通用链接（Universal-Links）》&quot; class=&quot;headerlink&quot; title=&quot;第二部分：一篇文章《iOS 9 通用链接（Universal Links）》&quot;&gt;&lt;/a&gt;第二部分：一篇文章《iOS 9 通用链接（Universal Links）》&lt;/h3&gt;&lt;p&gt;1.apple-app-site-association文件不能带后缀，务必把”.json”的后缀去掉！有些人的电脑是隐藏文件后缀的，这要格外注意；&lt;/p&gt;
&lt;p&gt;2.apple-app-site-association一定要传到域名根目录下；&lt;/p&gt;
&lt;p&gt;3.WebServer需要支持https，且https使用有效的证书（是私密链接）。笔者在这里卡了很久，原因就是后台给配的https使用无效的证书，导致应用安装的时候不能正确的下载apple-app-site-association文件；&lt;/p&gt;
&lt;p&gt;4.如果想测试这个功能，可以让后台搭一个测试服务器，并配置虚拟主机生成域名，然后iOS这边通过host访问域名就可以了。注意”applink:”后面写的一定是域名，不能是IP；&lt;/p&gt;
&lt;p&gt;5.抓包的结果显示，网络顺畅的情况下，应用会在在刚安装（不是打开）的时候会去applink中的地址下载apple-app-site-association文件，所以如果需要测试，请保证网络通畅；&lt;/p&gt;
&lt;p&gt;6.当所有都准备好，需要测试该功能的时候，只需要在记事本或短信中输入App能识别的链接，然后直接点击或是长按就可以了，直接点的效果是跳转到你的App，然后右上角是“去网页”的箭头，长按的效果是弹出的菜单中第二项是“在’XXX’中打开”，这也代表着成功。直接在Safari中输入链接是无效的，必须从一处跳入才可以（比如上一级网页）。&lt;/p&gt;
&lt;p&gt;7.苹果有个网址（这里）可以检测你的apple-app-site-association是否是有效的，准备好了可以测试一下。&lt;/p&gt;
&lt;p&gt;8.测试的时候，建议使用dev证书打包，之后安装到手机上测试功能。未安装应用的情况下直接在手机上跑好像也是可以的，因为抓到过请求。&lt;/p&gt;
&lt;p&gt;9.如果你有问题，但上面没有列出，Stackoverflow上面有个问题，可以看下其他人的建议。&lt;/p&gt;
&lt;h4 id=&quot;继续之前的补充几点&quot;&gt;&lt;a href=&quot;#继续之前的补充几点&quot; class=&quot;headerlink&quot; title=&quot;继续之前的补充几点&quot;&gt;&lt;/a&gt;继续之前的补充几点&lt;/h4&gt;&lt;p&gt;1.如果需要支持此功能，需要在开发者中心做配置。具体是这样：开发者中心-&amp;gt;Identitiers-&amp;gt;App IDs-&amp;gt;需要支持的应用App ID，在Application Services列表里有Associated Domains一条，把它变为Enabled就可以了。&lt;/p&gt;
&lt;p&gt;2.当你在项目targets-&amp;gt;Capabilities-&amp;gt;Associated Domains中配置app link之后，系统会自动帮你写入.entitlements文件，所以不需要自己去手动加。需要注意的是，有人遇到过.entitlements文件没有被加入工程的，这也会产生问题，需要手动把.entitlements加入工程。&lt;/p&gt;
&lt;p&gt;3.apple-app-site-association文件里有个paths字段，这个是用来控制可识别链接的，星号的写法代表了可识别域名下所有链接。这篇博客里有很多其他公司的例子，可以参考一下。&lt;/p&gt;
&lt;p&gt;这一段内容来源链接（版权归属原作者）：&lt;a href=&quot;https://www.jianshu.com/p/c2ca5b5f391f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/c2ca5b5f391f&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第三部分-关于apple-app-site-association文件自己遇到的坑&quot;&gt;&lt;a href=&quot;#第三部分-关于apple-app-site-association文件自己遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;第三部分 关于apple-app-site-association文件自己遇到的坑&quot;&gt;&lt;/a&gt;第三部分 关于apple-app-site-association文件自己遇到的坑&lt;/h3&gt;&lt;p&gt;Configure your website to host the apple-app-site-association file&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Buy a domain name or pick from your existing.&lt;/li&gt;
&lt;li&gt;Acquire SSL certification for the domain name.&lt;/li&gt;
&lt;li&gt;Create structured apple-app-site-association JSON file.&lt;/li&gt;
&lt;li&gt;Sign the JSON file with the SSL certification.&lt;/li&gt;
&lt;li&gt;Configure the file server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面是一篇英文文章说明这个文件的配置过程，很准确。&lt;/p&gt;
&lt;p&gt;但是，实际配置过程总遇到的问题有以下几点：&lt;/p&gt;
&lt;p&gt;1、此文件在浏览器中访问时，默认是下载而不是打开显示文件内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：在服务器对应项目的配置文件中增加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location ~ apple-app-site-association$ {
    add_header  Content-Type &amp;apos;text/plain&amp;apos;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、上述方法解决了浏览器直接显示文件内容的问题，但是并不是返回的json格式数据，但是使用苹果的URL检测工具不通过，显示469错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：在服务器对应项目的配置文件中增加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location ~ apple-app-site-association$ {
    default_type application/json;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、上述方法同时解决了显示文件内容和返回json格式的问题，也按上面的方案修改了，但是使用苹果的URL检测工具仍然不通过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：注意苹果官网检测工具的一句话“Applebot will crawl your webpage”，需要服务器允许苹果爬的访问权限（默认是禁止所有爬虫的）。在修改允许苹果爬虫Applebot之后，经检测工具检测，apple-app-site-association文件已有效可用。&lt;/p&gt;
&lt;p&gt;另外2个问题说明：&lt;/p&gt;
&lt;p&gt;1、配置过程中需要多次重启nginx服务器，并且清除浏览器缓存。&lt;/p&gt;
&lt;p&gt;2、apple-app-site-association文件的内容是由iOS开发工程师配置好的，此处只涉及服务器上传此文件，并支持检测工具检测到可用状态。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 支持通用链接UniversalLinks&lt;/p&gt;
&lt;p&gt;关于iOS中的Universal Links（通用链接）分三部分讲解一下。&lt;br&gt;这个功能是从 iOS 9 之后开始支持的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一部分：一篇文章《iOS微信里打开app，Uni
    
    </summary>
    
      <category term="服务器" scheme="http://isunman.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
      <category term="lnmp" scheme="http://isunman.com/tags/lnmp/"/>
    
      <category term="爬虫" scheme="http://isunman.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>你所不知道的 AI 进展</title>
    <link href="http://isunman.com/2019/10/29/AI-progress-you-do-not-know/"/>
    <id>http://isunman.com/2019/10/29/AI-progress-you-do-not-know/</id>
    <published>2019-10-29T04:41:38.591Z</published>
    <updated>2019-10-29T04:41:38.531Z</updated>
    
    <content type="html">&lt;p&gt;人工智能现在是常见词汇，大多数人可能觉得，它是学术话题，跟普通人关系不大。&lt;br&gt;但是实际上，AI 突飞猛进，正在脱离实验室，进入日常生活。仅仅是现在的技术水平，就足以模糊现实与虚拟的界限，颠覆一般民众的认知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102801.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图1：2018年10月，世界第一幅 AI 生成的肖像画，&lt;a href=&quot;https://www.christies.com/features/A-collaboration-between-two-artists-one-human-one-a-machine-9332-1.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;拍卖&lt;/a&gt;成交价43.25万美元。）&lt;/p&gt;
&lt;p&gt;为了让普通人了解 AI 的进展，谷歌的机器学习专家格里高利·萨普诺夫（Grigory Sapunov）写了一篇通俗的&lt;a href=&quot;https://blog.inten.to/welcome-to-the-simulation-dd0d8cb6534d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;科普文章&lt;/a&gt;，介绍目前的技术成果。这盘文章非常精彩，有大量的图片，加上一些简单的解释，信息量很大，对于了解技术动态很有帮助。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102802.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图2：谷歌的机器学习专家格里高利·萨普诺夫）&lt;br&gt;下面就是那篇文章的翻译，比较长，图片很多，但是值得耐心读完。我保证，有些内容一定会让你感到吃惊。&lt;/p&gt;
&lt;h2 id=&quot;一、图像处理&quot;&gt;&lt;a href=&quot;#一、图像处理&quot; class=&quot;headerlink&quot; title=&quot;一、图像处理&quot;&gt;&lt;/a&gt;一、图像处理&lt;/h2&gt;&lt;p&gt;人工智能最早是从图像处理开始的。图像处理是一种常见任务，智能要求比较高，需要使用 PhotoShop 之类的软件人工编辑，一般的算法解决不了。&lt;/p&gt;
&lt;h3 id=&quot;1-1-对象补全&quot;&gt;&lt;a href=&quot;#1-1-对象补全&quot; class=&quot;headerlink&quot; title=&quot;1.1 对象补全&quot;&gt;&lt;/a&gt;1.1 对象补全&lt;/h3&gt;&lt;p&gt;2017年，日本科学家提出了一种&lt;a href=&quot;https://web.archive.org/web/20191016060740/http://iizuka.cs.tsukuba.ac.jp/projects/completion/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图像的对象补全模型&lt;/a&gt;。经过训练，模型可以补全图片上缺失的部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102803.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图3：图像的对象补全模型）&lt;br&gt;上图中，左边是原始图片，然后把中间的花盆涂掉，输入模型。模型会自动补全缺失的部分（右图），由于它不知道，那里有一个花盆，所以只会根据没有涂掉的部分，补上地板和扶手。&lt;br&gt;下面是更多这样的例子。涂掉的部分，模型都会补上，哪怕它根本不知道，那里原来是什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102804.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图4：图像的对象补全示例）&lt;br&gt;Nvidia 公司将这个模型做成了产品，放在网上。你可以到&lt;a href=&quot;https://www.nvidia.com/research/inpainting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;它的网站&lt;/a&gt;，上传一张图片，然后涂掉一些部分，让网站替你补全。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102805.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图5：涂掉沙发旁边的茶几）&lt;br&gt;有的&lt;a href=&quot;https://www.slashgear.com/adobes-entry-level-photoshop-elements-gets-new-ai-powered-tools-04594215/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图像软件&lt;/a&gt;已经应用这项技术，去除人像脸上的斑点。&lt;/p&gt;
&lt;h3 id=&quot;1-2-背景处理&quot;&gt;&lt;a href=&quot;#1-2-背景处理&quot; class=&quot;headerlink&quot; title=&quot;1.2 背景处理&quot;&gt;&lt;/a&gt;1.2 背景处理&lt;/h3&gt;&lt;p&gt;背景处理指的是，将前景物体从图片分离出来，再对背景进行加工。目前，已经有&lt;a href=&quot;https://towardsdatascience.com/background-removal-with-deep-learning-c4f2104b3157&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;很好的智能算法&lt;/a&gt;可以去除图片背景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102806.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图6：图片的背景去除）&lt;br&gt;在模型内部，图片会转成像素的色块。下图的浅紫色块就是前景物体，然后再把这些像素提取出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102807.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图7：背景去除模型）&lt;br&gt;这个模型也已经做成了&lt;a href=&quot;https://www.remove.bg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线上服务&lt;/a&gt;，大家可以上传图片感受一下它的效果。&lt;br&gt;既然可以去除背景，那当然就可以&lt;a href=&quot;https://arxiv.org/abs/1703.03872&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更改背景&lt;/a&gt;，为图片合成打开方便之门。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102808.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图8：更改图片背景）&lt;/p&gt;
&lt;h3 id=&quot;1-3-样式转换&quot;&gt;&lt;a href=&quot;#1-3-样式转换&quot; class=&quot;headerlink&quot; title=&quot;1.3 样式转换&quot;&gt;&lt;/a&gt;1.3 样式转换&lt;/h3&gt;&lt;p&gt;人工智能还能够&lt;a href=&quot;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;识别&lt;/a&gt;图片的风格样式（即像素的变化规律），将其套用在另一张图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102809.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图9：原始图片）&lt;br&gt;上图是两张原始图片，第一张是梵高的名画《星夜》，第二张是普通的风景照。模型可以提取第一张图片的风格，将其套用在第二张图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102810.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图10：套用梵高的《星夜》风格）&lt;br&gt;其他名画的风格，同样可以套用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102812.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102813.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图11：图像的风格转换）&lt;/p&gt;
&lt;h3 id=&quot;1-4-图像着色&quot;&gt;&lt;a href=&quot;#1-4-图像着色&quot; class=&quot;headerlink&quot; title=&quot;1.4 图像着色&quot;&gt;&lt;/a&gt;1.4 图像着色&lt;/h3&gt;&lt;p&gt;一旦识别出图片中的物体，模型就可以统计不同物体的像素颜色规律，然后就能推断黑白照片可能的颜色，从而实现&lt;a href=&quot;https://arxiv.org/abs/1603.06668&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;照片着色&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102814.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图12：黑白照片的着色）&lt;br&gt;网上也有免费的&lt;a href=&quot;https://colorize.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;着色服务&lt;/a&gt;，大家可以体验。&lt;/p&gt;
&lt;h2 id=&quot;二、GAN-方法&quot;&gt;&lt;a href=&quot;#二、GAN-方法&quot; class=&quot;headerlink&quot; title=&quot;二、GAN 方法&quot;&gt;&lt;/a&gt;二、GAN 方法&lt;/h2&gt;&lt;h3 id=&quot;2-1-简介&quot;&gt;&lt;a href=&quot;#2-1-简介&quot; class=&quot;headerlink&quot; title=&quot;2.1 简介&quot;&gt;&lt;/a&gt;2.1 简介&lt;/h3&gt;&lt;p&gt;GAN 是”生成对抗网络”（Generative Adversarial Networks）的缩写，它是一种革命性的提升人工智能模型效果、生成虚拟图像的方法。&lt;br&gt;原理很简单，就是两个神经网络互相对抗。一个神经网络负责生成虚拟图像，另一个神经网络负责鉴定假图像。理论上，如果 GAN 训练成功，那么生成的假图像与真图像将无法区分。2014年，这种方法提出以后，快速发展，目前效果已经可以乱真。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102815.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图13：GAN 的改进速度）&lt;br&gt;上图是过去几年，GAN 生成的虚拟人像。可以发现，每过一年，图片越来越大，细节越来越丰富，越发接近真实人像。它的工作方法也是如此，第一步生成一张低分辨率图片，然后慢慢放大，依次修改每一个像素，确定该像素怎样才能最大概率通过鉴定器。&lt;br&gt;GAN 不仅能生成虚拟图像，还能生成音频、文本，甚至是化合物分子。AI 模型可能创造出来的任何东西，都能使用 GAN 提升效果。GitHub 有一个&lt;a href=&quot;https://github.com/hindupuravinash/the-gan-zoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;仓库&lt;/a&gt;，专门收集不同用途的 GAN，目前已经有500多种模型。&lt;/p&gt;
&lt;h3 id=&quot;2-2-StyleGAN&quot;&gt;&lt;a href=&quot;#2-2-StyleGAN&quot; class=&quot;headerlink&quot; title=&quot;2.2 StyleGAN&quot;&gt;&lt;/a&gt;2.2 StyleGAN&lt;/h3&gt;&lt;p&gt;目前，生成虚拟人像效果最好的模型是 Nvidia 公司的 &lt;a href=&quot;https://arxiv.org/abs/1812.04948&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StyleGAN&lt;/a&gt;。下面两张头像，你能分辨哪张是虚拟的，哪张是真实的吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102816.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图14：GAN 虚拟人像）&lt;br&gt;这是网站截图，你可以去&lt;a href=&quot;http://www.whichfaceisreal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;那个网站&lt;/a&gt;试试看，能猜对多少张。需要提醒的是，这是2018年底的模型产物，随着模型进化，迟早将无法分辨真假。&lt;br&gt;GAN 不仅能生成人像，实际上可以生成任何图像。下面是 &lt;a href=&quot;https://arxiv.org/abs/1809.11096&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BigGAN&lt;/a&gt; 模型生成的各种图像，图片里的东西都是不存在的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102817.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图15：BigGAN 模型生成的虚拟图像）&lt;/p&gt;
&lt;h3 id=&quot;2-3-图像翻译&quot;&gt;&lt;a href=&quot;#2-3-图像翻译&quot; class=&quot;headerlink&quot; title=&quot;2.3 图像翻译&quot;&gt;&lt;/a&gt;2.3 图像翻译&lt;/h3&gt;&lt;p&gt;一种图像通过 GAN 转变为另一种图像，称为图像翻译。空拍照片变成地图、黑白照片变成彩色照片，都是图像翻译的例子。&lt;br&gt;&lt;a href=&quot;https://github.com/phillipi/pix2pix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pix2pix&lt;/a&gt; 是图像翻译的开源工具，它可以让黑夜变成白天，示意图变成实物图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102818.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图16：图像翻译）&lt;br&gt;也可以让春天变成夏天，晴天变成雨天。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102819.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图17：图像翻译）&lt;br&gt;图像翻译的难点在于，它需要有成对的示例（源图像和相应的目标图像），告诉模型应该怎么翻译，这些示例可能很难创建。但是反过来，只要有配对的示例，就可以翻译图像，不管这种翻译是否合理。下面是两只小猫翻译成对应的豹子、狮子和老虎。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102820.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图18：图像翻译）&lt;br&gt;&lt;a href=&quot;https://github.com/junyanz/CycleGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CycleGAN&lt;/a&gt; 模型还支持跨域翻译，将照片翻译成油画，斑马翻译成马。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102821.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图19：图像翻译）&lt;br&gt;Nvidia 开发了一个 &lt;a href=&quot;http://nvidia-research-mingyuliu.com/gaugan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GauGAN&lt;/a&gt; 软件，可以在线试玩。用户只需手绘一个示意图，软件就能生成一张对应的风景照片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102829.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图20：GauGAN 将示意图变成照片）&lt;/p&gt;
&lt;h3 id=&quot;2-4-人像翻译&quot;&gt;&lt;a href=&quot;#2-4-人像翻译&quot; class=&quot;headerlink&quot; title=&quot;2.4 人像翻译&quot;&gt;&lt;/a&gt;2.4 人像翻译&lt;/h3&gt;&lt;p&gt;图像翻译用于人像，就是人像翻译。&lt;a href=&quot;https://github.com/yunjey/StarGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StarGAN&lt;/a&gt; 模型可以翻译面部属性，比如头发的颜色、性别、肤色等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102824.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图21：脸部属性的改变）&lt;br&gt;还可以把其他人的表情移植到你的脸上，下图分别是愤怒、快乐、恐惧的表情翻译。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102825.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图22：表情的改变）&lt;br&gt;&lt;a href=&quot;https://github.com/run-youngjoo/SC-FEGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SC-FEGAN&lt;/a&gt; 是人像翻译的开源软件，可以让你编辑人像，比如加上刘海，去除墨镜等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102826.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102827.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图23：人像编辑软件 SC_FEGAN）&lt;/p&gt;
&lt;h3 id=&quot;2-5-文本到图像生成&quot;&gt;&lt;a href=&quot;#2-5-文本到图像生成&quot; class=&quot;headerlink&quot; title=&quot;2.5 文本到图像生成&quot;&gt;&lt;/a&gt;2.5 文本到图像生成&lt;/h3&gt;&lt;p&gt;GAN 最惊人的成果之一，大概就是&lt;a href=&quot;https://arxiv.org/abs/1711.10485&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;根据文本生成图像&lt;/a&gt;。用户提供一个句子，软件生成对应的图像。原始文本”一只红中透白、长着非常短的尖嘴的鸟”，可以得到下面的图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102830.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图24：根据文本生成图像）&lt;br&gt;论文甚至提到，将来存在可能，根据剧本直接生成一部电影。&lt;/p&gt;
&lt;h2 id=&quot;三、视频生成&quot;&gt;&lt;a href=&quot;#三、视频生成&quot; class=&quot;headerlink&quot; title=&quot;三、视频生成&quot;&gt;&lt;/a&gt;三、视频生成&lt;/h2&gt;&lt;p&gt;图像处理逐渐成熟以后，人工智能业界的关注重点就转向了视频。&lt;br&gt;从一个视频生成另一个视频，这就叫视频翻译。目前比较成熟的两个方向是运动传递和面部交换。&lt;/p&gt;
&lt;h3 id=&quot;3-1-运动传递&quot;&gt;&lt;a href=&quot;#3-1-运动传递&quot; class=&quot;headerlink&quot; title=&quot;3.1 运动传递&quot;&gt;&lt;/a&gt;3.1 运动传递&lt;/h3&gt;&lt;p&gt;运动传递指的是，将一个人的动作（包括身体、眼睛或嘴唇的动作）翻译到另一个人身上，使得另一个人出现一模一样的动作。&lt;br&gt;2018的论文&lt;a href=&quot;https://carolineec.github.io/everybody_dance_now/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Everybody Dance Now》&lt;/a&gt;，给出了一个模型，可以将舞者的动作移植到任何人身上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102831.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图25：动作传递）&lt;br&gt;上图中，蓝衣女子的跳舞视频完全是假的，是将左上角舞者的动作套用在她身上，自动生成的。&lt;br&gt;NVIDIA 公司的开源软件 &lt;a href=&quot;https://github.com/NVIDIA/vid2vid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vid2vid&lt;/a&gt; 更为强大，可以生成高分辨率的、连贯的逼真视频。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102832.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图26：vidvid 软件）&lt;/p&gt;
&lt;h3 id=&quot;3-2-脸部生成&quot;&gt;&lt;a href=&quot;#3-2-脸部生成&quot; class=&quot;headerlink&quot; title=&quot;3.2 脸部生成&quot;&gt;&lt;/a&gt;3.2 脸部生成&lt;/h3&gt;&lt;p&gt;脸部生成指的是，根据一张脸的表情和动作，重建另一张脸。最著名的例子是虚拟的&lt;a href=&quot;http://grail.cs.washington.edu/projects/AudioToObama/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;奥巴马演讲&lt;/a&gt;。2017年，华盛顿大学的团队发表了一段奥巴马的演讲视频。奥巴马其实从未做过这个演讲，是将别人的表情和口型套在他脸上生成的，语音也是合成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102833.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图27：虚拟的奥巴马演讲）&lt;br&gt;这种伪造的视频被称为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Deepfake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deepfake&lt;/a&gt;（深度伪造），具有很大的欺骗性，许多在线平台都禁止上传这一类视频。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102834.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图28：伪造的特朗普演讲，将喜剧演员的表演变成特朗普自己在讲。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102837.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图29：深度伪造的普京）&lt;br&gt;2018年出现的&lt;a href=&quot;https://web.stanford.edu/~zollhoef/papers/SG2018_DeepVideo/page.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《深度视频肖像》&lt;/a&gt;更进了一步，生成的视频不局限于虚拟的面部表情，还会头部旋转、眼睛凝视和眨眼，是 3D 的肖像重构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102835.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图29：深度视频肖像）&lt;br&gt;这些技术还在&lt;a href=&quot;https://www.theverge.com/2019/6/10/18659432/deepfake-ai-fakes-tech-edit-video-by-typing-new-words&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;继续发展&lt;/a&gt;，现在你可以给出任意文本，从任何你指定的对象嘴里说出来。甚至只凭一张照片，就可以生成一段表情变化的视频。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102836.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图30：一张照片生成各种表情）&lt;/p&gt;
&lt;h3 id=&quot;3-3-中国的实践&quot;&gt;&lt;a href=&quot;#3-3-中国的实践&quot; class=&quot;headerlink&quot; title=&quot;3.3 中国的实践&quot;&gt;&lt;/a&gt;3.3 中国的实践&lt;/h3&gt;&lt;p&gt;国内的人工智能视频生成，并不落后于国外。换脸应用 ZAO 只需用户上传一张照片，就能把影视剧主人公的脸换掉，好像你本人在表演电影一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102838.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图31：换脸应用 ZAO）&lt;br&gt;2018年，新华社与搜狗合作推出了虚拟新闻主播，具有真人的形象，带有声音、面部表情和动作，在电视上播报新闻，已经开通了英语、俄语、阿拉伯语的主持人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102839.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图32：虚拟新闻主播）&lt;/p&gt;
&lt;h3 id=&quot;3-4-视频渲染&quot;&gt;&lt;a href=&quot;#3-4-视频渲染&quot; class=&quot;headerlink&quot; title=&quot;3.4 视频渲染&quot;&gt;&lt;/a&gt;3.4 视频渲染&lt;/h3&gt;&lt;p&gt;除了视频生成，人工智能在视频渲染上也取得了很大进展。&lt;br&gt;Nvidia 公司2018年展示了实时光线追踪 RTX 技术。这项技术用人工智能预测光线的变化，从而不用耗费大量计算去追踪光线，因此可以实时渲染出高画质的 3D 动画。这对于视频游戏有重大意义。&lt;br&gt;下面是使用这项技术的 Unreal Engine 4，实时渲染出的一个女子的&lt;a href=&quot;https://venturebeat.com/2018/03/21/epic-games-shows-off-amazing-real-time-digital-human-with-siren-demo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3D 动画&lt;/a&gt;，可以一边计算生成，一边播放，完全没有延迟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102840.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201910/bg2019102841.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（图32：实时渲染的动画）&lt;br&gt;实时光线追踪技术还可以用于自动驾驶，在白天和黑夜的不同时间，不同的路面和环境下，预测出暴雨、风雪和强烈的眩光导致的光线变化，对驾驶做出调整。&lt;/p&gt;
&lt;h2 id=&quot;四、文本和声音处理&quot;&gt;&lt;a href=&quot;#四、文本和声音处理&quot; class=&quot;headerlink&quot; title=&quot;四、文本和声音处理&quot;&gt;&lt;/a&gt;四、文本和声音处理&lt;/h2&gt;&lt;p&gt;最后，简单提一下，人工智能在文本和声音处理领域的进展。&lt;/p&gt;
&lt;h4 id=&quot;（1）语音合成&quot;&gt;&lt;a href=&quot;#（1）语音合成&quot; class=&quot;headerlink&quot; title=&quot;（1）语音合成&quot;&gt;&lt;/a&gt;（1）语音合成&lt;/h4&gt;&lt;p&gt;谷歌在2018年推出了智能助手 Google Duplex，它会根据你的日程，自动打电话去餐厅订座位。谷歌 CEO 说，这个机器人的对话能力，使得对方完全没有发现这是机器人。&lt;/p&gt;
&lt;h4 id=&quot;（2）音乐合成&quot;&gt;&lt;a href=&quot;#（2）音乐合成&quot; class=&quot;headerlink&quot; title=&quot;（2）音乐合成&quot;&gt;&lt;/a&gt;（2）音乐合成&lt;/h4&gt;&lt;p&gt;OpenAI 基金会推出的 &lt;a href=&quot;https://openai.com/blog/musenet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MuseNet&lt;/a&gt;，通过学习数十万段 MIDI 音乐，能做到使用10种乐器，生成一段4分钟的音乐。它的官网有这些音乐的下载，相当动听。&lt;/p&gt;
&lt;h4 id=&quot;（3）自动评论&quot;&gt;&lt;a href=&quot;#（3）自动评论&quot; class=&quot;headerlink&quot; title=&quot;（3）自动评论&quot;&gt;&lt;/a&gt;（3）自动评论&lt;/h4&gt;&lt;p&gt;据报道，使用 Yelp 网站的数据进行训练的模型，可以自动生成餐厅评论。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 我喜欢这个地方，一直来这里已经好多年。它是与朋友和家人相聚的好地点，我喜欢这里的食物和服务，从未有过糟糕的经历。
- 我吃了烤蔬菜汉堡配薯条！哦，很好吃！
- 我和我的家人都是这个地方的忠实粉丝。工作人员超级好，食物也很棒。鸡肉很好，大蒜酱也很完美。配水果的冰淇淋也很美味。强烈推荐！
- 上面这些都是机器生成的评论。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;（4）智能邮件&quot;&gt;&lt;a href=&quot;#（4）智能邮件&quot; class=&quot;headerlink&quot; title=&quot;（4）智能邮件&quot;&gt;&lt;/a&gt;（4）智能邮件&lt;/h4&gt;&lt;p&gt;Gmail 会根据电子邮件的来信内容，自动生成&lt;a href=&quot;https://www.blog.google/products/gmail/save-time-with-smart-reply-in-gmail/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三种不同的回复&lt;/a&gt;，让用户选择。如果只是简单回应，用户不用自己动手写。&lt;br&gt;Gmail 的&lt;a href=&quot;https://ai.googleblog.com/2018/05/smart-compose-using-neural-networks-to.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;另一个功能&lt;/a&gt;是，根据用户已经写的内容，预测接下来会写的句子，供用户选择。&lt;/p&gt;
&lt;h2 id=&quot;五、小结&quot;&gt;&lt;a href=&quot;#五、小结&quot; class=&quot;headerlink&quot; title=&quot;五、小结&quot;&gt;&lt;/a&gt;五、小结&lt;/h2&gt;&lt;p&gt;毫无疑问，人工智能是很酷的技术，创造出了神奇的产品，有着难以想象的巨大应用前景。&lt;br&gt;但是，人工智能也是一把双刃剑，模糊了现实与虚拟之间的界限，把我们带上了一条不可预测的道路。作为个人，了解这些技术的进展和潜力，有助于保持一份清醒，享受技术之福的同时，避免它带来的一些副作用。&lt;br&gt;（正文完）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;p&gt;[1] 拍卖: &lt;a href=&quot;https://www.christies.com/features/A-collaboration-between-two-artists-one-human-one-a-machine-9332-1.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.christies.com/features/A-collaboration-between-two-artists-one-human-one-a-machine-9332-1.aspx&lt;/a&gt;&lt;br&gt;[2] 科普文章: &lt;a href=&quot;https://blog.inten.to/welcome-to-the-simulation-dd0d8cb6534d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.inten.to/welcome-to-the-simulation-dd0d8cb6534d&lt;/a&gt;&lt;br&gt;[3] 腾讯课堂: &lt;a href=&quot;https://ke.qq.com/?utm=ruanyifeng&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ke.qq.com/?utm=ruanyifeng&lt;/a&gt;&lt;br&gt;[4] “腾讯课堂101计划”: &lt;a href=&quot;https://edu.qq.com/a/20190119/005414.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://edu.qq.com/a/20190119/005414.htm&lt;/a&gt;&lt;br&gt;[5] 图像的对象补全模型: &lt;a href=&quot;https://web.archive.org/web/20191016060740/http://iizuka.cs.tsukuba.ac.jp/projects/completion/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://web.archive.org/web/20191016060740/http://iizuka.cs.tsukuba.ac.jp/projects/completion/en/&lt;/a&gt;&lt;br&gt;[6] 它的网站: &lt;a href=&quot;https://www.nvidia.com/research/inpainting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.nvidia.com/research/inpainting/&lt;/a&gt;&lt;br&gt;[7] 图像软件: &lt;a href=&quot;https://www.slashgear.com/adobes-entry-level-photoshop-elements-gets-new-ai-powered-tools-04594215/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.slashgear.com/adobes-entry-level-photoshop-elements-gets-new-ai-powered-tools-04594215/&lt;/a&gt;&lt;br&gt;[8] 很好的智能算法: &lt;a href=&quot;https://towardsdatascience.com/background-removal-with-deep-learning-c4f2104b3157&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://towardsdatascience.com/background-removal-with-deep-learning-c4f2104b3157&lt;/a&gt;&lt;br&gt;[9] 线上服务: &lt;a href=&quot;https://www.remove.bg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.remove.bg/&lt;/a&gt;&lt;br&gt;[10] 更改背景: &lt;a href=&quot;https://arxiv.org/abs/1703.03872&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1703.03872&lt;/a&gt;&lt;br&gt;[11] 识别: &lt;a href=&quot;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&lt;/a&gt;&lt;br&gt;[12] 照片着色: &lt;a href=&quot;https://arxiv.org/abs/1603.06668&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1603.06668&lt;/a&gt;&lt;br&gt;[13] 着色服务: &lt;a href=&quot;https://colorize.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://colorize.cc/&lt;/a&gt;&lt;br&gt;[14] 仓库: &lt;a href=&quot;https://github.com/hindupuravinash/the-gan-zoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hindupuravinash/the-gan-zoo&lt;/a&gt;&lt;br&gt;[15] StyleGAN: &lt;a href=&quot;https://arxiv.org/abs/1812.04948&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1812.04948&lt;/a&gt;&lt;br&gt;[16] 那个网站: &lt;a href=&quot;http://www.whichfaceisreal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.whichfaceisreal.com/&lt;/a&gt;&lt;br&gt;[17] BigGAN: &lt;a href=&quot;https://arxiv.org/abs/1809.11096&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1809.11096&lt;/a&gt;&lt;br&gt;[18] pix2pix: &lt;a href=&quot;https://github.com/phillipi/pix2pix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/phillipi/pix2pix&lt;/a&gt;&lt;br&gt;[19] CycleGAN: &lt;a href=&quot;https://github.com/junyanz/CycleGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/junyanz/CycleGAN&lt;/a&gt;&lt;br&gt;[20] GauGAN: &lt;a href=&quot;http://nvidia-research-mingyuliu.com/gaugan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nvidia-research-mingyuliu.com/gaugan&lt;/a&gt;&lt;br&gt;[21] StarGAN: &lt;a href=&quot;https://github.com/yunjey/StarGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yunjey/StarGAN&lt;/a&gt;&lt;br&gt;[22] SC-FEGAN: &lt;a href=&quot;https://github.com/run-youngjoo/SC-FEGAN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/run-youngjoo/SC-FEGAN&lt;/a&gt;&lt;br&gt;[23] 根据文本生成图像: &lt;a href=&quot;https://arxiv.org/abs/1711.10485&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/abs/1711.10485&lt;/a&gt;&lt;br&gt;[24] 《Everybody Dance Now》: &lt;a href=&quot;https://carolineec.github.io/everybody_dance_now/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://carolineec.github.io/everybody_dance_now/&lt;/a&gt;&lt;br&gt;[25] vid2vid: &lt;a href=&quot;https://github.com/NVIDIA/vid2vid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/NVIDIA/vid2vid&lt;/a&gt;&lt;br&gt;[26] 奥巴马演讲: &lt;a href=&quot;http://grail.cs.washington.edu/projects/AudioToObama/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://grail.cs.washington.edu/projects/AudioToObama/&lt;/a&gt;&lt;br&gt;[27] Deepfake: &lt;a href=&quot;https://en.wikipedia.org/wiki/Deepfake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Deepfake&lt;/a&gt;&lt;br&gt;[28] 《深度视频肖像》: &lt;a href=&quot;https://web.stanford.edu/~zollhoef/papers/SG2018_DeepVideo/page.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://web.stanford.edu/~zollhoef/papers/SG2018_DeepVideo/page.html&lt;/a&gt;&lt;br&gt;[29] 继续发展: &lt;a href=&quot;https://www.theverge.com/2019/6/10/18659432/deepfake-ai-fakes-tech-edit-video-by-typing-new-words&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.theverge.com/2019/6/10/18659432/deepfake-ai-fakes-tech-edit-video-by-typing-new-words&lt;/a&gt;&lt;br&gt;[30] 3D 动画: &lt;a href=&quot;https://venturebeat.com/2018/03/21/epic-games-shows-off-amazing-real-time-digital-human-with-siren-demo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://venturebeat.com/2018/03/21/epic-games-shows-off-amazing-real-time-digital-human-with-siren-demo/&lt;/a&gt;&lt;br&gt;[31] MuseNet: &lt;a href=&quot;https://openai.com/blog/musenet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://openai.com/blog/musenet/&lt;/a&gt;&lt;br&gt;[32] 自动生成: &lt;a href=&quot;https://www.theverge.com/2017/8/31/16232180/ai-fake-reviews-yelp-amazon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.theverge.com/2017/8/31/16232180/ai-fake-reviews-yelp-amazon&lt;/a&gt;&lt;br&gt;[33] 三种不同的回复: &lt;a href=&quot;https://www.blog.google/products/gmail/save-time-with-smart-reply-in-gmail/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blog.google/products/gmail/save-time-with-smart-reply-in-gmail/&lt;/a&gt;&lt;br&gt;[34] 另一个功能: &lt;a href=&quot;https://ai.googleblog.com/2018/05/smart-compose-using-neural-networks-to.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ai.googleblog.com/2018/05/smart-compose-using-neural-networks-to.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;严重声明：本文转载自阮一峰的博客，版权属于原作者所有。&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/10/artificial-intelligenence.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;人工智能现在是常见词汇，大多数人可能觉得，它是学术话题，跟普通人关系不大。&lt;br&gt;但是实际上，AI 突飞猛进，正在脱离实验室，进入日常生活。仅仅是现在的技术水平，就足以模糊现实与虚拟的界限，颠覆一般民众的认知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wa
    
    </summary>
    
      <category term="未来探索" scheme="http://isunman.com/categories/%E6%9C%AA%E6%9D%A5%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="AI" scheme="http://isunman.com/tags/ai/"/>
    
      <category term="思考" scheme="http://isunman.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>下载海外地区的AppStore中应用的方法</title>
    <link href="http://isunman.com/2019/10/11/download-the-application-method-in-the-AppStore-of-overseas-region/"/>
    <id>http://isunman.com/2019/10/11/download-the-application-method-in-the-AppStore-of-overseas-region/</id>
    <published>2019-10-11T08:05:57.603Z</published>
    <updated>2019-10-11T08:05:57.538Z</updated>
    
    <content type="html">&lt;p&gt;下载海外地区的AppStore中应用的方法&lt;/p&gt;
&lt;h3 id=&quot;1、官方应用直接下载&quot;&gt;&lt;a href=&quot;#1、官方应用直接下载&quot; class=&quot;headerlink&quot; title=&quot;1、官方应用直接下载&quot;&gt;&lt;/a&gt;1、官方应用直接下载&lt;/h3&gt;&lt;p&gt;如果是下载指定地区的AppStore中的应用，必须拥有此地区的AppID，然后使用此AppID登录AppStore即可随意下载免费应用。&lt;/p&gt;
&lt;p&gt;如果需要下载收费的应用，又没有开通对应的支付方式（例如对应国家地区的信用卡），可以去TB上购买一个Gifts Card充值到账户余额。然后再操作。&lt;/p&gt;
&lt;h3 id=&quot;2、一些共享AppID的平台&quot;&gt;&lt;a href=&quot;#2、一些共享AppID的平台&quot; class=&quot;headerlink&quot; title=&quot;2、一些共享AppID的平台&quot;&gt;&lt;/a&gt;2、一些共享AppID的平台&lt;/h3&gt;&lt;p&gt;有专门做这个的网站或者论坛帖子，前几年多些。&lt;/p&gt;
&lt;p&gt;还有公众号（例如：野泽科技、绝世废柴、DoMiSo），现在以公众号居多。&lt;/p&gt;
&lt;h3 id=&quot;3、第三方平台安装&quot;&gt;&lt;a href=&quot;#3、第三方平台安装&quot; class=&quot;headerlink&quot; title=&quot;3、第三方平台安装&quot;&gt;&lt;/a&gt;3、第三方平台安装&lt;/h3&gt;&lt;p&gt;使用爱思助手或PP助手直接连接电脑安装对应的应用。&lt;/p&gt;
&lt;h3 id=&quot;4、怎么获得一个美国区的AppID&quot;&gt;&lt;a href=&quot;#4、怎么获得一个美国区的AppID&quot; class=&quot;headerlink&quot; title=&quot;4、怎么获得一个美国区的AppID&quot;&gt;&lt;/a&gt;4、怎么获得一个美国区的AppID&lt;/h3&gt;&lt;p&gt;这个目前已经有很多方法，而且各种方法都在与时俱进地跟新。可以直接搜索“知乎”等，就有许多可行的方案。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下载海外地区的AppStore中应用的方法&lt;/p&gt;
&lt;h3 id=&quot;1、官方应用直接下载&quot;&gt;&lt;a href=&quot;#1、官方应用直接下载&quot; class=&quot;headerlink&quot; title=&quot;1、官方应用直接下载&quot;&gt;&lt;/a&gt;1、官方应用直接下载&lt;/h3&gt;&lt;p&gt;如果是下载指定地区
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
      <category term="科学上网" scheme="http://isunman.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>php中奖概率算法，可用于刮刮卡，大转盘等抽奖算法</title>
    <link href="http://isunman.com/2019/09/21/php-probability-of-winning-algorithm/"/>
    <id>http://isunman.com/2019/09/21/php-probability-of-winning-algorithm/</id>
    <published>2019-09-21T09:48:34.320Z</published>
    <updated>2019-09-21T09:48:34.260Z</updated>
    
    <content type="html">&lt;p&gt;php中奖概率算法，可用于刮刮卡，大转盘等抽奖算法。本人已测试，非常实用，也可以进一步变种。  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/*
 * 经典的概率算法，
 * $proArr是一个预先设置的数组，
 * 假设数组为：array(100,200,300，400)，
 * 开始是从1,1000 这个概率范围内筛选第一个数是否在他的出现概率范围之内， 
 * 如果不在，则将概率空间，也就是k的值减去刚刚的那个数字的概率空间，
 * 在本例当中就是减去100，也就是说第二个数是在1，900这个范围内筛选的。
 * 这样 筛选到最终，总会有一个数满足要求。
 * 就相当于去一个箱子里摸东西，
 * 第一个不是，第二个不是，第三个还不是，那最后一个一定是。
 * 这个算法简单，而且效率非常 高，
 * 关键是这个算法已在我们以前的项目中有应用，尤其是大数据量的项目中效率非常棒。
 */
function get_rand($proArr) { 
$result = &amp;apos;&amp;apos;;  
//概率数组的总概率精度 
$proSum = array_sum($proArr);  
//概率数组循环 
foreach ($proArr as $key =&amp;gt; $proCur) { 
$randNum = mt_rand(1, $proSum); 
if ($randNum &amp;lt;= $proCur) { 
$result = $key; 
break; 
} else { 
$proSum -= $proCur; 
}         
} 
unset ($proArr);  
return $result; 
} 


/*
 * 奖项数组
 * 是一个二维数组，记录了所有本次抽奖的奖项信息，
 * 其中id表示中奖等级，prize表示奖品，v表示中奖概率。
 * 注意其中的v必须为整数，你可以将对应的 奖项的v设置成0，即意味着该奖项抽中的几率是0，
 * 数组中v的总和（基数），基数越大越能体现概率的准确性。
 * 本例中v的总和为100，那么平板电脑对应的 中奖概率就是1%，
 * 如果v的总和是10000，那中奖概率就是万分之一了。
 * 
 */
$prize_arr = array( 
&amp;apos;0&amp;apos; =&amp;gt; array(&amp;apos;id&amp;apos;=&amp;gt;1,&amp;apos;prize&amp;apos;=&amp;gt;&amp;apos;平板电脑&amp;apos;,&amp;apos;v&amp;apos;=&amp;gt;1), 
&amp;apos;1&amp;apos; =&amp;gt; array(&amp;apos;id&amp;apos;=&amp;gt;2,&amp;apos;prize&amp;apos;=&amp;gt;&amp;apos;数码相机&amp;apos;,&amp;apos;v&amp;apos;=&amp;gt;5), 
&amp;apos;2&amp;apos; =&amp;gt; array(&amp;apos;id&amp;apos;=&amp;gt;3,&amp;apos;prize&amp;apos;=&amp;gt;&amp;apos;音箱设备&amp;apos;,&amp;apos;v&amp;apos;=&amp;gt;10), 
&amp;apos;3&amp;apos; =&amp;gt; array(&amp;apos;id&amp;apos;=&amp;gt;4,&amp;apos;prize&amp;apos;=&amp;gt;&amp;apos;4G优盘&amp;apos;,&amp;apos;v&amp;apos;=&amp;gt;12), 
&amp;apos;4&amp;apos; =&amp;gt; array(&amp;apos;id&amp;apos;=&amp;gt;5,&amp;apos;prize&amp;apos;=&amp;gt;&amp;apos;10Q币&amp;apos;,&amp;apos;v&amp;apos;=&amp;gt;22), 
&amp;apos;5&amp;apos; =&amp;gt; array(&amp;apos;id&amp;apos;=&amp;gt;6,&amp;apos;prize&amp;apos;=&amp;gt;&amp;apos;下次没准就能中哦&amp;apos;,&amp;apos;v&amp;apos;=&amp;gt;50), 
); 

/*
 * 每次前端页面的请求，PHP循环奖项设置数组，
 * 通过概率计算函数get_rand获取抽中的奖项id。
 * 将中奖奖品保存在数组$res[&amp;apos;yes&amp;apos;]中，
 * 而剩下的未中奖的信息保存在$res[&amp;apos;no&amp;apos;]中，
 * 最后输出json个数数据给前端页面。
 */
foreach ($prize_arr as $key =&amp;gt; $val) { 
$arr[$val[&amp;apos;id&amp;apos;]] = $val[&amp;apos;v&amp;apos;]; 
} 
$rid = get_rand($arr); //根据概率获取奖项id 

$res[&amp;apos;yes&amp;apos;] = $prize_arr[$rid-1][&amp;apos;prize&amp;apos;]; //中奖项 
unset($prize_arr[$rid-1]); //将中奖项从数组中剔除，剩下未中奖项 
shuffle($prize_arr); //打乱数组顺序 
for($i=0;$i&amp;lt;count($prize_arr);$i++){ 
$pr[] = $prize_arr[$i][&amp;apos;prize&amp;apos;]; 
} 
$res[&amp;apos;no&amp;apos;] = $pr; 
print_r($res); 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;php中奖概率算法，可用于刮刮卡，大转盘等抽奖算法。本人已测试，非常实用，也可以进一步变种。  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/*
 * 经典的概率算法，
 * $proArr是一个预先设置的数组，
 * 假设数组为：array(100,200,300，
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>身份证号码解释，附：18位公民身份证编码规则</title>
    <link href="http://isunman.com/2019/09/21/Explanation-of-id-number/"/>
    <id>http://isunman.com/2019/09/21/Explanation-of-id-number/</id>
    <published>2019-09-21T09:47:47.854Z</published>
    <updated>2019-09-21T09:47:47.772Z</updated>
    
    <content type="html">&lt;h2 id=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;a href=&quot;#身份证号码解释，附：18位公民身份证编码规则&quot; class=&quot;headerlink&quot; title=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;/a&gt;身份证号码解释，附：18位公民身份证编码规则&lt;/h2&gt;&lt;h3 id=&quot;身份证号码由18位数字组成，你知道它们代表的信息吗？&quot;&gt;&lt;a href=&quot;#身份证号码由18位数字组成，你知道它们代表的信息吗？&quot; class=&quot;headerlink&quot; title=&quot;身份证号码由18位数字组成，你知道它们代表的信息吗？&quot;&gt;&lt;/a&gt;身份证号码由18位数字组成，你知道它们代表的信息吗？&lt;/h3&gt;&lt;p&gt;其中的第一、第二数字表示公民所在地的省份（或自治区、直辖市）；第三、第四位数字表示公民所在地的市（或州）；第五、第六位数字表示公民所在地的县（或县级市）；接下来的8位数字表示公民的出生年、月、日；最后4位数字中的前两位表示当地派出所的编码；倒数第二位表示公民是男性还是女性（男性用单数，女性用双数）；最后一位数字是一个随机数，又称为校验码。&lt;/p&gt;
&lt;p&gt;大陆的身份证为18位，老的身份证是15位。&lt;/p&gt;
&lt;h3 id=&quot;关于身份证第18是怎么计算的，原理如下&quot;&gt;&lt;a href=&quot;#关于身份证第18是怎么计算的，原理如下&quot; class=&quot;headerlink&quot; title=&quot;关于身份证第18是怎么计算的，原理如下&quot;&gt;&lt;/a&gt;关于身份证第18是怎么计算的，原理如下&lt;/h3&gt;&lt;p&gt;根据〖中华人民共和国国家标准GB11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。&lt;/p&gt;
&lt;p&gt;地址码（身份证前六位）表示编码对象常住户口所在县(市、旗、区)的行政区划代码。（所有区域的编码可以到这个网址&lt;a href=&quot;http://xzqh.mca.gov.cn查询到最新的县及县以上的行政编码资料。）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xzqh.mca.gov.cn查询到最新的县及县以上的行政编码资料。）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;生日期码（身份证第七位到第十四位）表示编码对象出生的年、月、日，其中年份用四位数字表示，年、月、日之间不用分隔符。例如：1981年05月11日就用19810511表示。&lt;/p&gt;
&lt;p&gt;顺序码（身份证第十五位到十七位）为同一地址码所标识的区域范围内，对同年、月、日出生的人员编定的顺序号。其中第十七位奇数分给男性，偶数分给女性。&lt;/p&gt;
&lt;p&gt;校验码（身份证最后一位）是根据前面十七位数字码，按照ISO7064:1983.MOD11-2校验码计算出来的检验码。&lt;/p&gt;
&lt;h3 id=&quot;第十八位数字的计算方法&quot;&gt;&lt;a href=&quot;#第十八位数字的计算方法&quot; class=&quot;headerlink&quot; title=&quot;第十八位数字的计算方法&quot;&gt;&lt;/a&gt;第十八位数字的计算方法&lt;/h3&gt;&lt;p&gt;1.将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7910584216379105842&lt;/p&gt;
&lt;p&gt;2.将这17位数字和系数相乘的结果相加。&lt;/p&gt;
&lt;p&gt;3.用加出来和除以11，看余数是多少？&lt;/p&gt;
&lt;p&gt;4.余数只可能有012345678910这11个数字。其分别对应的最后一位身份证的号码为10X98765432。&lt;/p&gt;
&lt;p&gt;5.通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ。如果余数是10，身份证的最后一位号码就是2。&lt;/p&gt;
&lt;p&gt;例如：某男性的身份证号码是34052419800101001X。我们要看看这个身份证是不是合法的身份证。&lt;/p&gt;
&lt;p&gt;首先：我们得出，前17位的乘积和是189&lt;/p&gt;
&lt;p&gt;然后：用189除以11得出的结果是17+2/11，也就是说余数是2。&lt;/p&gt;
&lt;p&gt;最后：通过对应规则就可以知道余数2对应的数字是X。所以，这是一个合格的身份证号码。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;附：18位公民身份证编码规则&quot;&gt;&lt;a href=&quot;#附：18位公民身份证编码规则&quot; class=&quot;headerlink&quot; title=&quot;附：18位公民身份证编码规则&quot;&gt;&lt;/a&gt;附：18位公民身份证编码规则&lt;/h3&gt;&lt;p&gt;18位身份证标准在国家质量技术监督局于1999年7月1日实施的GB11643-1999《公民身份号码》中做了明确规定。GB11643-1999《公民身份号码》为GB11643-1989《社会保障号码》的修订版，其中指出将原标准名称“社会保障号码”更名为“公民身份号码”，另外GB11643-1999《公民身份号码》从实施之日起代替GB11643-1989。公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位校验码。其含义如下：&lt;/p&gt;
&lt;p&gt;1.地址码：表示编码对象常住户口所在县(市、旗、区)的行政区划代码，按GB/T2260的规定执行。&lt;/p&gt;
&lt;p&gt;2.出生日期码：表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日分别用4位、2位、2位数字表示，之间不用分隔符。&lt;/p&gt;
&lt;p&gt;3.顺序码：表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。&lt;/p&gt;
&lt;p&gt;校验的计算方式：&lt;/p&gt;
&lt;p&gt;1.对前17位数字本体码加权求和&lt;/p&gt;
&lt;p&gt;公式为：S=Sum(Ai*Wi),i=0,…,16&lt;/p&gt;
&lt;p&gt;其中Ai表示第i位置上的身份证号码数字值，Wi表示第i位置上的加权因子，其各位对应的值依次为：7910584216379105842&lt;/p&gt;
&lt;p&gt;2.以11对计算结果取模&lt;/p&gt;
&lt;p&gt;Y=mod(S,11)&lt;/p&gt;
&lt;p&gt;3.根据模的值得到对应的校验码&lt;/p&gt;
&lt;p&gt;对应关系为：&lt;/p&gt;
&lt;p&gt;Y值：012345678910&lt;/p&gt;
&lt;p&gt;校验码：10X98765432&lt;/p&gt;
&lt;h3 id=&quot;关于18位身份证号码尾数是“X”的解释&quot;&gt;&lt;a href=&quot;#关于18位身份证号码尾数是“X”的解释&quot; class=&quot;headerlink&quot; title=&quot;关于18位身份证号码尾数是“X”的解释&quot;&gt;&lt;/a&gt;关于18位身份证号码尾数是“X”的解释&lt;/h3&gt;&lt;p&gt;居民身份证的号码是按照国家的标准编制的，由18位组成：前六位为行政区划代码，第七至第十四位为出生日期码，第15至17位为顺序码，第18位为校验码。作为尾号的校验码，是由号码编制单位按统一的公式计算出来的，如果某人的尾号是0-9，都不会出现X，但如果尾号是10，那么就得用X来代替，因为如果用10做尾号，那么此人的身份证就变成了19位，而19位的号码违反了国家标准，并且我国的计算机应用系统也不承认19位的身份证号码。X是罗马数字的10，用X来代替10，可以保证公民的身份证符合国家标准。但是我国的居民身份证在升位后，一些人的尾号变成了X，这部分人在工作生活中，例如去银行存取钱、去汽车公司租赁汽车或者报名参加考试等等过程中，往往不被检验者理解，认为是假身份证，这样的误会给很多人的生活带来不便。公安局的同志希望领到X身份证的同志正确理解这个数字的含义，查验身份证的机关和单位更应该清楚这一点。&lt;/p&gt;
&lt;h3 id=&quot;一个简单身份证号尾号校验算法的PHP实现的过程&quot;&gt;&lt;a href=&quot;#一个简单身份证号尾号校验算法的PHP实现的过程&quot; class=&quot;headerlink&quot; title=&quot;一个简单身份证号尾号校验算法的PHP实现的过程&quot;&gt;&lt;/a&gt;一个简单身份证号尾号校验算法的PHP实现的过程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function checkId($id) {
    $len = strlen($id);
    if($len != 18) {
        return 0;
    }
    $a=str_split($id,1);
    $w=array(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2);
    $c=array(1,0,&amp;apos;X&amp;apos;,9,8,7,6,5,4,3,2);
    $sum = 0;
    for($i=0;$i&amp;lt;17;$i++){
        $sum= $sum + $a[$i]*$w[$i];
    }
    $r=$sum%11;
    $res=$c[$r];
    //echo &amp;quot;校验位是: &amp;quot;.$res;
    if ($res == $a[17]) {
        return 1;
    } else {
        return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;a href=&quot;#身份证号码解释，附：18位公民身份证编码规则&quot; class=&quot;headerlink&quot; title=&quot;身份证号码解释，附：18位公民身份证编码规则&quot;&gt;&lt;/a&gt;身份证号码解释，附：18位公民身份证编码
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>九酷音乐真实地址解析</title>
    <link href="http://isunman.com/2019/08/03/9-cool-music-real-address-resolution/"/>
    <id>http://isunman.com/2019/08/03/9-cool-music-real-address-resolution/</id>
    <published>2019-08-03T09:06:48.203Z</published>
    <updated>2019-08-03T09:06:09.485Z</updated>
    
    <content type="html">&lt;p&gt;九酷音乐的资源还是比较全的；九酷的历史也比较长，从2002年就有了。&lt;br&gt;许多其他音乐平台，例如QQ音乐、虾米音乐、网易云音乐上面没有的，这里也可以找到。&lt;/p&gt;
&lt;p&gt;缺点就是网页上广告太多，而且页面也不好看。目前也没有PC客户端，手机客户端iOS版一直不能用（数据加载失败，2年多未更新了）。&lt;/p&gt;
&lt;p&gt;九酷音乐官网：&lt;a href=&quot;http://www.9ku.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.9ku.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择一首歌曲，如 &lt;a href=&quot;http://m.9ku.com/play/86179.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://m.9ku.com/play/86179.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中，86179就是歌曲的id号&lt;/p&gt;
&lt;p&gt;真实地址为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp3.9ku.com/m4a/86179.m4a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mp3.9ku.com/m4a/86179.m4a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://111.161.71.11/mp3.9ku.com/m4a/86179.m4a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://111.161.71.11/mp3.9ku.com/m4a/86179.m4a&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;九酷音乐的资源还是比较全的；九酷的历史也比较长，从2002年就有了。&lt;br&gt;许多其他音乐平台，例如QQ音乐、虾米音乐、网易云音乐上面没有的，这里也可以找到。&lt;/p&gt;
&lt;p&gt;缺点就是网页上广告太多，而且页面也不好看。目前也没有PC客户端，手机客户端iOS版一直不能用（数据加载
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="音乐" scheme="http://isunman.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>对多维数组进行排序的函数array_multisort</title>
    <link href="http://isunman.com/2019/07/31/Array_multisort-that-sorts-multidimensional-arrays/"/>
    <id>http://isunman.com/2019/07/31/Array_multisort-that-sorts-multidimensional-arrays/</id>
    <published>2019-07-31T10:10:53.498Z</published>
    <updated>2019-07-31T10:10:53.448Z</updated>
    
    <content type="html">&lt;p&gt;经常会面临这样的需求，虽然有时候我们可以在数据库查询的时候，直接对数据进行排序，但还是无法满足日益复杂的业务需求。这里边会用到两个函数一个是&lt;code&gt;array_column()&lt;/code&gt;函数，这个函数接受三个参数。详情参见这里是从二维数组中抽出一个键的值，作为一个新的数组返回。&lt;br&gt;另一个是&lt;code&gt;array_multisort()&lt;/code&gt;函数，这个函数是一个排序函数，&lt;a href=&quot;https://www.php.net/manual/zh/function.array-multisort.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详情参见这里&lt;/a&gt;。&lt;br&gt;它会依照第一个参数数组的排序规则，依照第一个参数数组的值在第三个参数重的位置对第三个参数进行排序。&lt;/p&gt;
&lt;p&gt;听不明白吧？听不明白就对了，还是直接看代码来的实在：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$orgin = array(
 array(
    &amp;apos;id&amp;apos; =&amp;gt; 5698,
    &amp;apos;first_name&amp;apos; =&amp;gt; &amp;apos;Bill&amp;apos;,
    &amp;apos;last_name&amp;apos; =&amp;gt; &amp;apos;Gates&amp;apos;,
  ),
 array(
    &amp;apos;id&amp;apos; =&amp;gt; 4767,
    &amp;apos;first_name&amp;apos; =&amp;gt; &amp;apos;Steve&amp;apos;,
    &amp;apos;last_name&amp;apos; =&amp;gt; &amp;apos;Jobs&amp;apos;,
 ),
 array(
    &amp;apos;id&amp;apos; =&amp;gt; 3809,
    &amp;apos;first_name&amp;apos; =&amp;gt; &amp;apos;Mark&amp;apos;,
    &amp;apos;last_name&amp;apos; =&amp;gt; &amp;apos;Zuckerberg&amp;apos;,
  )
);

$idArr = array_column($orgin, &amp;apos;id&amp;apos;);
array_multisort($idArr,SORT_ASC,$orgin);
var_dump($orgin);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个打印的结果是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array (size=3)
      0 =&amp;gt; 
array (size=3)
  &amp;apos;id&amp;apos; =&amp;gt; int 3809
  &amp;apos;first_name&amp;apos; =&amp;gt; string &amp;apos;Mark&amp;apos; (length=4)
  &amp;apos;last_name&amp;apos; =&amp;gt; string &amp;apos;Zuckerberg&amp;apos; (length=10)
  1 =&amp;gt; 
array (size=3)
  &amp;apos;id&amp;apos; =&amp;gt; int 4767
  &amp;apos;first_name&amp;apos; =&amp;gt; string &amp;apos;Steve&amp;apos; (length=5)
  &amp;apos;last_name&amp;apos; =&amp;gt; string &amp;apos;Jobs&amp;apos; (length=4)
  2 =&amp;gt; 
array (size=3)
  &amp;apos;id&amp;apos; =&amp;gt; int 5698
  &amp;apos;first_name&amp;apos; =&amp;gt; string &amp;apos;Bill&amp;apos; (length=4)   
  &amp;apos;last_name&amp;apos; =&amp;gt; string &amp;apos;Gates&amp;apos; (length=5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此函数有点意思。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;经常会面临这样的需求，虽然有时候我们可以在数据库查询的时候，直接对数据进行排序，但还是无法满足日益复杂的业务需求。这里边会用到两个函数一个是&lt;code&gt;array_column()&lt;/code&gt;函数，这个函数接受三个参数。详情参见这里是从二维数组中抽出一个键的值，作为一个新
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Facebook一组火爆漫画：生命太短暂，什么才是我们想要的？</title>
    <link href="http://isunman.com/2018/10/21/life-is-too-short-it-is-what-we-want/"/>
    <id>http://isunman.com/2018/10/21/life-is-too-short-it-is-what-we-want/</id>
    <published>2018-10-21T15:43:35.973Z</published>
    <updated>2018-10-21T15:43:35.906Z</updated>
    
    <content type="html">&lt;p&gt;人们都在关心事业、追逐成功，但是不管我们取得了怎样的成就，永远都不够，我们总是想要得到更多、更多……慢慢的我们开始思考：什么才是我们想要的，一开始陪伴我们的人在哪里走散了。&lt;/p&gt;
&lt;p&gt;但是，生活就像一个小偷，偷走我们快乐、我们的爱，所以无论如何都别忘了自己，别忘了你爱的人，握紧快乐，抓牢爱人。&lt;/p&gt;
&lt;h3 id=&quot;1、尝试逗他人开心，每天至少让三个人因你而微笑。&quot;&gt;&lt;a href=&quot;#1、尝试逗他人开心，每天至少让三个人因你而微笑。&quot; class=&quot;headerlink&quot; title=&quot;1、尝试逗他人开心，每天至少让三个人因你而微笑。&quot;&gt;&lt;/a&gt;1、尝试逗他人开心，每天至少让三个人因你而微笑。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/qBxrjY95/1456205478566426.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、每天至少安静地坐十分钟。&quot;&gt;&lt;a href=&quot;#2、每天至少安静地坐十分钟。&quot; class=&quot;headerlink&quot; title=&quot;2、每天至少安静地坐十分钟。&quot;&gt;&lt;/a&gt;2、每天至少安静地坐十分钟。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/tThb0m77/1456205482526617.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3、你不需要赢得每一场争论。赞同你不赞同的。&quot;&gt;&lt;a href=&quot;#3、你不需要赢得每一场争论。赞同你不赞同的。&quot; class=&quot;headerlink&quot; title=&quot;3、你不需要赢得每一场争论。赞同你不赞同的。&quot;&gt;&lt;/a&gt;3、你不需要赢得每一场争论。赞同你不赞同的。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/02tsqS5G/1456205487908408.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、不要把自己看得太重要，其他人不会在乎的。&quot;&gt;&lt;a href=&quot;#4、不要把自己看得太重要，其他人不会在乎的。&quot; class=&quot;headerlink&quot; title=&quot;4、不要把自己看得太重要，其他人不会在乎的。&quot;&gt;&lt;/a&gt;4、不要把自己看得太重要，其他人不会在乎的。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/8zjVkCs2/1456205491546975.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、别做八卦党，不要把你的宝贵能量用在无聊的八卦绯闻上。&quot;&gt;&lt;a href=&quot;#5、别做八卦党，不要把你的宝贵能量用在无聊的八卦绯闻上。&quot; class=&quot;headerlink&quot; title=&quot;5、别做八卦党，不要把你的宝贵能量用在无聊的八卦绯闻上。&quot;&gt;&lt;/a&gt;5、别做八卦党，不要把你的宝贵能量用在无聊的八卦绯闻上。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/ht6RXqdf/1456205495400750.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;6、在你清醒的时候，你可以梦想更多。&quot;&gt;&lt;a href=&quot;#6、在你清醒的时候，你可以梦想更多。&quot; class=&quot;headerlink&quot; title=&quot;6、在你清醒的时候，你可以梦想更多。&quot;&gt;&lt;/a&gt;6、在你清醒的时候，你可以梦想更多。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/cChNCgRS/1456205500992894.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7、别人怎么看待你，完全与你无关。&quot;&gt;&lt;a href=&quot;#7、别人怎么看待你，完全与你无关。&quot; class=&quot;headerlink&quot; title=&quot;7、别人怎么看待你，完全与你无关。&quot;&gt;&lt;/a&gt;7、别人怎么看待你，完全与你无关。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/Rh4BvQnd/1456205505772668-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;8、花更多时间跟这样的人在一起：年龄大于70岁、或者小于6岁。&quot;&gt;&lt;a href=&quot;#8、花更多时间跟这样的人在一起：年龄大于70岁、或者小于6岁。&quot; class=&quot;headerlink&quot; title=&quot;8、花更多时间跟这样的人在一起：年龄大于70岁、或者小于6岁。&quot;&gt;&lt;/a&gt;8、花更多时间跟这样的人在一起：年龄大于70岁、或者小于6岁。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/FsF4qpvs/1456205509874225.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;9、生命太短暂，我没时间讨厌你。&quot;&gt;&lt;a href=&quot;#9、生命太短暂，我没时间讨厌你。&quot; class=&quot;headerlink&quot; title=&quot;9、生命太短暂，我没时间讨厌你。&quot;&gt;&lt;/a&gt;9、生命太短暂，我没时间讨厌你。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/FRQtxgGv/1456205526340886.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;10、微笑、大笑、笑哭了……让生活拥有更多欢笑&quot;&gt;&lt;a href=&quot;#10、微笑、大笑、笑哭了……让生活拥有更多欢笑&quot; class=&quot;headerlink&quot; title=&quot;10、微笑、大笑、笑哭了……让生活拥有更多欢笑&quot;&gt;&lt;/a&gt;10、微笑、大笑、笑哭了……让生活拥有更多欢笑&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/mr9fM6YV/1456205515324739.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;11、没有人能决定你的快乐，除了你自己。&quot;&gt;&lt;a href=&quot;#11、没有人能决定你的快乐，除了你自己。&quot; class=&quot;headerlink&quot; title=&quot;11、没有人能决定你的快乐，除了你自己。&quot;&gt;&lt;/a&gt;11、没有人能决定你的快乐，除了你自己。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/2y2PrpYj/1456205563443853.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;12、当你病了，你的工作不会在乎的，但你的朋友会，跟朋友们保持联络。&quot;&gt;&lt;a href=&quot;#12、当你病了，你的工作不会在乎的，但你的朋友会，跟朋友们保持联络。&quot; class=&quot;headerlink&quot; title=&quot;12、当你病了，你的工作不会在乎的，但你的朋友会，跟朋友们保持联络。&quot;&gt;&lt;/a&gt;12、当你病了，你的工作不会在乎的，但你的朋友会，跟朋友们保持联络。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/7YtpRyXm/1456205568257275.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;13、每天睡8小时。&quot;&gt;&lt;a href=&quot;#13、每天睡8小时。&quot; class=&quot;headerlink&quot; title=&quot;13、每天睡8小时。&quot;&gt;&lt;/a&gt;13、每天睡8小时。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/sXPkHQ0h/1456205572729404.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;14、多喝水（每天至少摄入2升水）。&quot;&gt;&lt;a href=&quot;#14、多喝水（每天至少摄入2升水）。&quot; class=&quot;headerlink&quot; title=&quot;14、多喝水（每天至少摄入2升水）。&quot;&gt;&lt;/a&gt;14、多喝水（每天至少摄入2升水）。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/5yxZh4Zk/1456205576399627.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;15、多读书，争取比上个月多读一本书。&quot;&gt;&lt;a href=&quot;#15、多读书，争取比上个月多读一本书。&quot; class=&quot;headerlink&quot; title=&quot;15、多读书，争取比上个月多读一本书。&quot;&gt;&lt;/a&gt;15、多读书，争取比上个月多读一本书。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/zD7mnhhm/1456205581769081.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;16、过去的就忘了吧，不要总是提起你的伴侣犯过什么错。&quot;&gt;&lt;a href=&quot;#16、过去的就忘了吧，不要总是提起你的伴侣犯过什么错。&quot; class=&quot;headerlink&quot; title=&quot;16、过去的就忘了吧，不要总是提起你的伴侣犯过什么错。&quot;&gt;&lt;/a&gt;16、过去的就忘了吧，不要总是提起你的伴侣犯过什么错。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/htJHW35g/1456205585570622.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;17、不要把你的生活跟别人比较。你不知道其他人走过什么样的路。&quot;&gt;&lt;a href=&quot;#17、不要把你的生活跟别人比较。你不知道其他人走过什么样的路。&quot; class=&quot;headerlink&quot; title=&quot;17、不要把你的生活跟别人比较。你不知道其他人走过什么样的路。&quot;&gt;&lt;/a&gt;17、不要把你的生活跟别人比较。你不知道其他人走过什么样的路。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/3Jxs9wjk/1456205589771679.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;18、每天慢跑10-30分钟。&quot;&gt;&lt;a href=&quot;#18、每天慢跑10-30分钟。&quot; class=&quot;headerlink&quot; title=&quot;18、每天慢跑10-30分钟。&quot;&gt;&lt;/a&gt;18、每天慢跑10-30分钟。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/bwK4zH7n/1456205594213644.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;19、经常给家人打电话。&quot;&gt;&lt;a href=&quot;#19、经常给家人打电话。&quot; class=&quot;headerlink&quot; title=&quot;19、经常给家人打电话。&quot;&gt;&lt;/a&gt;19、经常给家人打电话。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/k5KzDRCp/1456205598893489.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;20、留一些时间给自己，练习冥想、瑜伽和祈祷。&quot;&gt;&lt;a href=&quot;#20、留一些时间给自己，练习冥想、瑜伽和祈祷。&quot; class=&quot;headerlink&quot; title=&quot;20、留一些时间给自己，练习冥想、瑜伽和祈祷。&quot;&gt;&lt;/a&gt;20、留一些时间给自己，练习冥想、瑜伽和祈祷。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/ZRmgNYKK/1456205603567533.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上，可能有点鸡汤了。&lt;/p&gt;
&lt;p&gt;但是有些确实需要去改变，并坚持下去。&lt;/p&gt;
&lt;p&gt;2016/3/20 14:33:26 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;人们都在关心事业、追逐成功，但是不管我们取得了怎样的成就，永远都不够，我们总是想要得到更多、更多……慢慢的我们开始思考：什么才是我们想要的，一开始陪伴我们的人在哪里走散了。&lt;/p&gt;
&lt;p&gt;但是，生活就像一个小偷，偷走我们快乐、我们的爱，所以无论如何都别忘了自己，别忘了你爱的
    
    </summary>
    
      <category term="生活感悟" scheme="http://isunman.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="思考" scheme="http://isunman.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="生命" scheme="http://isunman.com/tags/%E7%94%9F%E5%91%BD/"/>
    
  </entry>
  
  <entry>
    <title>爬虫获取知乎网页title的方法</title>
    <link href="http://isunman.com/2018/10/17/The-method-for-crawler-to-get-the-web-page-title-of-zhihu/"/>
    <id>http://isunman.com/2018/10/17/The-method-for-crawler-to-get-the-web-page-title-of-zhihu/</id>
    <published>2018-10-17T08:04:08.577Z</published>
    <updated>2018-10-17T08:04:08.530Z</updated>
    
    <content type="html">&lt;p&gt;知乎的网页标题title的提取一直有各种问题。可能是知乎自己做了防止被爬虫抓取的。普通的问题详情页和知乎专栏，都提取不到网页title，或者提取到了错误的title。&lt;/p&gt;
&lt;p&gt;本文记录了实际可用的方法，分别提取知乎问题详情页的title与知乎专栏页的title和封面图片的提取方法。&lt;/p&gt;
&lt;h2 id=&quot;知乎问题详情页的title提取&quot;&gt;&lt;a href=&quot;#知乎问题详情页的title提取&quot; class=&quot;headerlink&quot; title=&quot;知乎问题详情页的title提取&quot;&gt;&lt;/a&gt;知乎问题详情页的title提取&lt;/h2&gt;&lt;p&gt;首先看一下源代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;你必讲的笑话是哪个？ - 知乎&amp;lt;/title&amp;gt;&amp;lt;title&amp;gt;知乎 - 有问题上知乎&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中间部分源代码省略了。其中有2个title，直接使用正则匹配时，只能匹配到第2个title——“知乎 - 有问题上知乎”，所有页都是这个。&lt;/p&gt;
&lt;p&gt;再继续向下面寻找，看到这么一段：&lt;br&gt;    &lt;code&gt;&amp;lt;h1 class=&amp;quot;QuestionHeader-title&amp;quot;&amp;gt;你必讲的笑话是哪个？&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;直接使用正则匹配即可，正则匹配规则为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h1\sclass=\&amp;quot;QuestionHeader-title\&amp;quot;&amp;gt;([\s\S]+?)&amp;lt;\/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;知乎专栏文章页的title提取与封面图片提取&quot;&gt;&lt;a href=&quot;#知乎专栏文章页的title提取与封面图片提取&quot; class=&quot;headerlink&quot; title=&quot;知乎专栏文章页的title提取与封面图片提取&quot;&gt;&lt;/a&gt;知乎专栏文章页的title提取与封面图片提取&lt;/h2&gt;&lt;p&gt;首先看一下源代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;智能闹钟音箱能给自己的商业世界打开一扇窗吗？ - 知乎&amp;lt;/title&amp;gt;&amp;lt;title&amp;gt;知乎 - 有问题上知乎&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中间部分源代码省略了。其中有2个title，直接使用正则匹配时，只能匹配到第2个title——“知乎 - 有问题上知乎”，所有页都是这个。&lt;/p&gt;
&lt;p&gt;再继续向下面寻找，看到这么一段：&lt;br&gt;    &lt;code&gt;&amp;lt;header class=&amp;quot;Post-Header&amp;quot;&amp;gt;&amp;lt;h1 class=&amp;quot;Post-Title&amp;quot;&amp;gt;智能闹钟音箱能给自己的商业世界打开一扇窗吗？&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用正则匹配也匹配不到。可能是因为知乎专栏页的数据是使用js加载的，网页源代码初始代码中不含有这些数据。&lt;/p&gt;
&lt;p&gt;稍微看看知乎专栏网页代码可以发现，如果在浏览器中访问类似这样的专栏文章链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42557513&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zhuanlan.zhihu.com/p/42557513&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际会加载下面的文章内容数据 API 链接，知乎专栏页面加载完数据之后才会显示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/api/posts/42557513&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zhuanlan.zhihu.com/api/posts/42557513&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而且返回的数据就是json格式的，可以直接转换为PHP数组，然后根据数组的key值，直接获取需要的字段，然后即可使用。&lt;/p&gt;
&lt;h2 id=&quot;扩展其他知乎相关页的爬虫抓取&quot;&gt;&lt;a href=&quot;#扩展其他知乎相关页的爬虫抓取&quot; class=&quot;headerlink&quot; title=&quot;扩展其他知乎相关页的爬虫抓取&quot;&gt;&lt;/a&gt;扩展其他知乎相关页的爬虫抓取&lt;/h2&gt;&lt;p&gt;后面的参考链接中里面有一句话说的好：&lt;/p&gt;
&lt;p&gt;不管AngularJS还是其它架构，都是服务端的东西，再天花乱坠的服务端架构，到了客户端终究逃不脱HTTP协议，至少目前来说还是如此。&lt;/p&gt;
&lt;p&gt;知道用户ID之后可以相机获取：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获得用户专栏入口&lt;/li&gt;
&lt;li&gt;获得专栏文章信息&lt;/li&gt;
&lt;li&gt;获得专栏文章&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;如何用爬虫爬去知乎专栏信息&quot;&gt;https://www.zhihu.com/question/24948369/answer/29611724&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;使用以上各种方法，基本可以解决与知乎相关内容的爬虫爬取相关的问题。&lt;/p&gt;
&lt;p&gt;另一篇参考文章：&lt;a href=&quot;https://www.300168.com/biancheng/show-21974.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简单PHP实现Pocket抓取知乎专栏文章&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;知乎的网页标题title的提取一直有各种问题。可能是知乎自己做了防止被爬虫抓取的。普通的问题详情页和知乎专栏，都提取不到网页title，或者提取到了错误的title。&lt;/p&gt;
&lt;p&gt;本文记录了实际可用的方法，分别提取知乎问题详情页的title与知乎专栏页的title和封面图
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="正则表达式" scheme="http://isunman.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="爬虫" scheme="http://isunman.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>PHP模拟上传文件使用CURLFile函数</title>
    <link href="http://isunman.com/2018/09/20/php-simulates-uploading-files-using-the-CURLFile-function/"/>
    <id>http://isunman.com/2018/09/20/php-simulates-uploading-files-using-the-CURLFile-function/</id>
    <published>2018-09-20T08:33:13.603Z</published>
    <updated>2018-09-20T08:33:13.533Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、CURLFile-介绍&quot;&gt;&lt;a href=&quot;#一、CURLFile-介绍&quot; class=&quot;headerlink&quot; title=&quot;一、CURLFile 介绍&quot;&gt;&lt;/a&gt;一、CURLFile 介绍&lt;/h3&gt;&lt;h4 id=&quot;CURLFile-construct&quot;&gt;&lt;a href=&quot;#CURLFile-construct&quot; class=&quot;headerlink&quot; title=&quot;CURLFile::__construct&quot;&gt;&lt;/a&gt;CURLFile::__construct&lt;/h4&gt;&lt;p&gt;(PHP 5 &amp;gt;= 5.5.0, PHP 7)&lt;br&gt;CURLFile::__construct – curl_file_create — 创建 CURLFile 对象&lt;/p&gt;
&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;面向对象风格&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;过程化风格&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CURLFile curl_file_create ( string $filename [, string $mimetype [, string $postname ]] )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建 CURLFile 对象，使用 CURLOPT_POSTFIELDS 选项上传文件。&lt;/p&gt;
&lt;h4 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;p&gt;filename 被上传文件的 路径。&lt;/p&gt;
&lt;p&gt;mimetype 被上传文件的 MIME 类型。&lt;/p&gt;
&lt;p&gt;postname 上传数据里面的文件名。&lt;/p&gt;
&lt;h4 id=&quot;返回值&quot;&gt;&lt;a href=&quot;#返回值&quot; class=&quot;headerlink&quot; title=&quot;返回值&quot;&gt;&lt;/a&gt;返回值&lt;/h4&gt;&lt;p&gt;返回 CURLFile 对象。&lt;/p&gt;
&lt;h3 id=&quot;二、使用示例&quot;&gt;&lt;a href=&quot;#二、使用示例&quot; class=&quot;headerlink&quot; title=&quot;二、使用示例&quot;&gt;&lt;/a&gt;二、使用示例&lt;/h3&gt;&lt;h4 id=&quot;1、一个单独的函数定义&quot;&gt;&lt;a href=&quot;#1、一个单独的函数定义&quot; class=&quot;headerlink&quot; title=&quot;1、一个单独的函数定义&quot;&gt;&lt;/a&gt;1、一个单独的函数定义&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public function testUpload01(){
    $file = __DIR__.&amp;apos;\assets\test.jpg&amp;apos;;
    //var_dump($file);
    //$post[&amp;apos;file&amp;apos;] = &amp;apos;@&amp;apos;.$file;
    $obj = new CurlFile($file);
    &amp;lt;span style=&amp;quot;color:#ff0000;&amp;quot;&amp;gt;$obj-&amp;gt;setMimeType(&amp;quot;image/jpeg&amp;quot;);//必须指定文件类型，否则会默认为application/octet-stream，二进制流文件&amp;lt;/span&amp;gt;
    $post[&amp;apos;file&amp;apos;] =  $obj;
    $post[&amp;apos;abc&amp;apos;] = &amp;quot;abc&amp;quot;;
    var_dump($post);
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_HEADER, false);
    //启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch,CURLOPT_BINARYTRANSFER,true);
    curl_setopt($ch, CURLOPT_POSTFIELDS,$post);
    curl_setopt($ch, CURLOPT_URL, &amp;quot;http://localhost/fs/upload.php&amp;quot;);//上传类

    $info= curl_exec($ch);
    curl_close($ch);
    var_dump($info);
    file_put_contents(&amp;apos;./1.html&amp;apos;,$info);
    $res=json_decode($info,true);
    //var_dump($res);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2、模拟php-curl向远程服务器上传文件&quot;&gt;&lt;a href=&quot;#2、模拟php-curl向远程服务器上传文件&quot; class=&quot;headerlink&quot; title=&quot;2、模拟php curl向远程服务器上传文件&quot;&gt;&lt;/a&gt;2、模拟php curl向远程服务器上传文件&lt;/h4&gt;&lt;p&gt;第1个文件：test.php 可以向远程服务器模拟提交上传文件的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    header(&amp;apos;content-type:text/html;charset=utf8&amp;apos;);

    $ch = curl_init();

    //加@符号curl就会把它当成是文件上传处理
    $data = array(&amp;apos;img&amp;apos;=&amp;gt;&amp;apos;@&amp;apos;. dirname(__FILE__).&amp;apos;/img/1.jpg&amp;apos;);
    curl_setopt($ch,CURLOPT_URL,&amp;quot;http://localhost:8088/curl/get_img.php&amp;quot;);
    curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
    curl_setopt($ch,CURLOPT_POST,true);
    curl_setopt($ch,CURLOPT_POSTFIELDS,$data);
    $result = curl_exec($ch);
    curl_close($ch);
    echo json_decode($result);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第2个文件：get_img.php 可以接收上传文件的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
if($_FILES){
    $filename = $_FILES[&amp;apos;img&amp;apos;][&amp;apos;name&amp;apos;];
    $tmpname = $_FILES[&amp;apos;img&amp;apos;][&amp;apos;tmp_name&amp;apos;];
    if(move_uploaded_file($tmpname,dirname(__FILE__).&amp;apos;/upload/&amp;apos;.$filename)){
        echo json_encode(&amp;apos;上传成功&amp;apos;);
    }else{
        $data = json_encode($_FILES);
        echo $data;
    }
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3、本人实测可用综合示例&quot;&gt;&lt;a href=&quot;#3、本人实测可用综合示例&quot; class=&quot;headerlink&quot; title=&quot;3、本人实测可用综合示例&quot;&gt;&lt;/a&gt;3、本人实测可用综合示例&lt;/h4&gt;&lt;p&gt;第1个文件 test.php 模拟上传文件的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$file = __DIR__.&amp;apos;\test.jpg&amp;apos;;
$obj = new CurlFile($file);
$obj-&amp;gt;setMimeType(&amp;quot;image/jpeg&amp;quot;);//必须指定文件类型，否则会默认为application/octet-stream，二进制流文件&amp;lt;/span&amp;gt;
$post[&amp;apos;file&amp;apos;] =  $obj;
$post[&amp;apos;abc&amp;apos;] = &amp;quot;abc&amp;quot;;
var_dump($post);
$ch = curl_init();

curl_setopt($ch, CURLOPT_HEADER, false);
//启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch,CURLOPT_BINARYTRANSFER,true);
curl_setopt($ch, CURLOPT_POSTFIELDS,$post);
curl_setopt($ch, CURLOPT_URL, &amp;quot;http://locaolhost/test/get_img.php&amp;quot;);//上传类

$info= curl_exec($ch);
curl_close($ch);
var_dump($info);
file_put_contents(&amp;apos;./1.html&amp;apos;,$info);
$res=json_decode($info,true);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第2个文件 get_img.php 接收数据的PHP文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

print_r($_FILES);
if($_FILES){
    $filename = $_FILES[&amp;apos;file&amp;apos;][&amp;apos;name&amp;apos;];
    $tmpname = $_FILES[&amp;apos;file&amp;apos;][&amp;apos;tmp_name&amp;apos;];
    if(move_uploaded_file($tmpname,dirname(__FILE__).&amp;apos;/&amp;apos;.$filename)){
        echo json_encode(&amp;apos;SUCCESS&amp;apos;);
    }else{
        $data = json_encode($_FILES);
        echo $data;
    }
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;1、经实际测试，可以使用。如果使用本地签发的SSL证书的https协议，注意本地环境无法测试，可以暂时使用http代替。&lt;/p&gt;
&lt;p&gt;线上的https协议可以正常使用。&lt;/p&gt;
&lt;p&gt;2、线上在使用curl中转当前服务器上传的文件再次转发到另一个远程服务器时，需要把文件先临时存储到当前服务器，待另一个远程服务器接收并处理完成后再把当前服务器上的临时文件删除即可。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、CURLFile-介绍&quot;&gt;&lt;a href=&quot;#一、CURLFile-介绍&quot; class=&quot;headerlink&quot; title=&quot;一、CURLFile 介绍&quot;&gt;&lt;/a&gt;一、CURLFile 介绍&lt;/h3&gt;&lt;h4 id=&quot;CURLFile-construct&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://isunman.com/tags/php/"/>
    
      <category term="上传文件" scheme="http://isunman.com/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>微信红包的架构设计与算法实现</title>
    <link href="http://isunman.com/2018/09/11/architecture-design-and-algorithm-implementation-of-wechat-luckymoney/"/>
    <id>http://isunman.com/2018/09/11/architecture-design-and-algorithm-implementation-of-wechat-luckymoney/</id>
    <published>2018-09-11T10:51:17.584Z</published>
    <updated>2018-09-11T10:51:17.526Z</updated>
    
    <content type="html">&lt;h3 id=&quot;微信红包的架构设计简介&quot;&gt;&lt;a href=&quot;#微信红包的架构设计简介&quot; class=&quot;headerlink&quot; title=&quot;微信红包的架构设计简介&quot;&gt;&lt;/a&gt;微信红包的架构设计简介&lt;/h3&gt;&lt;p&gt;概况：2014年微信红包使用数据库硬抗整个流量，2015年使用cache抗流量。&lt;/p&gt;
&lt;h5 id=&quot;微信的金额什么时候算？&quot;&gt;&lt;a href=&quot;#微信的金额什么时候算？&quot; class=&quot;headerlink&quot; title=&quot;微信的金额什么时候算？&quot;&gt;&lt;/a&gt;微信的金额什么时候算？&lt;/h5&gt;&lt;p&gt;答：微信金额是拆的时候实时算出来，不是预先分配的，采用的是纯内存计算，不需要预算空间存储。。&lt;br&gt;采取实时计算金额的考虑：预算需要占存储，实时效率很高，预算才效率低。&lt;/p&gt;
&lt;h5 id=&quot;实时性：为什么明明抢到红包，点开后发现没有？&quot;&gt;&lt;a href=&quot;#实时性：为什么明明抢到红包，点开后发现没有？&quot; class=&quot;headerlink&quot; title=&quot;实时性：为什么明明抢到红包，点开后发现没有？&quot;&gt;&lt;/a&gt;实时性：为什么明明抢到红包，点开后发现没有？&lt;/h5&gt;&lt;p&gt;答：2014年的红包一点开就知道金额，分两次操作，先抢到金额，然后再转账。&lt;br&gt;2015年的红包的拆和抢是分离的，需要点两次，因此会出现抢到红包了，但点开后告知红包已经被领完的状况。进入到第一个页面不代表抢到，只表示当时红包还有。&lt;/p&gt;
&lt;h5 id=&quot;分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&quot;&gt;&lt;a href=&quot;#分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&quot; class=&quot;headerlink&quot; title=&quot;分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&quot;&gt;&lt;/a&gt;分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？&lt;/h5&gt;&lt;p&gt;答：随机，额度在0.01和剩余平均值×2之间。&lt;br&gt;例如：发100块钱，总共10个红包，那么平均值是10块钱一个，那么发出来的红包的额度在0.01元～20元之间波动。&lt;br&gt;当前面3个红包总共被领了40块钱时，剩下60块钱，总共7个红包，那么这7个红包的额度在：0.01～（60/7×2）=17.14之间。&lt;br&gt;注意：这里的算法是每被抢一个后，剩下的会再次执行上面的这样的算法（Tim老师也觉得上述算法太复杂，不知基于什么样的考虑）。&lt;/p&gt;
&lt;p&gt;这样算下去，会超过最开始的全部金额，因此到了最后面如果不够这么算，那么会采取如下算法：保证剩余用户能拿到最低1分钱即可。&lt;/p&gt;
&lt;p&gt;如果前面的人手气不好，那么后面的余额越多，红包额度也就越多，因此实际概率一样的。&lt;/p&gt;
&lt;h5 id=&quot;红包的设计&quot;&gt;&lt;a href=&quot;#红包的设计&quot; class=&quot;headerlink&quot; title=&quot;红包的设计&quot;&gt;&lt;/a&gt;红包的设计&lt;/h5&gt;&lt;p&gt;答：微信从财付通拉取金额数据郭莱，生成个数/红包类型/金额放到redis集群里，app端将红包ID的请求放入请求队列中，如果发现超过红包的个数，直接返回。根据红包的裸祭处理成功得到令牌请求，则由财付通进行一致性调用，通过像比特币一样，两边保存交易记录，交易后交给第三方服务审计，如果交易过程中出现不一致就强制回归。&lt;/p&gt;
&lt;h5 id=&quot;发性处理：红包如何计算被抢完？&quot;&gt;&lt;a href=&quot;#发性处理：红包如何计算被抢完？&quot; class=&quot;headerlink&quot; title=&quot;发性处理：红包如何计算被抢完？&quot;&gt;&lt;/a&gt;发性处理：红包如何计算被抢完？&lt;/h5&gt;&lt;p&gt;答：cache会抵抗无效请求，将无效的请求过滤掉，实际进入到后台的量不大。cache记录红包个数，原子操作进行个数递减，到0表示被抢光。财付通按照20万笔每秒入账准备，但实际还不到8万每秒。&lt;/p&gt;
&lt;h5 id=&quot;通如何保持8w每秒的写入？&quot;&gt;&lt;a href=&quot;#通如何保持8w每秒的写入？&quot; class=&quot;headerlink&quot; title=&quot;通如何保持8w每秒的写入？&quot;&gt;&lt;/a&gt;通如何保持8w每秒的写入？&lt;/h5&gt;&lt;p&gt;答：多主sharding，水平扩展机器。&lt;/p&gt;
&lt;h5 id=&quot;数据容量多少？&quot;&gt;&lt;a href=&quot;#数据容量多少？&quot; class=&quot;headerlink&quot; title=&quot;数据容量多少？&quot;&gt;&lt;/a&gt;数据容量多少？&lt;/h5&gt;&lt;p&gt;答：一个红包只占一条记录，有效期只有几天，因此不需要太多空间。&lt;/p&gt;
&lt;h5 id=&quot;查询红包分配，压力大不？&quot;&gt;&lt;a href=&quot;#查询红包分配，压力大不？&quot; class=&quot;headerlink&quot; title=&quot;查询红包分配，压力大不？&quot;&gt;&lt;/a&gt;查询红包分配，压力大不？&lt;/h5&gt;&lt;p&gt;答：抢到红包的人数和红包都在一条cache记录上，没有太大的查询压力。&lt;/p&gt;
&lt;h5 id=&quot;一个红包一个队列？&quot;&gt;&lt;a href=&quot;#一个红包一个队列？&quot; class=&quot;headerlink&quot; title=&quot;一个红包一个队列？&quot;&gt;&lt;/a&gt;一个红包一个队列？&lt;/h5&gt;&lt;p&gt;答：没有队列，一个红包一条数据，数据上有一个计数器字段。&lt;/p&gt;
&lt;h5 id=&quot;有没有从数据上证明每个红包的概率是不是均等？&quot;&gt;&lt;a href=&quot;#有没有从数据上证明每个红包的概率是不是均等？&quot; class=&quot;headerlink&quot; title=&quot;有没有从数据上证明每个红包的概率是不是均等？&quot;&gt;&lt;/a&gt;有没有从数据上证明每个红包的概率是不是均等？&lt;/h5&gt;&lt;p&gt;答：不是绝对均等，就是一个简单的拍脑袋算法。&lt;/p&gt;
&lt;h5 id=&quot;拍脑袋算法，会不会出现两个最佳？&quot;&gt;&lt;a href=&quot;#拍脑袋算法，会不会出现两个最佳？&quot; class=&quot;headerlink&quot; title=&quot;拍脑袋算法，会不会出现两个最佳？&quot;&gt;&lt;/a&gt;拍脑袋算法，会不会出现两个最佳？&lt;/h5&gt;&lt;p&gt;答：会出现金额一样的，但是手气最佳只有一个，先抢到的那个最佳。&lt;/p&gt;
&lt;h5 id=&quot;每领一个红包就更新数据么？&quot;&gt;&lt;a href=&quot;#每领一个红包就更新数据么？&quot; class=&quot;headerlink&quot; title=&quot;每领一个红包就更新数据么？&quot;&gt;&lt;/a&gt;每领一个红包就更新数据么？&lt;/h5&gt;&lt;p&gt;答：每抢到一个红包，就cas更新剩余金额和红包个数。&lt;/p&gt;
&lt;h5 id=&quot;红包如何入库入账？&quot;&gt;&lt;a href=&quot;#红包如何入库入账？&quot; class=&quot;headerlink&quot; title=&quot;红包如何入库入账？&quot;&gt;&lt;/a&gt;红包如何入库入账？&lt;/h5&gt;&lt;p&gt;数据库会累加已经领取的个数与金额，插入一条领取记录。入账则是后台异步操作。&lt;/p&gt;
&lt;h5 id=&quot;入帐出错怎么办？比如红包个数没了，但余额还有？&quot;&gt;&lt;a href=&quot;#入帐出错怎么办？比如红包个数没了，但余额还有？&quot; class=&quot;headerlink&quot; title=&quot;入帐出错怎么办？比如红包个数没了，但余额还有？&quot;&gt;&lt;/a&gt;入帐出错怎么办？比如红包个数没了，但余额还有？&lt;/h5&gt;&lt;p&gt;答：最后会有一个take all操作。另外还有一个对账来保障。&lt;/p&gt;
&lt;h3 id=&quot;算法实现java版&quot;&gt;&lt;a href=&quot;#算法实现java版&quot; class=&quot;headerlink&quot; title=&quot;算法实现java版&quot;&gt;&lt;/a&gt;算法实现java版&lt;/h3&gt;&lt;p&gt;算法很简单，不是提前算好，而是抢红包时计算&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static double getRandomMoney(RedPackage _redPackage) {
// remainSize 剩余的红包数量
// remainMoney 剩余的钱
if (_redPackage.remainSize == 1) {
    _redPackage.remainSize--;
    return (double) Math.round(_redPackage.remainMoney * 100) / 100;
}
Random r     = new Random();
double min   = 0.01; //
double max   = _redPackage.remainMoney / _redPackage.remainSize * 2;
double money = r.nextDouble() * max;
money = money &amp;lt;= min ? 0.01: money;
money = Math.floor(money * 100) / 100;
_redPackage.remainSize--;
_redPackage.remainMoney -= money;
return money;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;LeftMoneyPackage&lt;/code&gt;数据结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class RedPackage {
int    remainSize;
double remainMoney;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试时初始化相关数据是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static void init() {
redPackage.remainSize  = 20;
redPackage.remainMoney = 200;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;算法实现PHP版&quot;&gt;&lt;a href=&quot;#算法实现PHP版&quot; class=&quot;headerlink&quot; title=&quot;算法实现PHP版&quot;&gt;&lt;/a&gt;算法实现PHP版&lt;/h3&gt;&lt;p&gt;关键就是定义核心函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getrandommoney($remainmoney,$remainpacket,$moneymax = 0){
if($remainpacket &amp;lt; 1 || $remainmoney &amp;lt;= 0){
    return 0;
}
if($remainpacket == 1){
    return     $remainmoney;
}

$min = 1;//注意倍数
$max = $remainmoney / $remainpacket * 2;
$money = rand($min,$max) ;
$money = $money &amp;lt;= $min ? $min : $money;
//每一次领取时的最大值
if($moneymax &amp;amp;&amp;amp; $money &amp;gt; $moneymax){
    $money = $moneymax;
}

return $money;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$lmremainingtotal = 200.00;//总金额
$lmremainingtimes = 20;//总个数
$lmmoneymax = 0;
$lmremainingtotaltemp = $lmremainingtotal * 100;
$getonelm = getrandommoney($lmremainingtotaltemp,$lmremainingtimes);
$getonelm = round($getonelm/100,2);    
echo $getonelm;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;1、注意函数内部实现时使用的整数，传参进去时需要扩大100倍，最后得到的本次随机数需要在缩小至1%。&lt;/p&gt;
&lt;p&gt;2、增加了每一次调用的随机最大数限额这个参数，默认为0表示不限。&lt;/p&gt;
&lt;p&gt;3、更改剩余的红包总额度与红包个数，是在函数外实现的（必须步骤）。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;上述方法都是每次计算一个红包的额度。如果需要一次性计算所有的红包，并分配完成，则需要循环执行。注意数据并发量的大小。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;微信红包的架构设计简介&quot;&gt;&lt;a href=&quot;#微信红包的架构设计简介&quot; class=&quot;headerlink&quot; title=&quot;微信红包的架构设计简介&quot;&gt;&lt;/a&gt;微信红包的架构设计简介&lt;/h3&gt;&lt;p&gt;概况：2014年微信红包使用数据库硬抗整个流量，2015年使用cac
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="PHP算法" scheme="http://isunman.com/tags/php%E7%AE%97%E6%B3%95/"/>
    
      <category term="微信" scheme="http://isunman.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>自定义iPhone的铃声</title>
    <link href="http://isunman.com/2018/09/08/customize-your-iPhones-ringtone/"/>
    <id>http://isunman.com/2018/09/08/customize-your-iPhones-ringtone/</id>
    <published>2018-09-07T19:33:50.282Z</published>
    <updated>2018-09-07T19:33:50.223Z</updated>
    
    <content type="html">&lt;h3 id=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;a href=&quot;#需使用Mac电脑上的itunes进行设置。&quot; class=&quot;headerlink&quot; title=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;/a&gt;需使用Mac电脑上的itunes进行设置。&lt;/h3&gt;&lt;p&gt;具体方法如下：&lt;/p&gt;
&lt;p&gt;1、将手机和苹果电脑连接，打开iTunes切换到资料库看“xxx”的iphone这一栏有没有铃声菜单，没有的话点击编辑菜单勾选铃声。&lt;/p&gt;
&lt;p&gt;2、下载你喜欢的歌曲点击歌曲-&amp;gt;文件-&amp;gt;添加到资料库，选取要自定义铃声的歌曲之后选择打开。&lt;/p&gt;
&lt;p&gt;3、选定歌曲右击-&amp;gt;显示简介-&amp;gt;选项，选择开始停止时间，记得打钩 ( 这里注意的是苹果的铃声只能在40s内 ),然后点击好。&lt;/p&gt;
&lt;p&gt;4、选定歌曲文件-&amp;gt;转换-&amp;gt;创建ACC版本，出现两个同名文件。&lt;/p&gt;
&lt;p&gt;5、右击刚刚新生成同名文件选择在Finder打开，修改该文件的扩展名为m4r。为了后续操作方便把该文件拖到桌面。&lt;/p&gt;
&lt;p&gt;6、返回资料库删除刚刚生成的同名文件。点击音乐-&amp;gt;铃声把刚刚拖到桌面的m4r文件,拖放到列表&lt;/p&gt;
&lt;p&gt;7、点击手机按钮进入手机管理。打开手机 设置-&amp;gt;声音与触感-&amp;gt;电话铃声 就可以自定义铃声了。&lt;/p&gt;
&lt;p&gt;其中，第2-4步的扩展可以参考如下：&lt;/p&gt;
&lt;h3 id=&quot;mp3文件到acc文件的剪切与格式转换&quot;&gt;&lt;a href=&quot;#mp3文件到acc文件的剪切与格式转换&quot; class=&quot;headerlink&quot; title=&quot;mp3文件到acc文件的剪切与格式转换&quot;&gt;&lt;/a&gt;mp3文件到acc文件的剪切与格式转换&lt;/h3&gt;&lt;p&gt;当先打开访达，在访达点击左侧的音乐。&lt;/p&gt;
&lt;p&gt;在音乐里面选择一个需要剪切的音频文件，然后右键打开方式为图二的软件即可。&lt;/p&gt;
&lt;p&gt;打开软件后点击这个音乐文件，然后看到出现在下方点击名字上的右侧三个小点。并在菜单上选择歌曲信息。&lt;/p&gt;
&lt;p&gt;然后在这个信息框点击选项，把开始结束这里勾上。&lt;/p&gt;
&lt;p&gt;输入一个需要的时间，即音乐的时长。而后看到这个音乐已经被修改了时长了。例如这里设置为10秒钟，则输入10即可。&lt;/p&gt;
&lt;p&gt;然后点击菜单栏上的文件转换，选择创建ACC版本。&lt;/p&gt;
&lt;p&gt;这个时候看到在原来的名字下面多个版本，就是创建后的文件，把文件拖到桌面。接着桌面多个剪切后的音频文件了。一个音频文件至此就剪切剪辑完毕了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;a href=&quot;#需使用Mac电脑上的itunes进行设置。&quot; class=&quot;headerlink&quot; title=&quot;需使用Mac电脑上的itunes进行设置。&quot;&gt;&lt;/a&gt;需使用Mac电脑上的itunes进行设置。&lt;/
    
    </summary>
    
      <category term="Mac使用" scheme="http://isunman.com/categories/mac%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>如何下载知乎视频</title>
    <link href="http://isunman.com/2018/08/29/how-to-download-zhihu-video/"/>
    <id>http://isunman.com/2018/08/29/how-to-download-zhihu-video/</id>
    <published>2018-08-29T12:18:53.660Z</published>
    <updated>2018-08-29T12:18:53.628Z</updated>
    
    <content type="html">&lt;p&gt;知乎视频缓存是分段每一段几秒，不可能有完整文件可以一次下载完成的。大部分浏览器视频探测下载插件也不管用。&lt;/p&gt;
&lt;p&gt;下面说一种亲测实用的方法。&lt;/p&gt;
&lt;h3 id=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;a href=&quot;#1、先找到视频的真正地址，一般都是m3u8格式。&quot; class=&quot;headerlink&quot; title=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;/a&gt;1、先找到视频的真正地址，一般都是m3u8格式。&lt;/h3&gt;&lt;p&gt;方法有许多种。暂时介绍2种。&lt;/p&gt;
&lt;p&gt;第1种：&lt;br&gt;如果已经获取到形如&lt;a href=&quot;https://v.vzuu.com/video/1018150775008034816格式的知乎视频地址，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://v.vzuu.com/video/1018150775008034816格式的知乎视频地址，&lt;/a&gt;&lt;br&gt;则使用&lt;a href=&quot;https://lens.zhihu.com/api/videos/1018150775008034816来获取视频的真实地址；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lens.zhihu.com/api/videos/1018150775008034816来获取视频的真实地址；&lt;/a&gt;&lt;br&gt;最后的数字是视频网页的地址中的参数，返回的json 里有 m3u8 地址。&lt;/p&gt;
&lt;p&gt;第2种：&lt;br&gt;实用浏览器工具“代码检查”或者“查看源码”或者“firebug”，查找到视频的真实地址。&lt;/p&gt;
&lt;h3 id=&quot;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot;&gt;&lt;a href=&quot;#2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot; class=&quot;headerlink&quot; title=&quot;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&quot;&gt;&lt;/a&gt;2、实用FFmpeg命令，可以自动下载分段视频为一个完整的指定格式的文件。&lt;/h3&gt;&lt;p&gt;需要注意的是，需要提前本地安装好ffmpeg；使用命令时，如不识别ffmpeg则需要使用ffmpeg的绝对路径。&lt;/p&gt;
&lt;p&gt;ffmpeg -i “视频真实地址URL” -c copy m.mp4&lt;/p&gt;
&lt;p&gt;执行完成之后，在执行命令行切换的当前目录下就是生成m.mp4的文件。
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;知乎视频缓存是分段每一段几秒，不可能有完整文件可以一次下载完成的。大部分浏览器视频探测下载插件也不管用。&lt;/p&gt;
&lt;p&gt;下面说一种亲测实用的方法。&lt;/p&gt;
&lt;h3 id=&quot;1、先找到视频的真正地址，一般都是m3u8格式。&quot;&gt;&lt;a href=&quot;#1、先找到视频的真正地址，一般
    
    </summary>
    
      <category term="网络工具" scheme="http://isunman.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工作" scheme="http://isunman.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="野趣" scheme="http://isunman.com/tags/%E9%87%8E%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>Web端的即时通讯解决方案</title>
    <link href="http://isunman.com/2018/08/21/web-based-instant-messaging-solution/"/>
    <id>http://isunman.com/2018/08/21/web-based-instant-messaging-solution/</id>
    <published>2018-08-21T11:02:17.901Z</published>
    <updated>2018-08-21T11:02:17.839Z</updated>
    
    <content type="html">&lt;p&gt;Web端的即时通讯解决方案&lt;/p&gt;
&lt;h3 id=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;a href=&quot;#首先，确定使用WebSocket技术。&quot; class=&quot;headerlink&quot; title=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;/a&gt;首先，确定使用WebSocket技术。&lt;/h3&gt;&lt;p&gt;逻辑分析：&lt;/p&gt;
&lt;p&gt;1、如果需要支持多个项目，提交登录信息时，需提供当前的项目的ID。&lt;br&gt;或者不同的项目使用不同的端口，在服务器端启用多个WebSocket的服务。&lt;/p&gt;
&lt;p&gt;2、与Redis的结合。&lt;/p&gt;
&lt;p&gt;3、作为独立第三方，只负责即时通讯的连接和转发消息，不涉及具体业务逻辑。&lt;/p&gt;
&lt;h3 id=&quot;在Linux服务器上安装配置该技术的步骤：&quot;&gt;&lt;a href=&quot;#在Linux服务器上安装配置该技术的步骤：&quot; class=&quot;headerlink&quot; title=&quot;在Linux服务器上安装配置该技术的步骤：&quot;&gt;&lt;/a&gt;在Linux服务器上安装配置该技术的步骤：&lt;/h3&gt;&lt;p&gt;1、先安装Redis&lt;/p&gt;
&lt;p&gt;2、再安装PHP的redis扩展&lt;/p&gt;
&lt;p&gt;3、调试功能。&lt;/p&gt;
&lt;p&gt;4、Redis的后台运行。&lt;/p&gt;
&lt;p&gt;5、PHP文件的命令行执行的后台运行。&lt;/p&gt;
&lt;h3 id=&quot;详细说明每个步骤中遇到的坑&quot;&gt;&lt;a href=&quot;#详细说明每个步骤中遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;详细说明每个步骤中遇到的坑&quot;&gt;&lt;/a&gt;详细说明每个步骤中遇到的坑&lt;/h3&gt;&lt;p&gt;1、安装Redis中没遇到什么问题。Linux时CentOS 7版本，直接使用yum安装即可。&lt;/p&gt;
&lt;p&gt;2、注意PHP的redis扩展中的PHP的安装路径。&lt;/p&gt;
&lt;p&gt;3、无问题。&lt;/p&gt;
&lt;p&gt;4、Redis的后台运行，需要确认进程和端口未被占用。&lt;/p&gt;
&lt;p&gt;5、这一步有大坑。PHP文件后台命令行模式一直启动不了。说是命令的路径不对，修改了也不行。后来使用PHP命令的绝对地址才可以启动，暂时先使用。因为此文件不会经常启动。&lt;/p&gt;
&lt;h3 id=&quot;其他注意事项&quot;&gt;&lt;a href=&quot;#其他注意事项&quot; class=&quot;headerlink&quot; title=&quot;其他注意事项&quot;&gt;&lt;/a&gt;其他注意事项&lt;/h3&gt;&lt;p&gt;1、把Redis和server.php文件加入到服务器开机自启动中，Redis可以，server.php不可以。只有暂时手动启动此文件的运行。&lt;/p&gt;
&lt;p&gt;2、每次重启服务器一定要注意重启server.php。&lt;/p&gt;
&lt;p&gt;3、每次重启服务器，一定要住已清理Redis中与WebSocket相关的缓存数据。&lt;/p&gt;
&lt;p&gt;——小永&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Web端的即时通讯解决方案&lt;/p&gt;
&lt;h3 id=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;a href=&quot;#首先，确定使用WebSocket技术。&quot; class=&quot;headerlink&quot; title=&quot;首先，确定使用WebSocket技术。&quot;&gt;&lt;/a&gt;首先，确定使用W
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="http://isunman.com/tags/redis/"/>
    
      <category term="linux" scheme="http://isunman.com/tags/linux/"/>
    
      <category term="即时通讯" scheme="http://isunman.com/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>告诉你Redis是一个牛逼货</title>
    <link href="http://isunman.com/2018/08/07/Tell-you-that-redis-is-a-real-powerful/"/>
    <id>http://isunman.com/2018/08/07/Tell-you-that-redis-is-a-real-powerful/</id>
    <published>2018-08-07T03:43:11.685Z</published>
    <updated>2018-08-07T03:43:11.650Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h2&gt;&lt;p&gt;Redis是一个 Key-Value 存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string(字符串)、 list(链表)、 set(集合)和 zset(有序集合)。这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis 支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave(主从)同步。&lt;/p&gt;
&lt;h2 id=&quot;Key-Value存储系统&quot;&gt;&lt;a href=&quot;#Key-Value存储系统&quot; class=&quot;headerlink&quot; title=&quot;Key-Value存储系统&quot;&gt;&lt;/a&gt;Key-Value存储系统&lt;/h2&gt;&lt;p&gt;Key-Value Store 是当下比较流行的话题，尤其在构建诸如搜索引擎、IM、P2P、游戏服务器、SNS 等大型互联网应用以及提供云计算服务的时候，怎样保证系统在海量数据环境下的高性能、高可靠性、高扩展性、高可用性、低成本成为所有系统架构们挖苦心思考虑的重点，而怎样解决数据库服务器的性能瓶颈是最大的挑战。&lt;/p&gt;
&lt;p&gt;Key-Value Store 更加注重对海量数据存取的性能、分布式、扩展性支持上，并不需要传统关系数据库的一些特征，例如：Schema、事务、完整 SQL 查询支持等等，因此在分布式环境下的性能相对于传统的关系数据库有较大的提升。&lt;/p&gt;
&lt;h2 id=&quot;为什么要选择Key-Value-Store&quot;&gt;&lt;a href=&quot;#为什么要选择Key-Value-Store&quot; class=&quot;headerlink&quot; title=&quot;为什么要选择Key-Value Store&quot;&gt;&lt;/a&gt;为什么要选择Key-Value Store&lt;/h2&gt;&lt;h3 id=&quot;1、大规模互联网应用&quot;&gt;&lt;a href=&quot;#1、大规模互联网应用&quot; class=&quot;headerlink&quot; title=&quot;1、大规模互联网应用&quot;&gt;&lt;/a&gt;1、大规模互联网应用&lt;/h3&gt;&lt;p&gt;一类是仍然采用RDBMS，然后通过对数据库的垂直和水平切分将整个数据库部署到一个集群上，缺点在于它是针对特定应用，通用型不足&lt;br&gt;另一类就是google采用的方法，抛弃RDBMS，采用Key-Value形式存储，这样可以极大增强系统的可扩展性。&lt;/p&gt;
&lt;h3 id=&quot;2、云存储&quot;&gt;&lt;a href=&quot;#2、云存储&quot; class=&quot;headerlink&quot; title=&quot;2、云存储&quot;&gt;&lt;/a&gt;2、云存储&lt;/h3&gt;&lt;p&gt;如果说上一个问题还有可以替代的解决方案（切割数据库）的话，那么对于云存储来说，也许 key-value 的 store 就是唯一的解决方案了。云存储简单点说就是构建一个大型的存储平台给别人用，这也就意味着在这上面运行的应用其实是不可控的。如果其中某个客户的应用随着用户的增长而不断增长时，云存储供应商是没有办法通过数据库的切割来达到 scale 的，因为这个数据是客户的，供应商不了解这个数据自然就没法作出切割。在这种情况下，key-value 的 store 就是唯一的选择了，因为这种条件下的 scalability 必须是自动完成的，不能有人工干预。这也是为什么几乎所有的现有的云存储都是 key-value 形式的，例如 Amazon的 smipleDB，底层实现就是 key-value，还有 google 的  GoogleAppEngine，采用的是 BigTable的存储形式。&lt;/p&gt;
&lt;p&gt;Key-Value Store 最大的特点就是它的可扩展性，这也就是它最大的优势。所谓的可扩展性，在我看来这里包括了两方面内容。一方面，是指 Key-Value Store 可以支持极大的数据的存储，它的分布式的架构决定了只要有更多的机器，就能够保证存储更多的数据。另一方面，是指它可以支持数量很多的并发的查询。对于 RDBMS，一般几百个并发的查询就可以让它很吃力了，而一个 Key-Value Store，可以很轻松的支持上千的并发查询。下面而简单的罗列了一些特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key-value store：一个  key-value  数据存储系统，只支持一些基本操作，如： SET(key, value) 和  GET(key)  等；&lt;/li&gt;
&lt;li&gt;分布式：多台机器（nodes）同时存储数据和状态，彼此交换消息来保持数据一致，可视为一个完整的存储系统。&lt;/li&gt;
&lt;li&gt;数据一致：所有机器上的数据都是同步更新的、不用担心得到不一致的结果；&lt;br&gt;冗余：所有机器（nodes）保存相同的数据，整个系统的存储能力取决于单台机器（node）的能力；&lt;/li&gt;
&lt;li&gt;容错：如果有少数  nodes  出错，比如重启、当机、断网、网络丢包等各种  fault/fail  都不影响整个系统的运行；&lt;/li&gt;
&lt;li&gt;高可靠性：容错、冗余等保证了数据库系统的可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;初识Redis&quot;&gt;&lt;a href=&quot;#初识Redis&quot; class=&quot;headerlink&quot; title=&quot;初识Redis&quot;&gt;&lt;/a&gt;初识Redis&lt;/h2&gt;&lt;p&gt;Redis是一个开源的使用ANSI C语言编写，支持网络、可基于内存且可持久化的日志型、Key-Value数据库，并且提供多个语言的API，访问十分便捷。&lt;/p&gt;
&lt;h3 id=&quot;Redis数据类型：&quot;&gt;&lt;a href=&quot;#Redis数据类型：&quot; class=&quot;headerlink&quot; title=&quot;Redis数据类型：&quot;&gt;&lt;/a&gt;Redis数据类型：&lt;/h3&gt;&lt;p&gt;作为 Key-value 型数据库，Redis 也提供了键（Key）和键值（Value）的映射关系。但是，除了常规的数值或字符串，Redis 的键值还可以是以下形式之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists  （列表）&lt;/li&gt;
&lt;li&gt;Sets  （集合）&lt;/li&gt;
&lt;li&gt;Sorted sets  （有序集合）&lt;/li&gt;
&lt;li&gt;Hashes  （哈希表）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;键值的数据类型决定了该键值支持的操作。Redis 支持诸如列表、集合或有序集合的交集、并集、查集等高级原子操作；同时，如果键值的类型是普通数字，Redis 则提供自增等原子操作。&lt;/p&gt;
&lt;h2 id=&quot;Redis持久化：&quot;&gt;&lt;a href=&quot;#Redis持久化：&quot; class=&quot;headerlink&quot; title=&quot;Redis持久化：&quot;&gt;&lt;/a&gt;Redis持久化：&lt;/h2&gt;&lt;p&gt;通常，Redis 将数据存储于内存中，或被配置为使用虚拟内存。通过两种方式可以实现数据持久化：使用截图的方式，将内存中的数据不断写入磁盘；或使用类似 MySQL 的日志方式，记录每次更新的日志。前者性能较高，但是可能会引起一定程度的数据丢失；后者相反。&lt;/p&gt;
&lt;p&gt;Redis主从同步：&lt;/p&gt;
&lt;p&gt;Redis支持将数据同步到多台从库，这种特性对提高读取性能非常有益。&lt;/p&gt;
&lt;h2 id=&quot;Redis性能：&quot;&gt;&lt;a href=&quot;#Redis性能：&quot; class=&quot;headerlink&quot; title=&quot;Redis性能：&quot;&gt;&lt;/a&gt;Redis性能：&lt;/h2&gt;&lt;p&gt;相比需要依赖磁盘记录每个更新的数据库，基于内存的特性无疑给Redis带来了非常优秀的性能，读写操作之间有显著的性能差异。&lt;/p&gt;
&lt;h3 id=&quot;性能测试结果：&quot;&gt;&lt;a href=&quot;#性能测试结果：&quot; class=&quot;headerlink&quot; title=&quot;性能测试结果：&quot;&gt;&lt;/a&gt;性能测试结果：&lt;/h3&gt;&lt;p&gt;SET操作每秒钟 110000 次，GET操作每秒钟 81000 次，服务器配置如下：&lt;br&gt;Linux 2.6, Xeon X3320 2.5Ghz.&lt;br&gt;stackoverflow 网站使用 Redis 做为缓存服务器。&lt;/p&gt;
&lt;h2 id=&quot;适用场合：&quot;&gt;&lt;a href=&quot;#适用场合：&quot; class=&quot;headerlink&quot; title=&quot;适用场合：&quot;&gt;&lt;/a&gt;适用场合：&lt;/h2&gt;&lt;p&gt;Redis其实开创了一种新的数据存储思路，使用Redis，我们不用再面对功能单调的数据库时，把精力放在如何把大象放进冰箱的问题，而是利用Redis提供的灵活多变的数据结构和数据操作，为不同的大象构建不同的冰箱。&lt;/p&gt;
&lt;h3 id=&quot;下面是一些Redis常用的场景：&quot;&gt;&lt;a href=&quot;#下面是一些Redis常用的场景：&quot; class=&quot;headerlink&quot; title=&quot;下面是一些Redis常用的场景：&quot;&gt;&lt;/a&gt;下面是一些Redis常用的场景：&lt;/h3&gt;&lt;h4 id=&quot;1、取最新N个数据的操作&quot;&gt;&lt;a href=&quot;#1、取最新N个数据的操作&quot; class=&quot;headerlink&quot; title=&quot;1、取最新N个数据的操作&quot;&gt;&lt;/a&gt;1、取最新N个数据的操作&lt;/h4&gt;&lt;p&gt;比如典型的取你网站的最新文章，通过下面方式，我们可以将最新的 5000 条评论的 ID 放在Redis 的 List 集合中，并将超出集合部分从数据库获取。使用 LPUSH latest.comments&lt;id&gt;命令，向 list 集合中插入数据插入完成后再用 LTRIM latest.comments 0 5000 命令使其永远只保存最近 5000 个 ID如果你还有不同的筛选维度，比如某个分类的最新 N 条，那么你可以再建一个按此分类的List，只存 ID 的话，Redis 是非常高效的。&lt;/id&gt;&lt;/p&gt;
&lt;h4 id=&quot;2、排行榜应用，取TOP-N操作&quot;&gt;&lt;a href=&quot;#2、排行榜应用，取TOP-N操作&quot; class=&quot;headerlink&quot; title=&quot;2、排行榜应用，取TOP N操作&quot;&gt;&lt;/a&gt;2、排行榜应用，取TOP N操作&lt;/h4&gt;&lt;p&gt;这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某一个条件为权重，比如按购买的次数或者顶的次数，这时候就需要 sorted set 出马，将你要排序的值设置为sorted set的score，将具体的数据设置为相应的value，每次只需要执行一条ZADD命令即可。&lt;/p&gt;
&lt;h4 id=&quot;3、需要精确设定过期时间的应用&quot;&gt;&lt;a href=&quot;#3、需要精确设定过期时间的应用&quot; class=&quot;headerlink&quot; title=&quot;3、需要精确设定过期时间的应用&quot;&gt;&lt;/a&gt;3、需要精确设定过期时间的应用&lt;/h4&gt;&lt;p&gt;比如你可以把上面说到的 sorted  set 的 score 值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除 Redis 中的过期数据，你完全可以把 Redis 里这个过期时间当成是对数据库中数据的索引，用 Redis 来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。&lt;/p&gt;
&lt;h4 id=&quot;4、计数器应用&quot;&gt;&lt;a href=&quot;#4、计数器应用&quot; class=&quot;headerlink&quot; title=&quot;4、计数器应用&quot;&gt;&lt;/a&gt;4、计数器应用&lt;/h4&gt;&lt;p&gt;Redis的命令是原子性的，你可以轻松利用INCR、DECR命令来构建计数器系统（底层的写入是单线程模型，并发写会按到位顺序执行）&lt;/p&gt;
&lt;h4 id=&quot;5、Uniq操作，获取某段时间所有数据去重值&quot;&gt;&lt;a href=&quot;#5、Uniq操作，获取某段时间所有数据去重值&quot; class=&quot;headerlink&quot; title=&quot;5、Uniq操作，获取某段时间所有数据去重值&quot;&gt;&lt;/a&gt;5、Uniq操作，获取某段时间所有数据去重值&lt;/h4&gt;&lt;p&gt;这个使用Redis的Set数据结构最合适，只需要不断将数据往Set中扔就行，set就是集合，会自动去重&lt;/p&gt;
&lt;h4 id=&quot;6、实时系统、发垃圾系统&quot;&gt;&lt;a href=&quot;#6、实时系统、发垃圾系统&quot; class=&quot;headerlink&quot; title=&quot;6、实时系统、发垃圾系统&quot;&gt;&lt;/a&gt;6、实时系统、发垃圾系统&lt;/h4&gt;&lt;p&gt;通过上面说到的 set 功能，你可以知道一个终端用户是否进行了某个操作，可以找到其操作的集合并进行分析统计对比等。没有做不到，只有想不到。&lt;/p&gt;
&lt;h4 id=&quot;7、Pub、Sub构建实时消息系统&quot;&gt;&lt;a href=&quot;#7、Pub、Sub构建实时消息系统&quot; class=&quot;headerlink&quot; title=&quot;7、Pub、Sub构建实时消息系统&quot;&gt;&lt;/a&gt;7、Pub、Sub构建实时消息系统&lt;/h4&gt;&lt;p&gt;Redis 的 Pub/Sub 系统可以构建实时的消息系统，比如很多用 Pub/Sub 构建的实时聊天系统的例子。&lt;/p&gt;
&lt;h4 id=&quot;8、构建队列系统&quot;&gt;&lt;a href=&quot;#8、构建队列系统&quot; class=&quot;headerlink&quot; title=&quot;8、构建队列系统&quot;&gt;&lt;/a&gt;8、构建队列系统&lt;/h4&gt;&lt;p&gt;使用list可以构建队列系统，使用sorted set 甚至可以构建有优先级的队列系统。&lt;/p&gt;
&lt;h4 id=&quot;9、缓存&quot;&gt;&lt;a href=&quot;#9、缓存&quot; class=&quot;headerlink&quot; title=&quot;9、缓存&quot;&gt;&lt;/a&gt;9、缓存&lt;/h4&gt;&lt;p&gt;性能优于Memcached，并且更优秀的在于数据结构更加多样化&lt;/p&gt;
&lt;h2 id=&quot;Redis作者的宣言&quot;&gt;&lt;a href=&quot;#Redis作者的宣言&quot; class=&quot;headerlink&quot; title=&quot;Redis作者的宣言&quot;&gt;&lt;/a&gt;Redis作者的宣言&lt;/h2&gt;&lt;p&gt;宣言中，作者列举了Redis的7大原则，可以向大家阐明Redis的思想，看了之后我觉得Redis的作者的确牛叉，Redis这款产品这的是程序猿的福利：&lt;/p&gt;
&lt;p&gt;1、Redis 是一个操作数据结构的语言工具，它提供基于 TCP 的协议以操作丰富的数据结构。&lt;/p&gt;
&lt;p&gt;在 Redis 中，数据结构这个词的意义不仅表示在某种数据结构上的操作，更包括了结构本身及这些操作的时间空间复杂度。&lt;/p&gt;
&lt;p&gt;2、Redis 定位于一个内存数据库，正是由于内存的快速访问特性，才使得 Redis 能够有如此高的性能，才使得 Redis 能够轻松处理大量复杂的数据结构，Redis 会尝试其它的存储方面的选择，但是永远不会改变它是一个内存数据库的角色。&lt;/p&gt;
&lt;p&gt;3、Redis 使用基础的 API 操作基础的数据结构， Redis 的 API 与数据结构一样，都是一些最基础的元素，你几乎可以将任何信息交互使用此 API 格式表示。作者调侃说，如果有其它非人类的智能生物存在，他们也能理解 Redis 的 API。因为它是如此的基础。（作者大大很有趣）&lt;/p&gt;
&lt;p&gt;4、Redis 有着诗一般优美的代码，经常有一些不太了解 Redis  有的人会建议 Redis 采用一些其它人的代码，以实现一些 Redis  未实现的功能，但这对我们来说就像是非要给《红楼梦》接上后四十回一样。&lt;/p&gt;
&lt;p&gt;5、Redis 始终避免复杂化，我们认为设计一个系统的本质，就是与复杂化作战。我们不会为了一个小功能而往源码里添加上千行代码，解决复杂问题的方法就是让复杂问题永远不要提复杂的问题。&lt;/p&gt;
&lt;p&gt;6、Redis 支持两个层成的 API，第一个层面包含部分操作 API，但它支持用于分布式环境下的 Redis。第二个层面的 API 支持更复杂的 multi-key 操作。它们各有所长，但是我们不会推出两者都支持的 API，但我们希望能够提供实例间数据迁移的命令，并执行 multi-key 操作。&lt;/p&gt;
&lt;p&gt;7、我们以优化代码为乐，我们相信编码是一件辛苦的工作，唯一对得起这辛苦的就是去享受它。如果我们在编码中失去了乐趣，那最好的解决办法就是停下来。我们决不会选择让Redis不好玩的开发模式。&lt;/p&gt;
&lt;p&gt;我只能感叹道：Redis乃神物，出污泥而不染，濯清涟而不妖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;： Redis作者antirez曾笑称Redis为一个数据结构服务器，我认为这个还是挺准确的，Redis的所有功能就是将数据以其固有的几种结构来保存，并提供给用户操作这几种结构的接口。&lt;/p&gt;
&lt;p&gt;本文非原创&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/01b37cdb3f33&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h2&gt;&lt;p&gt;Redis是一个 Key-Value 存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多，包括 stri
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="http://isunman.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Xcode中的Version和Build的区别</title>
    <link href="http://isunman.com/2018/08/01/the-difference-between-version-and-build-in-xcode/"/>
    <id>http://isunman.com/2018/08/01/the-difference-between-version-and-build-in-xcode/</id>
    <published>2018-08-01T15:22:50.517Z</published>
    <updated>2018-08-01T15:22:50.472Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Version对应的是CFBundleShortVersionString。&quot;&gt;&lt;a href=&quot;#Version对应的是CFBundleShortVersionString。&quot; class=&quot;headerlink&quot; title=&quot;Version对应的是CFBundleShortVersionString。&quot;&gt;&lt;/a&gt;Version对应的是CFBundleShortVersionString。&lt;/h3&gt;&lt;p&gt;Version 一般由产品部门确定，版本号是由分隔的整数组成的字符串，一般有2段或者3段式, 如:1.2,  1.2.3&lt;/p&gt;
&lt;h3 id=&quot;二段式：&quot;&gt;&lt;a href=&quot;#二段式：&quot; class=&quot;headerlink&quot; title=&quot;二段式：&quot;&gt;&lt;/a&gt;二段式：&lt;/h3&gt;&lt;p&gt;第一个段：（主版本号）大功能的新增或者有迥异的变化&lt;br&gt;第二个段：（副版本号）既包含小功能更新也会包含 bug 修复&lt;/p&gt;
&lt;h3 id=&quot;三段式：&quot;&gt;&lt;a href=&quot;#三段式：&quot; class=&quot;headerlink&quot; title=&quot;三段式：&quot;&gt;&lt;/a&gt;三段式：&lt;/h3&gt;&lt;p&gt;第一个段：重大修改的版本，如实现新的大功能或重大变化的修订。&lt;br&gt;第二个段：实现较突出的特点，如新功能添加和大问题修复。&lt;br&gt;第三个段：代表维护版本，修复bug。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;版本号的管理是一个谨慎的事情，希望各位开发者了解其中的意义。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Build（-应用程序内部标示-）&quot;&gt;&lt;a href=&quot;#Build（-应用程序内部标示-）&quot; class=&quot;headerlink&quot; title=&quot;Build（ 应用程序内部标示 ）&quot;&gt;&lt;/a&gt;Build（ 应用程序内部标示 ）&lt;/h3&gt;&lt;p&gt;Bulid 是给内部使用,与 Version 不会有太大联系.&lt;/p&gt;
&lt;p&gt;Bulid对应的是CFBundleVersion。标识（发布或未发布）的内部版本号。用以记录开发版本的，每次更新的时候都需要比上一次高。&lt;br&gt;作用：发布build版本供测试团队进行测试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Version对应的是CFBundleShortVersionString。&quot;&gt;&lt;a href=&quot;#Version对应的是CFBundleShortVersionString。&quot; class=&quot;headerlink&quot; title=&quot;Version对应的是CFBun
    
    </summary>
    
      <category term="iOS" scheme="http://isunman.com/categories/ios/"/>
    
    
      <category term="iOS" scheme="http://isunman.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序客服消息</title>
    <link href="http://isunman.com/2018/07/13/wechat-miniprogramcustomer-service-message/"/>
    <id>http://isunman.com/2018/07/13/wechat-miniprogramcustomer-service-message/</id>
    <published>2018-07-13T03:59:18.612Z</published>
    <updated>2018-07-13T03:59:18.575Z</updated>
    
    <content type="html">&lt;h3 id=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;a href=&quot;#微信小程序消息服务接入步骤&quot; class=&quot;headerlink&quot; title=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;/a&gt;微信小程序消息服务接入步骤&lt;/h3&gt;&lt;p&gt;1、填写服务器配置；&lt;br&gt;&lt;br&gt;2、验证服务器地址的有效性；&lt;br&gt;&lt;br&gt;3、依据接口文档实现业务逻辑。&lt;/p&gt;
&lt;h3 id=&quot;客服消息之接收消息和事件&quot;&gt;&lt;a href=&quot;#客服消息之接收消息和事件&quot; class=&quot;headerlink&quot; title=&quot;客服消息之接收消息和事件&quot;&gt;&lt;/a&gt;客服消息之接收消息和事件&lt;/h3&gt;&lt;p&gt;1、消息加密方式 与 数据格式（默认使用 明文模式与XML）。&lt;br&gt;&lt;br&gt;2、有加密的方式必须使用数据加密与解密算法，且与服务器配置统一。&lt;/p&gt;
&lt;h3 id=&quot;客服消息之发送客服消息&quot;&gt;&lt;a href=&quot;#客服消息之发送客服消息&quot; class=&quot;headerlink&quot; title=&quot;客服消息之发送客服消息&quot;&gt;&lt;/a&gt;客服消息之发送客服消息&lt;/h3&gt;&lt;p&gt;1、发送消息格式固定为JSON格式。&lt;br&gt;&lt;br&gt;2、支持4种消息类型：&lt;strong&gt;文本&lt;/strong&gt;，&lt;strong&gt;图片&lt;/strong&gt;，&lt;strong&gt;图文链接&lt;/strong&gt;，&lt;strong&gt;小程序卡片&lt;/strong&gt;。&lt;br&gt;&lt;br&gt;3、touser等于发送消息的FromUsername，即微信用户的openid。&lt;br&gt;&lt;br&gt;4、发送消息时需要accesstoken，则针对小程序APPID和APPSECRET成对使用，且缓存accesstoken 在服务器，随用随取。此处需要注意，同一个小程序APPID多处需要accesstoken时，最好可以统一调用同一个缓存数据。&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;p&gt;1、注意客服消息的收发是异步的，调用不同接口，并无直接关系。&lt;/p&gt;
&lt;p&gt;2、若使用加密方式，开发者在接收消息和事件时，都需要进行消息加解密（某些事件可能需要回复，回复时也需要先进行加密）。但是，通过API主动调用接口（包括调用客服消息接口发消息）时，不需要进行加密。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;1、&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;接入微信小程序消息服务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;接收消息和事件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发送客服消息&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;a href=&quot;#微信小程序消息服务接入步骤&quot; class=&quot;headerlink&quot; title=&quot;微信小程序消息服务接入步骤&quot;&gt;&lt;/a&gt;微信小程序消息服务接入步骤&lt;/h3&gt;&lt;p&gt;1、填写服务器配置；&lt;br&gt;&lt;br&gt;2、验证服务器地
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="微信" scheme="http://isunman.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="第三方API" scheme="http://isunman.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9api/"/>
    
  </entry>
  
  <entry>
    <title>如何用好 github 中的 watch、star、fork</title>
    <link href="http://isunman.com/2018/07/02/How-to-use-the-watch-star-and-fork-in-github/"/>
    <id>http://isunman.com/2018/07/02/How-to-use-the-watch-star-and-fork-in-github/</id>
    <published>2018-07-02T01:26:01.260Z</published>
    <updated>2018-07-02T01:26:01.201Z</updated>
    
    <content type="html">&lt;p&gt;在每个 github 项目的右上角，都有三个按钮,分别是 watch、star、fork，但是有些刚开始使用 github 的同学，可能对这三个按钮的使用却不怎么了解，包括一开始使用 github 的我也是如此。这篇博客，结合自的理解和使用，说说这三个按钮的用法以及一些个人见解。&lt;/p&gt;
&lt;p&gt;从左至右，依次是 watch star fork，下面分别说下他们的具体作用。&lt;/p&gt;
&lt;h2 id=&quot;watch&quot;&gt;&lt;a href=&quot;#watch&quot; class=&quot;headerlink&quot; title=&quot;watch&quot;&gt;&lt;/a&gt;watch&lt;/h2&gt;&lt;p&gt;watch 翻译过来可以称之为观察，点击 watch 可以看到如下的列表。&lt;/p&gt;
&lt;p&gt;对于别人的项目，默认自己都处于 Not watching 的状态，当你选择 Watching，表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 pull request、被别人发起了issue等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。&lt;/p&gt;
&lt;p&gt;如下，我 watching 了开源项目android-cn/android-discuss，那么以后任何人只要在这个项目下提交了 issue 或者在 issue 下面有任何留言，我的通知中心就会通知我。如果你配置了邮箱，你还可能会因此不断的收到通知邮件。&lt;/p&gt;
&lt;p&gt;如果你不想接受这个项目的所有通知，那么点击 Not Watching 即可。&lt;/p&gt;
&lt;p&gt;另外这里有一篇文章讲 如何正确接收 GitHub 的消息邮件，很不错的一篇文章，推荐大家看看。&lt;/p&gt;
&lt;h2 id=&quot;star&quot;&gt;&lt;a href=&quot;#star&quot; class=&quot;headerlink&quot; title=&quot;star&quot;&gt;&lt;/a&gt;star&lt;/h2&gt;&lt;p&gt;star 翻译过来是星，但这个翻译没任何具体意义，这里解释为关注或者点赞更合适，当你点击 star，表示你喜欢这个项目或者通俗点，可以把他理解成朋友圈的点赞吧，表示对这个项目的支持。&lt;/p&gt;
&lt;p&gt;不过相比朋友圈的点赞，github 里面会有一个列表，专门收集了你所有 star 过的项目，点击 github 个人头像，可以看到 your stars 的条目，点击就可以查看你 star 过的所有项目了，如下图所示&lt;/p&gt;
&lt;p&gt;不过，star 列表很容易出现这样的问题：如果你平时比较爱逛 Github， star 的项目过多后怎么快速查找自己想要的项目怎么办？&lt;/p&gt;
&lt;p&gt;这时，如果 github 可以提供一个分类功能该多好，就像微信公众号文章的收藏，你在点击微信菜单中的收藏后，微信会提示你对收藏的文章设置 tag。这样设置的好处是，以后在微信收藏列表中查找项目时，可以根设置的 tag 归类查找，这样查找效率会提高不少。&lt;/p&gt;
&lt;p&gt;但是不知道 github 的产品经理是怎么想的，github 本身没有这个功能。但是 github 这个全球最大的程序员社区从来也不缺有思想有执行力的程序员。&lt;/p&gt;
&lt;p&gt;也许是 github 自己也发现了检索的问题，现在 github 增加了一个类似的功能，可以给自己给自己的项目设置 topic.&lt;br&gt;给自己的项目设置 topic 后，相当于自己给自己的项目设置了一个 tag ，这样可以方便别人搜索。比如要搜索所有 topic 为 android 的项目，你只需要在 GitHub 搜索时输入 topic android  然后搜索即可。&lt;/p&gt;
&lt;h2 id=&quot;fork&quot;&gt;&lt;a href=&quot;#fork&quot; class=&quot;headerlink&quot; title=&quot;fork&quot;&gt;&lt;/a&gt;fork&lt;/h2&gt;&lt;p&gt;当选择 fork，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。&lt;/p&gt;
&lt;p&gt;一般来说，我们不需要使用 fork 这个功能，除非有一些项目，可能存在 bug 或者可以继续优化的地方，你想帮助原项目作者去完善这个项目或者单纯的想在原来项目基础上己维护一个属于自己项目（比如我 fork 的 AndroidWeekly 客户端，那么你可以 fork 一份项目下来，然后自己对这个项目进行修改完善，当你觉得项目没问题了，你就可以尝试发起 pull request 给原项目作者了。&lt;/p&gt;
&lt;p&gt;然后就静静等待他的 merge 邮件通知了。&lt;/p&gt;
&lt;p&gt;我看到很多人错误的在使用 fork。很多人把 fork 当成了收藏一样的功能，包括一开始使用 github 的我，每次看到一个好的项目就先 fork，&lt;/p&gt;
&lt;p&gt;因为这样，就可以我的 repository(仓库)列表下查看 fork 的项目了。其实你完全可以使用 star 来达到这个目的。&lt;/p&gt;
&lt;h2 id=&quot;使用建议&quot;&gt;&lt;a href=&quot;#使用建议&quot; class=&quot;headerlink&quot; title=&quot;使用建议&quot;&gt;&lt;/a&gt;使用建议&lt;/h2&gt;&lt;p&gt;1、对于一些可能会经常发生变化的会不定期更新的好项目 多使用 watch.&lt;/p&gt;
&lt;p&gt;比如 android-cn 团队的 android-discuss 项目，&lt;/p&gt;
&lt;p&gt;你就可以 watching 它，这里面都是一些关于 Android 技术的交流，如果有任何新问题，你都可以收到通知，你可以查看别人的回答，&lt;/p&gt;
&lt;p&gt;你可以回答别人提出的问题，这是一个很好的学习成长方式。&lt;/p&gt;
&lt;p&gt;其他值得watch的项目还有很多，比如 github 上很多的 Awesome 系列的项目,如 Awesome-MaterialDesign 等，你 watch 这些项目了，&lt;/p&gt;
&lt;p&gt;只要项目新增一些好玩好用的东西，你就会收到通知。&lt;/p&gt;
&lt;p&gt;我在知乎上看到有人问这样的问题，说 github 上有哪些值得 watch 的项目，其实有很多，我自己也整理了一些，但是没放到 github.&lt;/p&gt;
&lt;p&gt;值得注意的是，如果 watch多了，你可能会被无休止的邮件通知烦死（邮件通知可设置），因为被 watch 项目有任何留言、PR等更新都会触发通知，所以做好权衡。&lt;/p&gt;
&lt;p&gt;2、喜欢一个项目就 star 它吧~&lt;/p&gt;
&lt;p&gt;3、修改开源项目就使用 fork，这样你就可以在原项目的基础上，对项目进行修改提交，现在你是这个项目的主人啦~&lt;/p&gt;
&lt;h2 id=&quot;小细节&quot;&gt;&lt;a href=&quot;#小细节&quot; class=&quot;headerlink&quot; title=&quot;小细节&quot;&gt;&lt;/a&gt;小细节&lt;/h2&gt;&lt;p&gt;有些时候，你看到一个项目的 star 数有很多，你就想知道到底都有那些人 star 了这个项目，或者 fork 了这个项目，&lt;/p&gt;
&lt;p&gt;但是环顾一圈，你却找不到一个入口，后来自己不经意的发现，只要点击 star 傍边的数字，就可以查看有哪些人 star 了这个项目。&lt;/p&gt;
&lt;p&gt;是不是有点意思，现在你就可以去试试，watch、fork上面的数字都是可以点击的，道理一样。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/6c366b53ea41&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文参考&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在每个 github 项目的右上角，都有三个按钮,分别是 watch、star、fork，但是有些刚开始使用 github 的同学，可能对这三个按钮的使用却不怎么了解，包括一开始使用 github 的我也是如此。这篇博客，结合自的理解和使用，说说这三个按钮的用法以及一些个人
    
    </summary>
    
      <category term="工作学习" scheme="http://isunman.com/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Github" scheme="http://isunman.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>理解同步和异步</title>
    <link href="http://isunman.com/2018/07/01/understand-synchronization-and-asynchrony/"/>
    <id>http://isunman.com/2018/07/01/understand-synchronization-and-asynchrony/</id>
    <published>2018-06-30T17:04:43.866Z</published>
    <updated>2018-06-30T17:04:43.809Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一种说法&quot;&gt;&lt;a href=&quot;#一种说法&quot; class=&quot;headerlink&quot; title=&quot;一种说法&quot;&gt;&lt;/a&gt;一种说法&lt;/h3&gt;&lt;p&gt;老实说，玩电脑也玩了好几年了；印象中看到”同步和异步”关键字的次数已经记不清了，总感觉自己知道点什么，但却又说不出来什么东西，这是为啥？——  因为没有深入理解，没有总结；也应了那句古话：纸上学来终觉浅，绝知此事要躬行。 不卖关子了，开始进入正题。&lt;/p&gt;
&lt;p&gt;“同步”就好比：你去外地上学(人生地不熟)，突然生活费不够了；此时你决定打电话回家，通知家里转生活费过来，可是当你拨出电话时，对方一直处于待接听状态(即：打不通，联系不上)，为了拿到生活费，你就不停的oncall、等待，最终可能不能及时要到生活费，导致你今天要做的事都没有完成，而白白花掉了时间。&lt;/p&gt;
&lt;p&gt;“异步”就是：在你打完电话发现没人接听时，猜想：对方可能在忙，暂时无法接听电话，所以你发了一条短信(或者语音留言，亦或是其他的方式)通知对方后便忙其他要紧的事了；这时你就不需要持续不断的拨打电话，还可以做其他事情；待一定时间后，对方看到你的留言便回复响应你，当然对方可能转钱也可能不转钱。但是整个一天下来，你还做了很多事情。 或者说你找室友临时借了一笔钱，又开始happy的上学时光了。&lt;/p&gt;
&lt;p&gt;简而言之，言而总之：同步就是我强依赖你(对方)，我必须等到你的回复，才能做出下一步响应。即我的操作(行程)是顺序执行的，中间少了哪一步都不可以，或者说中间哪一步出错都不可以，类似于编程中程序被解释器顺序执行一样；同时如果我没有收到你的回复，我就一直处于等待、也就是阻塞的状态。 异步则相反，我并不强依赖你，我对你响应的时间也不敏感，无论你返回还是不返回，我都能继续运行；你响应并返回了，我就继续做之前的事情，你没有响应，我就做其他的事情。也就是说我不存在等待对方的概念，我就是非阻塞的。&lt;/p&gt;
&lt;p&gt;从上面的例子来看：同步似乎等价于阻塞，异步则等价于非阻塞。其实有些狭义，但不可否认的是，在一定情况下，确实可以这么认为；因为同步一定存在着阻塞状态，而异步一定不存在非阻塞的状态。 但是不是就是说 同步调用 == 阻塞调用呢？然并不是；阻塞和非阻塞强调的是程序在等待调用结果（消息，返回值）时的状态.  阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。 对于同步调用来说，很多时候当前线程还是激活的状态，只是从逻辑上当前函数没有返回而已，即同步等待时什么都不干，白白占用着资源。&lt;/p&gt;
&lt;h3 id=&quot;另一个有趣的例子&quot;&gt;&lt;a href=&quot;#另一个有趣的例子&quot; class=&quot;headerlink&quot; title=&quot;另一个有趣的例子&quot;&gt;&lt;/a&gt;另一个有趣的例子&lt;/h3&gt;&lt;p&gt;老张爱喝茶，废话不说，煮开水。&lt;/p&gt;
&lt;p&gt;出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。&lt;/p&gt;
&lt;p&gt;1 老张把水壶放到火上，立等水开。（同步阻塞）老张觉得自己有点傻&lt;/p&gt;
&lt;p&gt;2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。&lt;/p&gt;
&lt;p&gt;3 老张把响水壶放到火上，立等水开。（异步阻塞）老张觉得这样傻等意义不大&lt;/p&gt;
&lt;p&gt;4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）老张觉得自己聪明了。&lt;/p&gt;
&lt;p&gt;所谓同步异步，只是对于水壶而言。&lt;/p&gt;
&lt;p&gt;普通水壶，同步；响水壶，异步。&lt;/p&gt;
&lt;p&gt;虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。&lt;/p&gt;
&lt;p&gt;所谓阻塞非阻塞，仅仅对于老张而言。&lt;/p&gt;
&lt;p&gt;立等的老张，阻塞；看电视的老张，非阻塞。&lt;/p&gt;
&lt;p&gt;情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.zhihu.com/question/19732473/answer/20851256&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎问答&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一种说法&quot;&gt;&lt;a href=&quot;#一种说法&quot; class=&quot;headerlink&quot; title=&quot;一种说法&quot;&gt;&lt;/a&gt;一种说法&lt;/h3&gt;&lt;p&gt;老实说，玩电脑也玩了好几年了；印象中看到”同步和异步”关键字的次数已经记不清了，总感觉自己知道点什么，但却又说不出来什么东西
    
    </summary>
    
      <category term="技术日记" scheme="http://isunman.com/categories/%E6%8A%80%E6%9C%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="技术概念" scheme="http://isunman.com/tags/%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
</feed>
